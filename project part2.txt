
================================================
File: screens/tabScreens/ChatContent.tsx
================================================
import { View, Text, Dimensions, FlatList, Image } from "react-native";
import React, { useState } from "react";
import { SafeAreaView } from "react-native-safe-area-context";
import { StatusBar } from "expo-status-bar";
import TopBar from "../../components/viewScreens/TopBar";
import RestaurantMsg from "../../components/chat/RestaurantMsg";
import { ScrollView } from "react-native-gesture-handler";
import { scaleHeight } from "../../Scaling";

const { width, height } = Dimensions.get("window");

const ChatContent = ({ navigation }) => {
  // const renderItem = ({ item }) => <RestaurantMsg navigation={navigation} />

  return (
    <SafeAreaView style={{ backgroundColor: "#F0F4F8" }}>
      <TopBar navigation={navigation} top_title="Messages" />
      <ScrollView showsVerticalScrollIndicator={false}>
        <View
          style={{
            paddingBottom: scaleHeight(45),
          }}
        >
          {Array(12)
            .fill(null)
            .map((_, index) => (
              <RestaurantMsg key={index} navigation={navigation} />
            ))}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};
export default ChatContent;


================================================
File: screens/tabScreens/CustomerProfile.tsx
================================================
"use client"

import { useContext, useState } from "react"
import { View, Text, StyleSheet, Image, TouchableOpacity, ScrollView, Switch } from "react-native"
import { Ionicons, MaterialIcons, FontAwesome5, Feather } from "@expo/vector-icons"
import { scaleWidth, scaleHeight } from "../../Scaling"
import { myContext } from "../../context/AppProvider"
import { LinearGradient } from "expo-linear-gradient"

const CustomerProfile = ({ navigation }) => {
  const { state } = useContext(myContext)
  const [notificationsEnabled, setNotificationsEnabled] = useState(true)

  // Placeholder data - replace with actual data from your state or API
  const customerInfo = {
    name: state.name || "John Doe",
    email: state.email || "john.doe@example.com",
    phone: state.phone || "+91 98765 43210",
    address: state.address || "123 Main St, City, State, 12345",
    profilePic: state.profilePic || "https://via.placeholder.com/150",
  }

  const orderHistory = [
    { id: "1", restaurant: "Tasty Bites", date: "2023-05-15", total: 450 },
    { id: "2", restaurant: "Spice Garden", date: "2023-05-10", total: 380 },
    { id: "3", restaurant: "Pizza Paradise", date: "2023-05-05", total: 520 },
  ]

  const handleEditProfile = () => {
    // Navigate to edit profile screen
    // navigation.navigate('EditProfile');
  }

  const handleViewAllOrders = () => {
    // Navigate to all orders screen
    // navigation.navigate('AllOrders');
  }

  const toggleNotifications = () => {
    setNotificationsEnabled(!notificationsEnabled)
  }

  const renderOrderItem = (order) => (
    <TouchableOpacity key={order.id} style={styles.orderItem}>
      <View style={styles.orderInfo}>
        <Text style={styles.orderRestaurant}>{order.restaurant}</Text>
        <Text style={styles.orderDate}>{order.date}</Text>
      </View>
      <Text style={styles.orderTotal}>₹{order.total}</Text>
    </TouchableOpacity>
  )

  return (
    <ScrollView style={styles.container}>
      <LinearGradient colors={["#4CAF50", "#45a049"]} style={styles.header}>
        <View style={styles.profileInfo}>
          <Image source={{ uri: customerInfo.profilePic }} style={styles.profilePic} />
          <View style={styles.nameContainer}>
            <Text style={styles.name}>{customerInfo.name}</Text>
            <Text style={styles.email}>{customerInfo.email}</Text>
          </View>
        </View>
        <TouchableOpacity style={styles.editButton} onPress={handleEditProfile}>
          <Feather name="edit-2" size={20} color="#FFFFFF" />
        </TouchableOpacity>
      </LinearGradient>

      <View style={styles.infoSection}>
        <View style={styles.infoItem}>
          <Ionicons name="call-outline" size={24} color="#4CAF50" style={styles.infoIcon} />
          <Text style={styles.infoText}>{customerInfo.phone}</Text>
        </View>
        <View style={styles.infoItem}>
          <Ionicons name="location-outline" size={24} color="#4CAF50" style={styles.infoIcon} />
          <Text style={styles.infoText}>{customerInfo.address}</Text>
        </View>
      </View>

      <View style={styles.section}>
        <View style={styles.sectionHeader}>
          <Text style={styles.sectionTitle}>Recent Orders</Text>
          <TouchableOpacity onPress={handleViewAllOrders}>
            <Text style={styles.viewAllText}>View All</Text>
          </TouchableOpacity>
        </View>
        {orderHistory.map(renderOrderItem)}
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Settings</Text>
        <View style={styles.settingItem}>
          <MaterialIcons name="notifications" size={24} color="#4CAF50" style={styles.settingIcon} />
          <Text style={styles.settingText}>Notifications</Text>
          <Switch
            trackColor={{ false: "#767577", true: "#a5d6a7" }}
            thumbColor={notificationsEnabled ? "#4CAF50" : "#f4f3f4"}
            onValueChange={toggleNotifications}
            value={notificationsEnabled}
          />
        </View>
        <TouchableOpacity style={styles.settingItem}>
          <FontAwesome5 name="user-shield" size={24} color="#4CAF50" style={styles.settingIcon} />
          <Text style={styles.settingText}>Privacy Settings</Text>
          <MaterialIcons name="chevron-right" size={24} color="#757575" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.settingItem}>
          <MaterialIcons name="help-outline" size={24} color="#4CAF50" style={styles.settingIcon} />
          <Text style={styles.settingText}>Help & Support</Text>
          <MaterialIcons name="chevron-right" size={24} color="#757575" />
        </TouchableOpacity>
      </View>

      <TouchableOpacity style={styles.logoutButton}>
        <Text style={styles.logoutText}>Log Out</Text>
      </TouchableOpacity>
    </ScrollView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F0F4F8",
  },
  header: {
    padding: scaleWidth(20),
    paddingBottom: scaleHeight(30),
  },
  profileInfo: {
    flexDirection: "row",
    alignItems: "center",
  },
  profilePic: {
    width: scaleWidth(80),
    height: scaleWidth(80),
    borderRadius: scaleWidth(40),
    borderWidth: 3,
    borderColor: "#FFFFFF",
  },
  nameContainer: {
    marginLeft: scaleWidth(20),
  },
  name: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(20),
    color: "#FFFFFF",
  },
  email: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(14),
    color: "#E0E0E0",
  },
  editButton: {
    position: "absolute",
    top: scaleHeight(20),
    right: scaleWidth(20),
    backgroundColor: "rgba(255, 255, 255, 0.3)",
    borderRadius: scaleWidth(20),
    padding: scaleWidth(8),
  },
  infoSection: {
    backgroundColor: "#FFFFFF",
    borderRadius: scaleWidth(10),
    margin: scaleWidth(20),
    marginTop: scaleHeight(-20),
    padding: scaleWidth(20),
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  infoItem: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: scaleHeight(10),
  },
  infoIcon: {
    marginRight: scaleWidth(10),
  },
  infoText: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(14),
    color: "#333333",
    flex: 1,
  },
  section: {
    backgroundColor: "#FFFFFF",
    borderRadius: scaleWidth(10),
    margin: scaleWidth(20),
    marginTop: 0,
    padding: scaleWidth(20),
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  sectionHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: scaleHeight(10),
  },
  sectionTitle: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(18),
    color: "#333333",
  },
  viewAllText: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(14),
    color: "#4CAF50",
  },
  orderItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingVertical: scaleHeight(10),
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  orderInfo: {
    flex: 1,
  },
  orderRestaurant: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(14),
    color: "#333333",
  },
  orderDate: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(12),
    color: "#757575",
  },
  orderTotal: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(14),
    color: "#4CAF50",
  },
  settingItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: scaleHeight(12),
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  settingIcon: {
    marginRight: scaleWidth(15),
  },
  settingText: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(16),
    color: "#333333",
    flex: 1,
  },
  logoutButton: {
    backgroundColor: "#FF6B6B",
    borderRadius: scaleWidth(10),
    margin: scaleWidth(20),
    marginTop: 0,
    padding: scaleHeight(15),
    alignItems: "center",
  },
  logoutText: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(16),
    color: "#FFFFFF",
  },
})

export default CustomerProfile



================================================
File: screens/tabScreens/Favourite.tsx
================================================
import { useContext } from "react";
import { myContext } from "../../context/AppProvider";
import AuthPrompt from "../viewScreens/AuthPrompt";
import FavouriteContent from "./FavouriteContent";


const Favourite = ({ navigation }) => {

  const { isLogged } = useContext(myContext)
  return (
    <>
      {isLogged ? (<FavouriteContent navigation={navigation} />) : (<AuthPrompt navigation={navigation} />)}

    </>
  );
};

export default Favourite;

================================================
File: screens/tabScreens/FavouriteContent.tsx
================================================
import React, { useState } from "react";
import {
  View,
  FlatList,
  StyleSheet,
  TouchableWithoutFeedback,
} from "react-native";
import List from "../../components/viewScreens/List";
import chatpate from "../../assets/chatapate.jpeg";
import m1 from '../../assets/images/img1 (1).png'
import m2 from '../../assets/images/img1 (2).png'
import m3 from '../../assets/images/img1 (3).png'
import TopBar from "../../components/viewScreens/TopBar";
import { SafeAreaView } from "react-native-safe-area-context";
import { StatusBar } from "expo-status-bar";
import { ScrollView } from "react-native-gesture-handler";
import { scaleHeight } from "../../Scaling";

const FavouriteContent = ({ navigation }) => {
  const foodData = [
    {
      price: "$5.00",
      foodName: "Chatpate",
      restaurantName: "Food Corner",
      image: { image1: m1, image2: m2, image3: m3 },
      isLoveNeeded: true,
    },
    {
      price: "$5.00",
      foodName: "Chatpate",
      restaurantName: "Food Corner",
      image: { image1: m1, image2: m2, image3: m3 },
      isLoveNeeded: true,
    },
    {
      price: "$5.00",
      foodName: "Chatpate",
      restaurantName: "Food Corner",
      image: chatpate,
      isLoveNeeded: true,
    },
    {
      price: "$5.00",
      foodName: "Chatpate",
      restaurantName: "Food Corner",
      image: chatpate,
      isLoveNeeded: true,
    },
  ];

  return (
    <SafeAreaView style={ownstyles.safeArea}>
      <View style={ownstyles.homeScreen}>
        <TopBar navigation={navigation} top_title="Favorite"  withSettingIcons={undefined} handleSettingIcon={undefined} />

        <ScrollView style={ownstyles.scrollView} showsVerticalScrollIndicator={false}>
          <View style={ownstyles.contentContainer}>
            {foodData.map((item, index) => (
              <List
                key={index}
                price={item.price}
                foodName={item.foodName}
                restaurantName={item.restaurantName}
                images={item.image}
                navigation={navigation}
                withRestaurant={true}
                handlePressonList={()=>{navigation.navigate('ViewFood')}}
              />
            ))}
          </View>
        </ScrollView>
        
      </View>
    </SafeAreaView>
  );
};

const ownstyles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: "#F0F4F8",
  },
  homeScreen: {
    flex: 1,
  },
  scrollView: {
    backgroundColor: "#F0F4F8",
    flex: 1,
  },
  contentContainer: {
    gap: scaleHeight(10),
    alignItems: "center",
  },
});

export default FavouriteContent;

================================================
File: screens/tabScreens/Home.tsx
================================================
import { View, Text, Dimensions, Image, TouchableOpacity, FlatList } from 'react-native'
import { SafeAreaView } from 'react-native-safe-area-context';
import { styles } from '../../style/style';
import { StatusBar } from 'expo-status-bar';
import momo from '../../assets/momo.jpeg'
import chatapate from '../../assets/chatapate.jpeg'
import { ScrollView } from 'react-native-gesture-handler';
import Map from '../../components/home/Map';
import NavBar from '../../components/home/NavBar';
import chicken from '../../assets/images/chicken.png'
import dishes from '../../assets/images/dishes.png'
import categoryMOMO from '../../assets/images/categoryMOMO.png'
import categoryNoodles from '../../assets/images/categoryNoodles.png'
import categoryBurger from '../../assets/images/categoryBurger.png'
import categoryCake from '../../assets/images/categoryCake.png'
import categoryPizza from '../../assets/images/categoryPizza.png'
import categoryChicken from '../../assets/images/categoryChicken.png'
import biryani from '../../assets/biryani.jpg'
import img3 from '../../assets/images/img1 (3).png'
import { StyleSheet } from 'react-native';
import PagerView from 'react-native-pager-view'
import React, { useState, useEffect, useContext, useMemo, useCallback } from 'react'
import CategoriesRestaurant from '../../components/home/CategoriesRestaurant';
import NearDishCard from '../../components/home/NearDishCard';
import Greeting from '../../components/home/Greeting';
import FoodCard from '../../components/home/FoodCard';
import { scaleHeight, scaleWidth } from '../../Scaling';
import { myContext } from '../../context/AppProvider';
import SnackBar from '../viewScreens/SnackBar';
import CustomSnackbar from '../viewScreens/CustomSnackbar';
import { baseURL } from '../../service';
import { Skeleton } from '@rneui/themed';
import { LinearGradient } from 'expo-linear-gradient';
import SlickCarousel from '../../components/home/SlickCarousel';
import { useFocusEffect } from '@react-navigation/native';



const { width, height } = Dimensions.get('window');


const images = [
  dishes,
  chicken,
  dishes,
];

const Home = ({ navigation }) => {

  const { food_state } = useContext(myContext);
  const { snackBar, setsnackBar, state } = useContext(myContext)
  const [activeIndex, setActiveIndex] = useState(0);
  const dishItems = [
    {
      "image": categoryChicken,
      "price": "1500",
      "name": "Grilled Chicken",
      "reviewsNumber": 20,
      "rating": 4.5
    },
    {
      "image": categoryBurger,
      "price": "300",
      "name": "Burger",
      "reviewsNumber": 200,
      "rating": 4.5
    },
    {
      "image": categoryMOMO,
      "price": "1500",
      "name": "Grilled Chicken",
      "reviewsNumber": 20,
      "rating": 4.5
    },
    {
      "image": categoryNoodles,
      "price": "300",
      "name": "Burger",
      "reviewsNumber": 200,
      "rating": 4.5
    },
    {
      "image": categoryPizza,
      "price": "1500",
      "name": "Grilled Chicken",
      "reviewsNumber": 20,
      "rating": 4.5
    },
    {
      "image": categoryCake,
      "price": "300",
      "name": "Burger",
      "reviewsNumber": 200,
      "rating": 4.5
    },
  ]


  const leftColumn = useMemo(() => food_state.filter((_, i) => i % 2 === 0), [food_state]);
  const rightColumn = useMemo(() => food_state.filter((_, i) => i % 2 === 1), [food_state]);


  useEffect(() => {
    const interval = setInterval(() => {
      setActiveIndex((prevIndex) => (prevIndex + 1) % images.length);
    }, 4000);

    return () => clearInterval(interval); 
  }, []);

  useEffect(() => {
    if (pagerRef.current) {
      pagerRef.current.setPage(activeIndex);
    }
  }, [activeIndex]);

  const pagerRef = React.useRef(null);

  const handleSearchScreen = () => {
    navigation.navigate('SearchScreen')
    console.log('Navigating to search screen')
  }
  const handleToFoodViewPage = (item) => {
    navigation.navigate('ViewFood', { food_details: item })
  }



  return (
    <SafeAreaView>
      
      <View style={styles.home_screen}>

        <NavBar handleSearchScreen={handleSearchScreen} isTextInput={false} isBack={false} navigation={navigation} />

        {/* <ScrollView showsVerticalScrollIndicator={false} stickyHeaderIndices={[1]}> */}
        <ScrollView showsVerticalScrollIndicator={false}
          nestedScrollEnabled={true}
          overScrollMode='never'
          scrollEventThrottle={16}
          // decelerationRate='normal'
        >

          <View style={styles1.dashboardContainer} >
            <Greeting name={state.name} />
            <SlickCarousel ></SlickCarousel>
            <View style={{ gap: scaleHeight(5), marginTop: scaleHeight(10), backgroundColor: '#F0F4F8', paddingVertical: scaleHeight(10), width: '100%' }}>
              <View style={{ width: '100%', paddingHorizontal: scaleWidth(8) }}>
                <Text style={{ fontFamily: 'poppins_bold', fontSize: scaleWidth(18) }}>Restaurant Categories</Text>
              </View>
              <View style={{ flexDirection: 'row', justifyContent: 'space-evenly', width: '100%' }}>
                <CategoriesRestaurant
                  dishImage={categoryMOMO}
                  dishName={'Momo'}
                />
                <CategoriesRestaurant
                  dishImage={categoryNoodles}
                  dishName={'Noodles'}
                />
                <CategoriesRestaurant
                  dishImage={categoryBurger}
                  dishName={'Burger'}
                />
                <CategoriesRestaurant
                  dishImage={categoryPizza}
                  dishName={'Pizza'}
                />
                <CategoriesRestaurant
                  dishImage={categoryChicken}
                  dishName={'Chicken'}
                />
                <CategoriesRestaurant
                  dishImage={categoryCake}
                  dishName={'Cake'}
                />

              </View>

            </View>

            <View style={{ gap: scaleHeight(5), marginTop: scaleHeight(10) }}>
              <View style={{ width: '100%', paddingHorizontal: scaleWidth(8) }}>
                <Text style={{ fontFamily: 'poppins_bold', fontSize: scaleWidth(18) }}>Explore on maps</Text>
              </View>
              <Map />
            </View>

            <View style={{ gap: scaleHeight(5), marginTop: scaleHeight(10), width: '100%', alignItems: 'center', backgroundColor: '#F0F4F8', paddingVertical: scaleHeight(5) }}>
              <View style={{ width: '100%', paddingHorizontal: scaleWidth(8) }}>
                <Text style={{ fontFamily: 'poppins_bold', fontSize: scaleWidth(18) }}>Best Selling Items Near Me</Text>
              </View>

              <View>
                <View style={{ flexDirection: 'column', justifyContent: 'space-evenly', width: '100%', marginLeft: scaleWidth(20) }}>
                  <ScrollView horizontal={true} showsHorizontalScrollIndicator={false} style={{ height: scaleHeight(200) }}>
                    <View style={{ height: '100%', width: '100%', flexDirection: 'row', gap: scaleWidth(30), paddingHorizontal: scaleWidth(12) }}>
                      {
                        dishItems.map((item, index) => (
                          <View key={index} style={{ height: '100%', alignItems: 'center', justifyContent: 'center' }}>
                            <NearDishCard
                              image={item.image}
                              price={item.price}
                              name={item.name}
                              reiwesNumber={item.reviewsNumber}
                              rating={item.rating}
                            />
                          </View>
                        ))
                      }
                    </View>
                  </ScrollView>
                </View>
              </View>
            </View>
          </View>







          {/*
          FoodCards Section with two columns , Left and Right
          The Left column and Right column are first filtered and 
          then mapped with the food data from the server
          */}



          <View style={styles.foodItems_container}>
            <View style={{ width: '49%', alignItems: 'center' }}>
              {


                leftColumn.map((item, index) => (
                  <FoodCard
                    key={item.id}
                    item={item}
                    // food_picture={item.images.length > 0 ? item.images[0].image : null}
                    // price={item.food_price}
                    // restaurant_name={item.food_restaurant || 'KFC'}
                    // discount={item.discount || 12}
                    // foodName={item.food_name}
                    // no_fragments={null}
                    // eatsNumber={item.totol_eats || 120}
                    // rating={item.rating || 3.5}
                    // location={item.food_location || 'Kathmandu, Thamel'}
                    handleToFoodViewPage={() => handleToFoodViewPage(item)}
                    onAddToCart={undefined}
                  />
                ))


              }
            </View>

            <View style={{ width: '49%', alignItems: 'center' }}>
              {
                rightColumn.map((item, index) => (
                  <FoodCard
                  key={item.id}
                  item={item}
                  // food_picture={item.images.length > 0 ? item.images[0].image : null}
                  // price={item.food_price}
                  // restaurant_name={item.food_restaurant || 'KFC'}
                  // discount={item.discount || 12}
                  // foodName={item.food_name}
                  // no_fragments={null}
                  // eatsNumber={item.totol_eats || 120}
                  // rating={item.rating || 3.5}
                  // location={item.food_location || 'Kathmandu, Thamel'}
                  handleToFoodViewPage={() => handleToFoodViewPage(item)}
                  onAddToCart={undefined}
                  />
                ))
              }
            </View>
          </View>
        </ScrollView>
        {/* <CustomSnackbar message={state.snackmessage} visible={snackBar}></CustomSnackbar> */}
        <SnackBar message={state.snackmessage} visible={snackBar} />
      </View>

    </SafeAreaView>
  )
}
export default Home

const styles1 = StyleSheet.create({
  dashboardContainer: {
    height: height - scaleHeight(120),
    flexDirection: 'column',
    justifyContent: 'flex-start',
    alignItems: 'center',
    backgroundColor: '#ffffff',
  },
  dashContainer: {
    flexDirection: 'row',
    gap: scaleWidth(10),
    position: 'static',
    bottom: scaleHeight(15),
    width: '100%',
    zIndex: 1,
    justifyContent: 'center',
  },
  dash: {
    borderBottomWidth: scaleWidth(6),
    borderColor: 'grey',
    height: 0,
    borderRadius: 5
  },
  activeDash: {
    borderBottomWidth: scaleWidth(6),
    borderColor: 'white',
    height: 0,
    borderRadius: 5
  },
})

================================================
File: screens/tabScreens/Profile.tsx
================================================
"use client"
import { useContext } from "react"
import { View } from "react-native"
import { myContext } from "../../context/AppProvider"
import ProfileContent from "./ProfileContent"
import AuthPrompt from "../viewScreens/AuthPrompt"


const Profile = ({ navigation }) => {
  const { state, isLogged } = useContext(myContext)
  return (
    <>
      { isLogged ? (<ProfileContent navigation={navigation} />) : (<AuthPrompt navigation={navigation}/>) }

    </>

  )
}

export default Profile



================================================
File: screens/tabScreens/ProfileContent.tsx
================================================
"use client"

import { useCallback, useContext, useState } from "react"
import { View, Text, StyleSheet, Image, TouchableOpacity, ScrollView, Switch, Alert } from "react-native"
import { Ionicons, MaterialIcons, FontAwesome5, Feather } from "@expo/vector-icons"
import { scaleWidth, scaleHeight } from "../../Scaling"
import { myContext } from "../../context/AppProvider"
import { LinearGradient } from "expo-linear-gradient"
import { SafeAreaView } from "react-native-safe-area-context"
import { StatusBar } from "expo-status-bar"
import { CommonActions, useFocusEffect } from "@react-navigation/native"
import { handleLogout } from "../../context/ProvideFunction/Logout"

const ProfileContent = ({ navigation }) => {




  const { state,setisLoading,clearAllData } = useContext(myContext)
  const [notificationsEnabled, setNotificationsEnabled] = useState(true)

  // Placeholder data - replace with actual data from your state or API
  const customerInfo = {
    name: state.name || "John Doe",
    email: state.email || "john.doe@example.com",
    phone: state.phone || "+91 98765 43210",
    address: state.address || "123 Main St, City, State, 12345",
    profilePic: state.profilePic || "https://via.placeholder.com/150",
  }

  const orderHistory = [
    { id: "1", restaurant: "Tasty Bites", date: "2023-05-15", total: 450 },
    { id: "2", restaurant: "Spice Garden", date: "2023-05-10", total: 380 },
    { id: "3", restaurant: "Pizza Paradise", date: "2023-05-05", total: 520 },
  ]

  const handleEditProfile = () => {
    // Navigate to edit profile screen
    // navigation.navigate('EditProfile');
  }

  const handleViewAllOrders = () => {
    // Navigate to all orders screen
    // navigation.navigate('AllOrders');
  }

  const toggleNotifications = () => {
    setNotificationsEnabled(!notificationsEnabled)
  }

  const renderOrderItem = (order) => (
    <TouchableOpacity key={order.id} style={styles.orderItem}>
      <View style={styles.orderInfo}>
        <Text style={styles.orderRestaurant}>{order.restaurant}</Text>
        <Text style={styles.orderDate}>{order.date}</Text>
      </View>
      <Text style={styles.orderTotal}>₹{order.total}</Text>
    </TouchableOpacity>
    
  )


  return (
    <SafeAreaView style={{flex:1}}>
      <StatusBar backgroundColor="#4CAF50" style="light"/>
    <ScrollView style={styles.container}>
      <LinearGradient colors={["#4CAF50", "#45a049"]} style={styles.header}>
        <View style={styles.profileInfo}>
          <Image source={{ uri: customerInfo.profilePic }} style={styles.profilePic} />
          <View style={styles.nameContainer}>
            <Text style={styles.name}>{customerInfo.name}</Text>
            <Text style={styles.email}>{customerInfo.email}</Text>
          </View>
        </View>
        <TouchableOpacity style={styles.editButton} onPress={handleEditProfile}>
          <Feather name="edit-2" size={20} color="#FFFFFF" />
        </TouchableOpacity>
      </LinearGradient>

      <View style={styles.infoSection}>
        <View style={styles.infoItem}>
          <Ionicons name="call-outline" size={24} color="#4CAF50" style={styles.infoIcon} />
          <Text style={styles.infoText}>{customerInfo.phone}</Text>
        </View>
        <View style={styles.infoItem}>
          <Ionicons name="location-outline" size={24} color="#4CAF50" style={styles.infoIcon} />
          <Text style={styles.infoText}>{customerInfo.address}</Text>
        </View>
      </View>

      <View style={styles.section}>
        <View style={styles.sectionHeader}>
          <Text style={styles.sectionTitle}>Recent Orders</Text>
          <TouchableOpacity onPress={handleViewAllOrders}>
            <Text style={styles.viewAllText}>View All</Text>
          </TouchableOpacity>
        </View>
        {orderHistory.map(renderOrderItem)}
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Settings</Text>
        <View style={styles.settingItem}>
          <MaterialIcons name="notifications" size={24} color="#4CAF50" style={styles.settingIcon} />
          <Text style={styles.settingText}>Notifications</Text>
          <Switch
            trackColor={{ false: "#767577", true: "#a5d6a7" }}
            thumbColor={notificationsEnabled ? "#4CAF50" : "#f4f3f4"}
            onValueChange={toggleNotifications}
            value={notificationsEnabled}
          />
        </View>
        <TouchableOpacity style={styles.settingItem}>
          <FontAwesome5 name="user-shield" size={24} color="#4CAF50" style={styles.settingIcon} />
          <Text style={styles.settingText}>Privacy Settings</Text>
          <MaterialIcons name="chevron-right" size={24} color="#757575" />
        </TouchableOpacity>
        <TouchableOpacity style={styles.settingItem}>
          <MaterialIcons name="help-outline" size={24} color="#4CAF50" style={styles.settingIcon} />
          <Text style={styles.settingText}>Help & Support</Text>
          <MaterialIcons name="chevron-right" size={24} color="#757575" />
        </TouchableOpacity>
      </View>

      <TouchableOpacity style={styles.logoutButton} onPress={()=>{handleLogout(setisLoading,clearAllData,navigation)}}>
        <Text style={styles.logoutText}>Log Out</Text>
      </TouchableOpacity>
    </ScrollView>
    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F0F4F8",
  },
  header: {
    padding: scaleWidth(20),
    paddingBottom: scaleHeight(30),
  },
  profileInfo: {
    flexDirection: "row",
    alignItems: "center",
  },
  profilePic: {
    width: scaleWidth(80),
    height: scaleWidth(80),
    borderRadius: scaleWidth(40),
    borderWidth: 3,
    borderColor: "#FFFFFF",
  },
  nameContainer: {
    marginLeft: scaleWidth(20),
  },
  name: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(20),
    color: "#FFFFFF",
  },
  email: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(14),
    color: "#E0E0E0",
  },
  editButton: {
    position: "absolute",
    top: scaleHeight(20),
    right: scaleWidth(20),
    backgroundColor: "rgba(255, 255, 255, 0.3)",
    borderRadius: scaleWidth(20),
    padding: scaleWidth(8),
  },
  infoSection: {
    backgroundColor: "#FFFFFF",
    borderRadius: scaleWidth(10),
    margin: scaleWidth(20),
    marginTop: scaleHeight(-20),
    padding: scaleWidth(20),
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  infoItem: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: scaleHeight(10),
  },
  infoIcon: {
    marginRight: scaleWidth(10),
  },
  infoText: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(14),
    color: "#333333",
    flex: 1,
  },
  section: {
    backgroundColor: "#FFFFFF",
    borderRadius: scaleWidth(10),
    margin: scaleWidth(20),
    marginTop: 0,
    padding: scaleWidth(20),
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  sectionHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: scaleHeight(10),
  },
  sectionTitle: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(18),
    color: "#333333",
  },
  viewAllText: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(14),
    color: "#4CAF50",
  },
  orderItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingVertical: scaleHeight(10),
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  orderInfo: {
    flex: 1,
  },
  orderRestaurant: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(14),
    color: "#333333",
  },
  orderDate: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(12),
    color: "#757575",
  },
  orderTotal: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(14),
    color: "#4CAF50",
  },
  settingItem: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: scaleHeight(12),
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  settingIcon: {
    marginRight: scaleWidth(15),
  },
  settingText: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(16),
    color: "#333333",
    flex: 1,
  },
  logoutButton: {
    backgroundColor: "#FF6B6B",
    borderRadius: scaleWidth(10),
    margin: scaleWidth(20),
    marginTop: 0,
    padding: scaleHeight(15),
    alignItems: "center",
  },
  logoutText: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(16),
    color: "#FFFFFF",
  },
})

export default ProfileContent



================================================
File: screens/tabScreens/Scanner.tsx
================================================
import { CameraView, CameraType, useCameraPermissions } from 'expo-camera';
import { useState, useCallback } from 'react';
import { useFocusEffect } from '@react-navigation/native';
import { Button, StyleSheet, Text, TouchableOpacity, View, Dimensions, Image } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaView } from 'react-native-safe-area-context';
import TopText from '../../components/scanner/TopText';
const { width, height } = Dimensions.get('window');

export default function Scanner({ navigation }) {
  const [facing, setFacing] = useState<CameraType>('back');
  const [permission, requestPermission] = useCameraPermissions();
  const [scanned, setscanned] = useState(false)

  useFocusEffect(
    useCallback(() => {
      console.log('Screen is focused');
      setscanned(false)

      return () => {
        console.log('Screen is unfocused');
        setscanned(true)
      };
    }, [])
  );

  if (!permission) {
    return <View />;
  }

  if (!permission.granted) {
    return (

      <SafeAreaView style={{ flex: 1 }}>
        <StatusBar hidden={false} backgroundColor='black' style='light' />
        <View style={styles.container}>
          <Text style={styles.message}>We need your permission to show the camera</Text>
          <Button onPress={requestPermission} title="grant permission" />
        </View>
          </SafeAreaView >

        );
  }

        function handleScannedAgain() {
          setscanned(false);
  }

  const handleScanned = (data: any) => {
          setTimeout(() => {
            navigation.navigate('FoodList')
            console.log('Navigation Success')
            setscanned(true);
          }, 3000);


  }


        return (

        <SafeAreaView style={{ flex: 1 }}>
          <View style={styles.container}>
            {!scanned && (
              <CameraView
                style={styles.camera}
                facing={facing}
                onBarcodeScanned={scanned ? undefined : handleScanned}
              >
                <View style={styles.overlayContainer}>
                  <TopText />
                  <View style={styles.overlay} />
                  <View style={styles.buttonContainer}>
                    <TouchableOpacity style={styles.button} onPress={handleScannedAgain}>
                      <Text style={styles.text}>Scan Again</Text>
                    </TouchableOpacity>
                  </View>

                </View>
              </CameraView>
            )}

          </View>
        </SafeAreaView>
        );
}

        const styles = StyleSheet.create({
          container: {
          flex: 1,
  },
        message: {
          textAlign: 'center',
        paddingBottom: 10,
  },
        camera: {
          flex: 1,
        justifyContent: 'center',
        alignItems: 'center'
  },
        buttonContainer: {
          flex: 1,
        flexDirection: 'row',
        backgroundColor: 'transparent',
        margin: 64,
  },
        button: {
          flex: 1,
        alignSelf: 'flex-end',
        alignItems: 'center',
  },
        text: {
          fontSize: 24,
        fontWeight: 'bold',
        color: 'white',
  },
        overlayContainer: {
          flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        height: height,
  },
        overlay: {
          width: width * 0.8,
        height: width * 0.8,
        borderWidth: 2,
        borderColor: 'white',
        borderRadius: 10,
        backgroundColor: 'transparent',
  },

});


================================================
File: screens/tabScreens/TabBars.tsx
================================================

import React, { useCallback, useContext } from 'react'
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import MaterialIcon from 'react-native-vector-icons/MaterialIcons';
import Entypo from 'react-native-vector-icons/Entypo';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import Ant from 'react-native-vector-icons/AntDesign';
import Ionicons from 'react-native-vector-icons/Ionicons';
import Home from '../tabScreens/Home'
import Favourite from '../tabScreens/Favourite';
import Scanner from './Scanner';
import Profile from '../tabScreens/Profile';
import Chat from '../tabScreens/Chat';
import { scaleHeight, scaleWidth } from '../../Scaling';
import Menu from '../../sellerScreen/Menu';
import AddFood from '../../sellerScreen/AddFood';
import Notifications from '../../sellerScreen/Notifications';
import { FA6Style } from 'react-native-vector-icons/FontAwesome6';
import { myContext } from '../../context/AppProvider';
import RestaurantNotification from '../../sellerScreen/RestaurantNotification';
import LoadingScreen from '../../components/viewScreens/LoadingScreen';
import SellerProfile from '../../sellerScreen/SellerProfile';
import { useFocusEffect } from '@react-navigation/native';
import { StatusBar } from 'react-native';


const Tab = createBottomTabNavigator();
const CustomerTabBars = () => {
  return (
    <Tab.Navigator
      initialRouteName='Home'
      screenOptions={({ route }) => ({
        headerShown: false,
        tabBarShowLabel: false,
        tabBarIcon: ({ focused, color, size }) => {
          let iconName;

          if (route.name === 'Home') {
            return (
              focused ? <Entypo name='home' size={scaleWidth(30)} color={color} /> : <Ant name='home' size={scaleWidth(30)} color={color} />
            );
          } else if (route.name === 'Favourite') {
            return <MaterialIcon name={focused ? "favorite" : 'favorite-border'} color={color} size={scaleWidth(30)} />;
          } else if (route.name === 'Scanner') {
            return <MaterialCommunityIcons name="qrcode-scan" color={color} size={scaleWidth(35)} />
          } else if (route.name === 'Chat') {
            return <Ionicons name={focused ? "chatbubbles-sharp" : "chatbubbles-outline"} color={color} size={scaleWidth(30)} />;
          } else if (route.name === 'Profile') {
            return <Entypo name="info" color={color} size={scaleWidth(30)} />;
          }
        },
        tabBarActiveTintColor: '#b6b6b6',
        tabBarInactiveTintColor: '#b6b6b6',
        tabBarStyle: {
          backgroundColor: '#ffffff',
          height: scaleHeight(60)
        }
      })}
    >
      <Tab.Screen
        name="Home"
        component={Home}
      />
      <Tab.Screen
        name="Favourite"
        component={Favourite}
      />
      <Tab.Screen
        name="Scanner"
        component={Scanner}
      />
      <Tab.Screen
        name="Chat"
        component={Chat}
      />
      <Tab.Screen
        name="Profile"
        component={Profile}
      />
    </Tab.Navigator>
  )
}

const SellerTabBars = () => {

  return (
    <Tab.Navigator
      initialRouteName='Menu'
      screenOptions={({ route }) => ({
        headerShown: false,
        tabBarShowLabel: false,
        tabBarIcon: ({ focused, color, size }) => {
          let iconName;

          if (route.name === 'Menu') {
            return <MaterialIcon name="menu-book" color={color} size={scaleWidth(35)} />

          } else if (route.name === 'AddFood') {
            return <MaterialCommunityIcons name={focused ? "plus-circle-multiple" : "plus-circle-multiple-outline"} color={color} size={scaleWidth(35)} />
          } else if (route.name === 'Chat') {
            return <Ionicons name={focused ? "chatbubbles-sharp" : "chatbubbles-outline"} color={color} size={scaleWidth(30)} />;

          } else if (route.name === 'Notifications') {
            return <Ionicons name={focused ? "notifications" : "notifications-outline"} color={color} size={scaleWidth(30)} />;
          
          } else if (route.name === 'SellerProfile') {
            return <Entypo name="info" color={color} size={scaleWidth(30)} />;
          }
        },
        tabBarActiveTintColor: '#dadada',
        tabBarInactiveTintColor: '#dadada',
        tabBarStyle: {
          backgroundColor: '#ffffff',
          height: scaleHeight(60)
        }
      })}
    >
      <Tab.Screen
        name="Menu"
        component={Menu}
      />
      <Tab.Screen
        name="AddFood"
        component={AddFood}
      />


      <Tab.Screen
        name="Chat"
        component={Chat}
      />
      <Tab.Screen
        name="Notifications"
        component={RestaurantNotification}
      />
      <Tab.Screen
        name="SellerProfile"
        component={SellerProfile}
      />
    </Tab.Navigator>
  )
}




const TabBars = () => {
  const { state } = useContext(myContext);

  return state.role === 'customer' ? <CustomerTabBars /> : <SellerTabBars />;
  // return true ? <CustomerTabBars /> : <SellerTabBars />;
};



export default TabBars



================================================
File: screens/viewScreens/AboutScreen.tsx
================================================
import React from 'react';
import { View, Text, ScrollView, StyleSheet, Image } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import TopBar from '../../components/viewScreens/TopBar';
import { StatusBar } from 'expo-status-bar';

const AboutScreen = ({navigation}) => {
  return (
    <SafeAreaView style={styles.container}>
          <StatusBar hidden={false} backgroundColor='#F0F4F8' style='dark'  />
          <TopBar navigation={navigation} top_title='About Us' withSettingIcons={undefined} handleSettingIcon={undefined}/>
      <ScrollView showsVerticalScrollIndicator={false} style={{marginTop:-12}} >
        <View style={styles.headerSection}>
          <Text style={styles.appName}>FadeFood</Text>
          <Text style={styles.tagline}>Your Smart Dining Companion</Text>
        </View>


        <View style={styles.contentSection}>
          <Text style={styles.sectionTitle}>About Us</Text>
          <Text style={styles.description}>
            Welcome to FadeFood, your ultimate restaurant discovery and dining experience app. 
            We're revolutionizing the way you dine out by making every step of your restaurant 
            visit smooth, efficient, and enjoyable.
          </Text>


          <Text style={styles.sectionTitle}>Key Features</Text>
          <View style={styles.featureContainer}>
            <View style={styles.featureItem}>
              <Text style={styles.featureTitle}>🍽️ Restaurant Discovery</Text>
              <Text style={styles.featureText}>
                Explore nearby restaurants and browse their current menu offerings in real-time.
              </Text>
            </View>

            <View style={styles.featureItem}>
              <Text style={styles.featureTitle}>⏰ Smart Pre-ordering</Text>
              <Text style={styles.featureText}>
                Pre-order your meals and have them ready at your preferred time - no waiting required!
              </Text>
            </View>

            <View style={styles.featureItem}>
              <Text style={styles.featureTitle}>💳 Contactless Experience</Text>
              <Text style={styles.featureText}>
                Complete your entire dining journey from ordering to payment without any physical contact.
              </Text>
            </View>
          </View>

          {/* How It Works Section */}
          <Text style={styles.sectionTitle}>How It Works</Text>
          <View style={styles.stepContainer}>
            <Text style={styles.step}>1. Browse restaurants and menus</Text>
            <Text style={styles.step}>2. Select your dishes and preferred dining time</Text>
            <Text style={styles.step}>3. Complete secure payment</Text>
            <Text style={styles.step}>4. Receive table assignment and timing</Text>
            <Text style={styles.step}>5. Arrive and enjoy your meal!</Text>
          </View>

    
          <View style={styles.developerSection}>
            <Text style={styles.sectionTitle}>Developer</Text>
            <Text style={styles.developerText}>
              Created as a Second Year BIT Project by Nishant
            </Text>
            <Text style={styles.contactText}>
              For feedback and suggestions, contact us at: fadefood@dineease.com
            </Text>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
  headerSection: {
    padding: 20,
    alignItems: 'center',
    backgroundColor: '#F0F4F8',

  },
  appName: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 8,
  },
  tagline: {
    fontSize: 16,
    color: '#7f8c8d',
    fontStyle: 'italic',
  },
  contentSection: {
    padding: 20,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginTop: 20,
    marginBottom: 15,
  },
  description: {
    fontSize: 16,
    lineHeight: 24,
    color: '#34495e',
    marginBottom: 20,
  },
  featureContainer: {
    marginBottom: 20,
  },
  featureItem: {
    marginBottom: 15,
    backgroundColor: '#f8f9fa',
    padding: 15,
    borderRadius: 10,
  },
  featureTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 8,
  },
  featureText: {
    fontSize: 16,
    color: '#34495e',
    lineHeight: 22,
  },
  stepContainer: {
    marginBottom: 20,
  },
  step: {
    fontSize: 16,
    color: '#34495e',
    marginBottom: 10,
    paddingLeft: 15,
  },
  developerSection: {
    marginTop: 30,
    paddingTop: 20,
    borderTopWidth: 1,
    borderTopColor: '#ecf0f1',
  },
  developerText: {
    fontSize: 16,
    color: '#34495e',
    marginBottom: 10,
  },
  contactText: {
    fontSize: 14,
    color: '#7f8c8d',
  },
});

export default AboutScreen;

================================================
File: screens/viewScreens/AccountSwitch.tsx
================================================
import React, { useContext } from 'react';
import { View, StyleSheet, Alert } from 'react-native';
import TopBar from '../../components/viewScreens/TopBar';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { styles } from '../../style/style';
import SettingMenu from '../../components/profile/SettingMenu';
import UserInfo from '../../components/profile/UserInfo';
import Name_Phone from '../../components/profile/Name_Phone';
import { myContext } from '../../context/AppProvider';
import LoadingScreen from '../../components/viewScreens/LoadingScreen';


const AccountSwitch = ({ navigation }) => {

    const handleEditProfileAccount = (screen_name) => {
        navigation.navigate(screen_name)
    }

    return (


        <SafeAreaView >
            <StatusBar hidden={false} backgroundColor='#F0F4F8' style='dark' />
            <TopBar navigation={navigation} top_title='Profile' withSettingIcons={undefined} handleSettingIcon={undefined}/>
            <View style={styles.home_screen}>

                    <SettingMenu
                        menuName={'Edit Profile'}
                        iconName={'pencil'}
                        handleSettingPage={() => handleEditProfileAccount('ProfileUpdation')}
                    />
                    <SettingMenu
                        menuName={'Switch To Bussiness Account'}
                        iconName={'business'}
                        handleSettingPage={() => handleEditProfileAccount('RegistrationScreen')}

                    />




            </View>
        </SafeAreaView>

    );
};

const styles1 = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
    },


});

export default AccountSwitch;

================================================
File: screens/viewScreens/AuthPrompt.tsx
================================================
"use client"

import { useEffect, useRef } from "react"
import { View, Text, StyleSheet, TouchableOpacity, Animated, Easing, Dimensions, Keyboard } from "react-native"
import { LinearGradient } from "expo-linear-gradient"
import { scaleWidth, scaleHeight } from "../../Scaling"
import { AntDesign } from "@expo/vector-icons"
import { SafeAreaView } from "react-native-safe-area-context"

const { width, height } = Dimensions.get("window")

const AuthPrompt = ({ navigation }) => {
  const fadeAnim = useRef(new Animated.Value(0)).current
  const slideAnim = useRef(new Animated.Value(50)).current

  useEffect(() => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 1000,
        useNativeDriver: true,
        easing: Easing.out(Easing.exp),
      }),
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 1000,
        useNativeDriver: true,
        easing: Easing.out(Easing.exp),
      }),
    ]).start()
  }, [fadeAnim, slideAnim])

  const handleLogin = () => {
    navigation.navigate("LoginScreens")
  }
  const handleBackButton = () => {
    Keyboard.dismiss();
    navigation.goBack();
  }

  return (
    <SafeAreaView style={{ flex: 1 }}>

      <LinearGradient colors={["#FFFFFF", "#F0F4F8"]} style={styles.container}>
        <TouchableOpacity onPress={handleBackButton} style={{ position: 'absolute', top: scaleHeight(20), left: scaleWidth(20), zIndex: 999 }}>
          <AntDesign
            name='arrowleft'
            size={scaleWidth(30)}
            style={{ color: '#333333' }}
          />
        </TouchableOpacity>

        <Animated.View
          style={[
            styles.content,
            {
              opacity: fadeAnim,
              transform: [{ translateY: slideAnim }],
            },
          ]}
        >
          <IntroText
            headingText="Hi Foodie,"
            line1="Sign in to feast on your"
            line2="fadefood delights"
            style={styles.bigTextForLogin}
          />

          <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>
            <Text style={styles.loginButtonText}>Sign In</Text>
          </TouchableOpacity>
        </Animated.View>
      </LinearGradient>

    </SafeAreaView>
  )
}

const IntroText = ({ headingText, line1, line2, style }) => (
  <View style={style}>
    <Text style={styles.heading}>{headingText}</Text>
    <Text style={styles.line}>{line1}</Text>
    <Text style={styles.line}>{line2}</Text>
  </View>
)

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  content: {
    width: width * 0.9,
    alignItems: "center",
  },
  bigTextForLogin: {
    marginBottom: scaleHeight(40),
  },
  heading: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(32),
    color: "#333333",
    marginBottom: scaleHeight(16),
    textAlign: "center",
  },
  line: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(18),
    color: "#4A4A4A",
    textAlign: "center",
    lineHeight: scaleHeight(28),
  },
  loginButton: {
    backgroundColor: "#4CAF50",
    borderRadius: scaleWidth(30),
    paddingVertical: scaleHeight(16),
    paddingHorizontal: scaleWidth(60),
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  loginButtonText: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(18),
    color: "#FFFFFF",
    textAlign: "center",
  },
})

export default AuthPrompt



================================================
File: screens/viewScreens/CustomSnackbar.tsx
================================================
// components/CustomSnackbar.js
import React, { useEffect, useRef, useState } from 'react';
import { Animated, StyleSheet, Text, View } from 'react-native';

const CustomSnackbar = ({ message, visible=true }) => {
  const [isVisible, setIsVisible] = useState(visible);
  const opacity = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    if (visible) {
      Animated.timing(opacity, {
        toValue: 1,
        duration: 300, // Fade in duration
        useNativeDriver: true,
      }).start();
    } else {
      Animated.timing(opacity, {
        toValue: 0,
        duration: 300, // Fade out duration
        useNativeDriver: true,
      }).start();
    }
  }, [visible]);

  if (!isVisible) return null;

  return (
    <Animated.View style={[styles.container]}>
      <Text style={styles.message}>{message}</Text>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  container: {
    position: 'absolute',
    bottom: 80,
    left: 20,
    right: 20,
    backgroundColor: '#323232',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    zIndex: 999,
    opacity: 1,
  },
  message: {
    color: '#fff',
    fontSize: 14,
  },
});

export default CustomSnackbar;


================================================
File: screens/viewScreens/FoodList.tsx
================================================
import { Text, View } from 'react-native'
import React from 'react'
import { SafeAreaView } from 'react-native-safe-area-context'
import { StatusBar } from 'expo-status-bar'
import { styles } from '../../style/style'
import { ScrollView } from 'react-native-gesture-handler'
import Button from '../../components/auth/Button'
import List from '../../components/viewScreens/List'
import TopBar from '../../components/viewScreens/TopBar'
import chatpate from '../../assets/chatapate.jpeg'


const FoodList = ({ navigation }) => {
    return (
        <SafeAreaView style={{ flex: 1 }}>
            <StatusBar hidden={false} backgroundColor='#dc2f02' style='light' />
            <View style={[styles.home_screen, { alignItems: 'center', backgroundColor: '#F0F0F0' }]}>
                <TopBar navigation={navigation} top_title='My List' withSettingIcons={undefined} handleSettingIcon={undefined}/>
                <View style={{ height: '52%', width: '100%', paddingVertical: 10 }}>
                    <ScrollView showsVerticalScrollIndicator={false} >
                        <View style={{ flexDirection: 'column', justifyContent: 'center', alignItems: 'center', gap: 10 }}>
                            <List
                                price='50'
                                foodName='Chatpaate'
                                restaurantName='Delicious Restaurant'
                                image={chatpate}
                                isLoveNeeded={false}
                                navigation={navigation}
                            />
                        
                            <List
                                price='50'
                                foodName='Chatpaate'
                                restaurantName='Delicious Restaurant'
                                image={chatpate}
                                isLoveNeeded={false}
                                navigation={navigation}
                            />
                        
                            <List
                                price='50'
                                foodName='Chatpaate'
                                restaurantName='Delicious Restaurant'
                                image={chatpate}
                                isLoveNeeded={false}
                                navigation={navigation}
                            />
                        
                            <List
                                price='50'
                                foodName='Chatpaate'
                                restaurantName='Delicious Restaurant'
                                image={chatpate}
                                isLoveNeeded={false}
                                navigation={navigation}
                            />
                        
                          
                        </View>
                    </ScrollView>
                </View>
                <View style={{ height: '30%', width: '95%', backgroundColor: '#ffffff', borderRadius: 20, flexDirection: 'column', alignItems: 'center' }}>
                    <ScrollView showsVerticalScrollIndicator={false} style={{ width: '100%' }}>
                        <View style={{ width: '100%', alignItems: 'center', paddingVertical: 10 }}>
                            <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', width: '90%' }}>
                                <Text style={{ color: 'grey', fontSize: 18, fontFamily: 'inter_semibold' }}>Chatapate x3</Text>
                                <Text style={{ color: 'grey', fontSize: 18, fontFamily: 'inter_semibold' }}>150.00</Text>
                            </View>
                            <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', width: '90%' }}>
                                <Text style={{ color: 'grey', fontSize: 18, fontFamily: 'inter_semibold' }}>Chatapate</Text>
                                <Text style={{ color: 'grey', fontSize: 18, fontFamily: 'inter_semibold' }}>50.00</Text>
                            </View>
                            <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', width: '90%' }}>
                                <Text style={{ color: 'grey', fontSize: 18, fontFamily: 'inter_semibold' }}>Chatapate</Text>
                                <Text style={{ color: 'grey', fontSize: 18, fontFamily: 'inter_semibold' }}>50.00</Text>
                            </View>



                        </View>
                    </ScrollView>
                    <Text style={{ height: '5%', color: 'grey' }}>-------------------------------------------------------------</Text>
                    <View style={{ width: '95%', height: '25%', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', paddingHorizontal: 10 }}>
                        <Text style={{ color: 'grey', fontSize: 30, fontFamily: 'inter_semibold' }}>Total</Text>
                        <Text style={{ color: 'grey', fontSize: 18, fontFamily: 'inter_semibold' }}>Rs. 250.00</Text>
                    </View>
 
                </View>
                <Button
                    btnText={'Checkout'}
                    style={[styles.loginButton, { backgroundColor: '#4CAF50', width: '95%', marginTop: 10 }]}
                    handleAuthBtn={() => { navigation.navigate('FoodList') }}
                />

            </View>
        </SafeAreaView>
    )
}
export default FoodList



================================================
File: screens/viewScreens/Inbox.tsx
================================================
import { View, Text, Dimensions, FlatList, TextInput, KeyboardAvoidingView, Platform, ScrollView, StyleSheet, TouchableOpacity } from 'react-native'
import React, { useState } from 'react'
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import TopBar from '../../components/viewScreens/TopBar';
import MsgBox from '../../components/chat/MsgBox';
import FontAws from 'react-native-vector-icons/FontAwesome';
import { scaleHeight, scaleWidth } from '../../Scaling';

const { width, height } = Dimensions.get('window')

const Inbox = ({ navigation }) => {
    // Mock chat data with sender and receiver info
    const [messages, setMessages] = useState([
        {id: '3', text: 'mee too ?', sender: false},
        {id: '2', text: 'I am fine, whats about you ?', sender: true},
        { id: '1', text: 'Hey, how are you ?', sender: false },

    ]);


    const [inputMessage, setInputMessage] = useState('');

    const handleMessageSend = () => {
        if (inputMessage.trim().length > 0) {
            const newMessage = {
                id: (messages.length + 1).toString(),
                text: inputMessage,
                sender: messages.length%2? true:false,
            }
            setMessages([newMessage,...messages]);
            setInputMessage('');
        }
    }


        // Rendering each chat message
        const renderItem = ({ item }) => (<MsgBox item={item} />);

        return (
            <SafeAreaView style={{ flex: 1 }}>
                <StatusBar hidden={false} backgroundColor='#F0F4F8' style='dark'  />
                <TopBar navigation={navigation} top_title='Inbox' withSettingIcons={undefined} handleSettingIcon={undefined} />
                <KeyboardAvoidingView
                    style={{ flex: 1, justifyContent: 'flex-end',paddingTop:scaleHeight(60) }}
                    behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
                >
                    <View >
                        <FlatList
                            data={messages}
                            renderItem={renderItem}
                            keyExtractor={(item) => item.id}
                            showsVerticalScrollIndicator={false}
                            inverted 
                            contentContainerStyle={{ paddingBottom: scaleHeight(20), paddingHorizontal: scaleWidth(10) }}
                        />
                    </View>



                    <View style={styles.input_send}>
                        <View style={{ width: '80%', maxHeight: scaleHeight(100), backgroundColor: 'white', borderRadius: scaleWidth(10), borderColor: '#e0e0e0', borderWidth: scaleWidth(1), padding: scaleWidth(5) }}>
                            <ScrollView>
                                <TextInput
                                    style={{
                                        backgroundColor: 'white',
                                        fontSize: scaleWidth(18),
                                        color: 'black',
                                        paddingHorizontal: scaleHeight(10),
                                        maxHeight: scaleHeight(100),
                                        lineHeight: scaleHeight(22),
                                        marginTop: scaleHeight(5),
                                    }}
                                    value={inputMessage}
                                    onChangeText={(text) => setInputMessage(text)}
                                    selectionColor="grey"
                                    multiline
                                    scrollEnabled
                                    placeholder="Your message"
                                />
                            </ScrollView>
                        </View>
                        <TouchableOpacity style={{ height: scaleHeight(50), width: '15%', backgroundColor: '#333333', borderRadius: scaleWidth(10), justifyContent: 'center', alignItems: 'center' }} onPress={handleMessageSend} >
                            <FontAws name='send' style={{ color: '#ffffff' }} size={scaleWidth(24)} />
                        </TouchableOpacity>
                    </View>

                </KeyboardAvoidingView>
            </SafeAreaView>
        );
    };

    export default Inbox;

    const styles = StyleSheet.create({
        msg_input: {
            justifyContent: 'flex-start',
            flex: 1,
            backgroundColor: '#F5F5F5',
            borderTopRightRadius: scaleHeight(15),
            borderTopLeftRadius: scaleHeight(15),
        },
        input_send: {
            width: '100%',
            flexDirection: 'row',
            gap: scaleWidth(5),
            justifyContent: 'center',
            alignItems: 'flex-end',
            padding: scaleWidth(10),

        }

    });



================================================
File: screens/viewScreens/PirvacyAndSecurity.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React, { useState } from 'react'
import { SafeAreaView } from 'react-native-safe-area-context'
import { StatusBar } from 'expo-status-bar'
import TopBar from '../../components/viewScreens/TopBar'
import { styles } from '../../style/style'
import UserInfo from '../../components/profile/UserInfo'
import { scaleHeight, scaleWidth } from '../../Scaling'
import EditProfileButton from '../../components/profile/EditProfileButton'
import TextEditFields from '../../components/profile/TextEditFields'
import { TouchableWithoutFeedback } from 'react-native-gesture-handler'


const PrivacyAndSecurity = ({ navigation }) => {
    const [inputOldPassValue, setInputNameValue] = useState('')
    const [inputNewPassValue, setInputPhoneValue] = useState('')


    const handleOldPassInputChange = (text) => {
        setInputNameValue(text)
    }
    const handleNewPassInputChange = (text) => {
        setInputPhoneValue(text)
    }

    return (
        <SafeAreaView >
            <StatusBar hidden={false} backgroundColor='#F0F4F8' style='dark' />
            <TopBar navigation={navigation} top_title='Privacy and Security' withSettingIcons={undefined} handleSettingIcon={undefined}/>
            <View style={[styles.home_screen, { alignItems: 'flex-start', paddingLeft: scaleWidth(40) }]}>

                <TextEditFields
                    label_name={'Your Password'}
                    inputmode={'text'}
                    key_type={'default'}
                    given_value={inputOldPassValue}
                    handleInputChange={handleOldPassInputChange}
                />
                <TextEditFields
                    label_name={'New Password'}
                    inputmode={'text'}
                    key_type={'default'}
                    given_value={inputNewPassValue}
                    handleInputChange={handleNewPassInputChange}
                />

                <TouchableWithoutFeedback onPress={() => navigation.navigate('ForgetPassword')}>
                    <Text style={{ color: '#757575', marginLeft: 'auto', paddingRight: '10%', marginTop: scaleHeight(20), fontFamily: 'poppins_regular', fontSize: scaleWidth(12) }}>Forget Password?</Text>
                </TouchableWithoutFeedback>
            </View>

        </SafeAreaView>
    )
}

export default PrivacyAndSecurity

const ownstyle = StyleSheet.create({
    image_container: {
        flexDirection: 'row',
        gap: scaleWidth(10),
        alignItems: 'center',
        marginTop: scaleWidth(10)
    },
    button_container: {
        flexDirection: 'column',
        gap: scaleWidth(5),
    }
})

================================================
File: screens/viewScreens/ProfileUpdation.tsx
================================================
import { StyleSheet, Text, View, Alert,Keyboard } from 'react-native'
import React, { useContext,useState } from 'react'
import { SafeAreaView } from 'react-native-safe-area-context'
import { StatusBar } from 'expo-status-bar'
import TopBar from '../../components/viewScreens/TopBar'
import { styles } from '../../style/style'
import UserInfo from '../../components/profile/UserInfo'
import { scaleWidth } from '../../Scaling'
import EditProfileButton from '../../components/profile/EditProfileButton'
import TextEditFields from '../../components/profile/TextEditFields'
import * as ImagePicker from 'expo-image-picker';
import { delete_data, post_data_with_img } from '../../service'
import { myContext } from '../../context/AppProvider'
import LoadingScreen from '../../components/viewScreens/LoadingScreen'
import SnackBar from './SnackBar'



const ProfileUpdation = ({ navigation }) => {
  const { state, userData, dispatch, isLoading, setisLoading,snackBar,setsnackBar } = useContext(myContext);




  const pickImage = async () => {
    Keyboard.dismiss()
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });
    if (!result.canceled) {
      const selectedImage = result.assets[0].uri;
      console.log(selectedImage);
      // setprofile_picture(selectedImage);
    }
  };


  const handleDeletePicture = () => {
    Keyboard.dismiss()
    if (state.profile_picture == null) {
      return;
    }
    Alert.alert(
      'Delete Picture',
      'Are you sure you want to delete your picture?',
      [
        {
          text: 'Cancel',
          style: 'cancel',
        },
        {
          text: 'Delete',
          onPress: async () => {
            setisLoading(true)
            const response = await delete_data('user_details');
            // setprofile_picture(null)
            setisLoading(false)
            setsnackBar(true)
            dispatch({type:'snackmessage',payload:response.data})
            setTimeout(() => setsnackBar(false), 3000);

          },
        },
      ],
      { cancelable: false }
    );
  };

  const handleSave = async () => {
    Keyboard.dismiss()
    setisLoading(true)
    const method = state.name ? 'put' : 'post';
    console.log('Data is being ', method);
    const response = await post_data_with_img('edit_user_details', {name:state.name,phone:state.phone,email:state.email}, state.profile_picture, method);
    if (response.success) {
      setisLoading(false)
      setsnackBar(true)
      dispatch({type:'snackmessage',payload:response.data})
      setTimeout(() => setsnackBar(false), 3000);
    
    } else {
      setisLoading(false)
      Alert.alert('Error', response.data);
    }
  };

  return (
    <>
      {
        isLoading && (
          <LoadingScreen />
        )
      }

      <SafeAreaView >
        <StatusBar hidden={false} backgroundColor='#F0F4F8' style='dark' />
        <TopBar navigation={navigation} top_title='Edit Profile' withSettingIcons={undefined} handleSettingIcon={undefined}/>
        <View style={[styles.home_screen, { alignItems: 'flex-start', paddingLeft: scaleWidth(40) }]}>


          <View style={ownstyle.image_container}>
            <UserInfo photo={state.profile_picture}></UserInfo>
            <View style={ownstyle.button_container}>
              <EditProfileButton button_name={'Change Picture'} handleButton={pickImage} />
              <EditProfileButton button_name={'Delete Picture'} handleButton={handleDeletePicture} />
              <EditProfileButton button_name={'Save'} handleButton={handleSave} />
            </View>
          </View>

          <TextEditFields
            label_name={'Name'}
            inputmode={'text'}
            key_type={'default'}
            given_value={state.name}
            handleInputChange={(text) => dispatch({ type: 'name', payload: text })}
          />
          <TextEditFields
            label_name={'Phone'}
            inputmode={null}
            key_type={'number-pad'}
            given_value={state.phone}
            handleInputChange={(num) => dispatch({ type: 'phone', payload: num })}
          />
          <TextEditFields
            label_name={'Email'}
            inputmode={null}
            key_type={'email-address'}
            given_value={state.email}
            handleInputChange={(text) => dispatch({ type: 'email', payload: text })}
          />
        </View>
        <SnackBar message={state.snackmessage} visible={snackBar}/>
      </SafeAreaView>
    </>
  )
}

export default ProfileUpdation

const ownstyle = StyleSheet.create({
  image_container: {
    flexDirection: 'row',
    gap: scaleWidth(10),
    alignItems: 'center',
    marginTop: scaleWidth(10)
  },
  button_container: {
    flexDirection: 'column',
    gap: scaleWidth(5),
  }
})

================================================
File: screens/viewScreens/RestaurantProfile.tsx
================================================
import { StyleSheet, Text, View, Image, TouchableOpacity, Linking, Platform } from 'react-native';
import React, { useContext, useEffect } from 'react';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { ScrollView } from 'react-native-gesture-handler';
import { AntDesign, Ionicons, MaterialIcons, FontAwesome } from '@expo/vector-icons';
import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';
import ProfileHeader from '../../components/restaurant_profile/ProfileHeader';
import { LooksScreen } from '../../components/restaurant_profile/Looks';
import { DrinksScreen } from '../../components/restaurant_profile/DrinkSection';
import { MenuItemsScreen } from '../../components/restaurant_profile/MenuSection';
import { myContext } from '../../context/AppProvider';
import { get_data_with_id } from '../../service';
import { useFocusEffect } from '@react-navigation/native';
import { getRestaurantInformation } from '../../apis/getRestaurantInformation';

const Tab = createMaterialTopTabNavigator();




const RestaurantProfile = ({ navigation,route }) => {
  const { isLoading, setisLoading, snackBar, setsnackBar, initialseller_state, dispatch, state, seller_state, seller_dispatch, food_state, food_dispatch } = useContext(myContext);
  const { restaurant_id } = route.params;


  // export const getRestaurantInformation = async (seller_dispatch,id,initialseller_state)
  const fetchRestaurantDetails = async () => {

      await getRestaurantInformation(seller_dispatch,restaurant_id,initialseller_state)
      console.log('-----------restaurant_name by Restaurant Profile>>---------------------------', restaurant_id);
  };

  useEffect(() => {
    // Fetch and set restaurant info

    fetchRestaurantDetails();
    return () => {
      // Clear data when screen is unfocused
      seller_dispatch({ type: "CLEAR" });
      console.log("Restaurant Profile Unfocused");
    };
  }, [])



  const handleGoBack = () => navigation.goBack();
  const foodItems1 = [
    {
      id: 1,
      food_price: "$5.00",
      food_name: "ChatpatebyRestaurantProfile",
      restaurantName: "Food Corner",
      image: { undefined },
      isLoveNeeded: true,
    },
    {
      id: 2,
      food_price: "$5.00",
      food_name: "ChatpatebyRestaurantProfile",
      restaurantName: "Food Corner",
      image: { undefined },
      isLoveNeeded: true,
    }]

  const MenuItemsWrapper = () => {
    return <MenuItemsScreen foodItems={foodItems1} navigation={navigation} handlePressonList={undefined} />;
  };

  const openMaps = () => {
    const latitude = "26.8217";
    const longitude = "87.2863";
    const label = "Delicious Restaurant";

    const scheme = Platform.select({ ios: 'maps:0,0?q=', android: 'geo:0,0?q=' });
    const latLng = `${latitude},${longitude}`;
    const url = Platform.select({
      ios: `${scheme}${label}@${latLng}`,
      android: `${scheme}${latLng}(${label})`
    });

    Linking.openURL(url);
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar hidden={false} backgroundColor='#F0F4F8' style='dark' />

      <ProfileHeader
        openMaps={openMaps}
        restaurantName={seller_state.name}
        openingHour={seller_state.opening_hour}
        rating={seller_state.rating}
        cityName={seller_state.city}
        streetAddress={seller_state.street_address}
        activeStatus={seller_state.is_active}
        handleGoBack={handleGoBack}
        logo={false}
        businessType={seller_state.business_type}
      />


      <Tab.Navigator
        style={styles.tabNavigator}
        screenOptions={{
          tabBarStyle: styles.tabBar,
          tabBarIndicatorStyle: styles.tabIndicator,
          tabBarLabelStyle: styles.tabLabel,
          tabBarActiveTintColor: '#333333',
          tabBarInactiveTintColor: '#666',
        }}
      >
        <Tab.Screen name="Menu Items" component={MenuItemsWrapper} />
        <Tab.Screen name="Drinks" component={DrinksScreen} />
        <Tab.Screen name="Looks" component={LooksScreen} />
      </Tab.Navigator>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  tabNavigator: {
    flex: 1,
  },
  tabBar: {
    backgroundColor: '#F0F4F8',
    elevation: 0,
    shadowOpacity: 0,
    borderBottomWidth: 1,
    borderBottomColor: '#F0F0F0',
  },
  tabIndicator: {
    backgroundColor: '#333333',
    height: 3,
  },
  tabLabel: {
    fontFamily: 'poppins_semibold',
    textTransform: 'none',
  },
});

export default RestaurantProfile;

================================================
File: screens/viewScreens/SearchScreen.tsx
================================================
import { StyleSheet, Text, View,TextInput } from 'react-native'
import React,{useEffect,useRef} from 'react'
import { SafeAreaView } from 'react-native-safe-area-context'
import { StatusBar } from 'expo-status-bar'
import NavBar from '../../components/home/NavBar'
import { styles } from '../../style/style'
import RecentSearchBar from '../../components/viewScreens/RecentSearchBar'
import { scaleWidth } from '../../Scaling'

const SearchScreen = ({ navigation }) => {



    
    return (
        <SafeAreaView>
            <StatusBar hidden={false} backgroundColor='#F0F4F8' style='dark' />
            <View style={styles.home_screen}>
                <NavBar   handleSearchScreen={undefined} isTextInput={true} isBack={true} navigation={navigation}></NavBar>
                <View style={{paddingHorizontal:scaleWidth(8)}}>
                    <Text style={{ fontFamily: 'poppins_bold', fontSize: 18 }}>Your Recent Searches</Text>
                    <View style={{flexDirection:'row',flexWrap:'wrap',width:'100%',height:100,justifyContent:'flex-start',gap:10}}>
                       <RecentSearchBar search_pharse={'Jhol momo'}/>
                       <RecentSearchBar search_pharse={'Chicken Curry'}/>
                       <RecentSearchBar search_pharse={'Chatepate with different spices'}/>
                       <RecentSearchBar search_pharse={'Sprite and fanta pack'}/>
                       <RecentSearchBar search_pharse={'Keema Noodles'}/>
                       <RecentSearchBar search_pharse={'Jhol momo'}/>
                       <RecentSearchBar search_pharse={'Jhol momo'}/> 
                    </View>
                </View>

            </View>
        </SafeAreaView>
    )
}

export default SearchScreen

================================================
File: screens/viewScreens/SkeletonPaper.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import { scaleHeight } from '../../Scaling'
import { LinearGradient } from 'expo-linear-gradient'
import { Skeleton } from '@rneui/themed'
import { styles } from '../../style/style'

const SkeletonPaper = ({SkeletonHeight,SkeletonWidth,style}) => {
  return (
    <Skeleton
    LinearGradientComponent={LinearGradient}
    animation="wave"
    width={SkeletonWidth}
    height={SkeletonHeight}
    style={style}
  />
  )
}

export default SkeletonPaper

const SkeletonCircle = ({SkeletonHeight,SkeletonWidth,style}) => {
  return (
    <Skeleton 
    LinearGradientComponent={LinearGradient}
    animation="wave"
    circle width={SkeletonWidth} 
    height={SkeletonHeight} 
    style={style}
    />
  )
}

export {SkeletonCircle}



================================================
File: screens/viewScreens/SnackBar.tsx
================================================
import React, { useEffect, useState } from 'react';
import { View, Text, Animated, TouchableOpacity, StyleSheet } from 'react-native';
import { scaleHeight, scaleWidth } from '../../Scaling';

const SnackBar = ({ message, visible }) => {
  const [slideAnim] = useState(new Animated.Value(50)); // Initial slide position

  useEffect(() => {
    if (visible) {
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 300,
        useNativeDriver: true,
      }).start();

      // Auto-dismiss after 3 seconds
      const timer = setTimeout(() => {
        handleClose();
      }, 3000);

      return () => clearTimeout(timer);
    }
  }, [visible]);

  const handleClose = () => {
    Animated.timing(slideAnim, {
      toValue: 100,
      duration: 300,
      useNativeDriver: true,
    }).start();
  };

  if (!visible) return null;

  return (
    <Animated.View style={[styles.snackbar, { transform: [{ translateY: slideAnim }] }]}>
      <Text style={styles.snackbarText}>{message}</Text>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  snackbar: {
    position: 'absolute',
    bottom: scaleHeight(65),
    left: scaleWidth(20),
    right: scaleWidth(20),
    paddingHorizontal: scaleHeight(10),
    paddingVertical: scaleHeight(10),
    backgroundColor: '#80ed99',
    borderRadius: scaleWidth(10),
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  snackbarText: {
    color: '#333333',
    fontSize: scaleWidth(14),
    fontFamily: 'jakarta_bold',
  },
  closeText: {
    color: '#FFEB3B',
    fontWeight: 'bold',
  },
});

export default SnackBar;


================================================
File: screens/viewScreens/ViewFood.tsx
================================================
import React, { useState, useContext, useRef, useEffect, useReducer, useMemo } from "react";
import {
  StyleSheet,
  View,
  Text,
  Animated,
  Dimensions,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { StatusBar } from "expo-status-bar";
import { ScrollView } from "react-native-gesture-handler";
import NabBar from "../../components/home/NavBar";
import FoodCard from "../../components/home/FoodCard";
import BigImage from "../../components/viewScreens/BigImage";
import ItemName from "../../components/viewScreens/ItemName";
import { styles } from "../../style/style";
import { scaleHeight, scaleWidth } from "../../Scaling";
import Price from "../../components/viewScreens/Price";
import { TouchableOpacity } from "react-native-gesture-handler";
import SnackBar from "./SnackBar";
import { myContext } from "../../context/AppProvider";
import { get_data, get_data_with_id } from "../../service";
import { getRestaurantInformation } from "../../apis/getRestaurantInformation";

const { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get("window");

const initial_food_details = {
  food_name: "",
  food_price: "",
  images: [],
  food_restaurant: "",
  food_location: "",
  rating: 0,
  is_available: false,
  reviews: 0,
  restaurant_name: null,
}
const food_details_reducer = (state, action) => {
  switch (action.type) {
    case 'SET_FOOD_DETAILS':
      return {
        ...state,
        restaurant_name: action.payload.restaurant_name,
        food_name: action.payload.food_name,
        food_price: action.payload.food_price,
        images: action.payload.images,
        food_restaurant: action.payload.food_restaurant,
        food_location: action.payload.food_location,
        rating: action.payload.rating,
        is_available: action.payload.is_available,
        reviews: action.payload.reviews,
      }
    default:
      return state;
  }
}
const ViewFood = ({ navigation, route }) => {

  const { snackBar, state, dispatch, setsnackBar, seller_dispatch, initialseller_state,getting_restaurant_details } = useContext(myContext);
  const [isFavorite, setIsFavorite] = useState(false);
  const [food_details_state, food_details_dispatch] = useReducer(food_details_reducer, initial_food_details);


  

  // }
  useEffect(() => {
    food_details_dispatch({ type: 'SET_FOOD_DETAILS', payload: route.params.food_details });
  console.log("routted---->",route.params.food_details)
    // fetching()

  }, [route.params.food_details])

  const scaleAnim = useRef(new Animated.Value(1)).current;

  // const [onCheckout, setonCheckout] = useState(false);
  const handleSearchScreen = () => {
    navigation.navigate("SearchScreen");
  };
  const handlePreorderButton = () => {
    console.log("Checkout Button Pressed");
  };
  const handleAddtoList = () => {
    // setonCheckout(true);
  };
  const handleToRestaurantProfile = () => {
    navigation.navigate('RestaurantProfile',{restaurant_id:food_details_state.restaurant_name});
    // navigation.navigate('RestaurantProfile');
    // console.log('Restaurant ID----->',route.params.food_details.restaurant_name);
  }




  const toggleFavorite = () => {
    Animated.sequence([
      Animated.timing(scaleAnim, {
        toValue: 1.3,
        duration: 150,
        useNativeDriver: true,
      }),
      Animated.timing(scaleAnim, {
        toValue: 1,
        duration: 150,
        useNativeDriver: true,
      }),
    ]).start();


    setsnackBar(true)
    dispatch({ type: 'snackmessage', payload: 'Added to Favorites' })
    setTimeout(() => setsnackBar(false), 3000);



    setIsFavorite(!isFavorite);

    console.log("food_details_state",food_details_state)
  };
  return (
    <SafeAreaView style={{ flex: 1 }}>
      <StatusBar hidden={false} backgroundColor="#F0F4F8" style="dark" />
      <NabBar
        handleSearchScreen={handleSearchScreen}
        isBack={true}
        navigation={navigation}
        isTextInput={false}
      />

      <ScrollView
        style={{ flex: 1 }}
        nestedScrollEnabled={true}
        overScrollMode="never"
        scrollEventThrottle={20}
        showsVerticalScrollIndicator={false}
      >
        <View style={ownstyles.mainSection}>
          <BigImage toggleFavorite={toggleFavorite} scaleAnim={scaleAnim} isFavorite={isFavorite} images={food_details_state.images} />
          <View style={ownstyles.restaurantInfo}>
            <ItemName
              foodName={food_details_state.food_name}
              fontsize={26}
            />
            <View style={ownstyles.priceSection}>
              <Price priceFontSize={24} price={food_details_state.food_price}></Price>
              <TouchableOpacity
                  style={[
                    ownstyles.addToListButton,
                    { backgroundColor: "#4CAF50" },
                  ]}
                  onPress={handlePreorderButton}
                >
                  <Text style={ownstyles.buttonText}>Pre-Order Now</Text>
                </TouchableOpacity>
            </View>

            {/* Restaurant Details */}
            <View style={ownstyles.restaurantDetails} >
              <TouchableOpacity onPress={handleToRestaurantProfile} >
                <Text style={ownstyles.restaurantName}>{food_details_state.food_restaurant}</Text>
              </TouchableOpacity>
              <Text style={ownstyles.restaurantAddress}>
                {food_details_state.food_location}
              </Text>

              <View style={ownstyles.ratingContainer}>
                <Text style={ownstyles.rating}>{food_details_state.rating} ★</Text>
                <Text style={ownstyles.ratingCount}>({food_details_state.reviews} reviews)</Text>
              </View>
            </View>

            {/* Review Section */}
            <View style={ownstyles.reviewSection}>
              <View style={ownstyles.reviewHeader}>
                <Text style={ownstyles.reviewTitle}>Reviews</Text>
                <TouchableOpacity>
                  <Text style={ownstyles.seeAllButton}>See All Reviews</Text>
                </TouchableOpacity>
              </View>

              {/* Preview of latest review */}
              <View style={ownstyles.reviewPreview}>
                <Text style={ownstyles.reviewerName}>John D.</Text>
                <Text style={ownstyles.reviewText} numberOfLines={2}>
                  "Amazing momos! The sauce was perfect and the service was
                  excellent..."
                </Text>
              </View>
            </View>
          </View>
        </View>

        {/* Similar Items Section */}
        <View style={ownstyles.similarItemsSection}>
          <Text style={ownstyles.sectionTitle}>You May Also Like</Text>

          {/* <View style={[styles.foodItems_container]}>
            <View style={{ width: "50%", alignItems: "center" }}>
              {Array(5)
                .fill(null)
                .map((item, index) => (
                  <FoodCard
                  key={index}
                  item={item}
                  handleToFoodViewPage={undefined}
                  onAddToCart={undefined}
                />
               
                ))}
            </View>
            <View style={{ width: "50%", alignItems: "center" }}>
              {Array(5)
                .fill(null)
                .map((item, index) => (
                  <FoodCard
                  key={index}
                  item={undefined}
                  handleToFoodViewPage={undefined}
                  onAddToCart={undefined}
                />
                ))}
            </View>
          </View> */}
        </View>
      </ScrollView>
      <SnackBar message={state.message} visible={snackBar} />
    </SafeAreaView>
  );
};

const ownstyles = StyleSheet.create({
  mainSection: {
    minHeight: SCREEN_HEIGHT - scaleHeight(60),
    backgroundColor: "#F0F4F8",
  },
  restaurantInfo: {
    paddingHorizontal: 8,
    width: "100%",
  },
  priceSection: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginTop: scaleHeight(12),
  },
  price: {
    fontSize: scaleWidth(18),
    fontWeight: "bold",
    color: "#2E2E2E",
  },
  addToListButton: {
    backgroundColor: "#333333",
    paddingHorizontal: scaleWidth(20),
    paddingVertical: scaleHeight(10),
    borderRadius: scaleWidth(25),
  },
  buttonText: {
    color: "#fff",
    fontWeight: "600",
    fontSize: scaleWidth(14),
  },
  restaurantDetails: {
    marginTop: scaleHeight(24),
    padding: scaleWidth(16),
    backgroundColor: "#F8F8F8",
    borderRadius: scaleWidth(12),
    alignItems: 'flex-start'
  },
  restaurantName: {
    fontSize: scaleWidth(20),
    fontWeight: "bold",
    color: "#2E2E2E",
  },
  restaurantAddress: {
    fontSize: scaleWidth(14),
    color: "#666",
    marginTop: scaleHeight(4),
  },
  ratingContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: scaleHeight(8),
  },
  rating: {
    fontSize: scaleWidth(16),
    fontWeight: "bold",
    color: "#FFB800",
  },
  ratingCount: {
    fontSize: scaleWidth(14),
    color: "#666",
    marginLeft: scaleWidth(8),
  },
  reviewSection: {
    marginTop: scaleHeight(24),
  },
  reviewHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: scaleHeight(12),
  },
  reviewTitle: {
    fontSize: scaleWidth(18),
    fontWeight: "bold",
    color: "#2E2E2E",
  },
  seeAllButton: {
    color: "#FF6B6B",
    fontSize: scaleWidth(14),
    fontWeight: "600",
  },
  reviewPreview: {
    backgroundColor: "#F8F8F8",
    padding: scaleWidth(16),
    borderRadius: scaleWidth(12),
  },
  reviewerName: {
    fontSize: scaleWidth(14),
    fontWeight: "600",
    color: "#2E2E2E",
    marginBottom: scaleHeight(4),
  },
  reviewText: {
    fontSize: scaleWidth(14),
    color: "#666",
    fontStyle: "italic",
  },
  similarItemsSection: {
    backgroundColor: "#F0F4F8",
  },
  sectionTitle: {
    padding: scaleWidth(16),
    fontSize: scaleWidth(20),
    color: "#2E2E2E",
    fontFamily: "poppins_bold",
  },
});

export default ViewFood;


================================================
File: sellerScreen/AddFood.tsx
================================================
import { StyleSheet, Text, View, Image, TextInput } from 'react-native';
import React, { useContext, useEffect, useReducer, useState } from 'react';
import { Switch, TouchableOpacity } from 'react-native-gesture-handler';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import * as ImagePicker from 'expo-image-picker';
import Price from '../components/viewScreens/Price';
import { scaleHeight, scaleWidth } from '../Scaling';
import { styles } from '../style/style';
import { FontAwesome6 } from '@expo/vector-icons';
import TopBar from '../components/viewScreens/TopBar';
import { myContext } from '../context/AppProvider';
import { baseURL, delete_data, delete_data_with_id, post_data, post_data_with_img, update_data } from '../service';
import { useFocusEffect } from '@react-navigation/native';

const PreviewFoodCard = ({ food_name, price, images }) => {
  return (
    <View style={styles.food_container}>
      <View style={{ flexDirection: 'row' }}>
        {
            images.map((imageObj, index) => (

              <Image
                key={index}
                source={{  uri: imageObj.image.startsWith('file') ? imageObj.image : `${baseURL}${imageObj.image}` }}
                resizeMode="cover"
                style={styles.foodImage}
              />
            ))
        
        }
        {
            [...Array(3 - images.length )].map((_, index) => (
              <View key={`empty-${index}`} style={[styles.foodImage, { backgroundColor: '#E1E1E1' }]} />
            ))
        }
      </View>

      <View style={styles.infoSection}>
        <View style={styles.namePriceRow}>
          <Text style={styles.foodName}>{food_name || 'Food Name'}</Text>
          <Price priceFontSize={18} price={price || 0} />
        </View>

        <View style={styles.restaurantRow}>
          <View style={styles.restaurantInfo}>
            <View style={styles.restaurantLogo}></View>
            <Text style={styles.restaurantName}>Delicious Restaurant</Text>
          </View>

          <View style={styles.addToListButton}>
            <Text style={styles.buttonText}>Add to List</Text>
          </View>
        </View>
      </View>
    </View>
  );
};

const foodInitialInfoState={
  food_name: '',
  food_price: '',
  images: []
}

const foodInfoReducer = (state, action) => {
  switch(action.type){
    case 'id':
      return {...state, id: action.payload}
    case 'add_food_name':
      return {...state, food_name: action.payload}
    case 'add_food_price':
      return {...state, food_price: action.payload}
    case 'add_food_image':
      return {...state, images: [...state.images,action.payload]}
    case 'remove_image':
      return {...state, images: state.images.filter(image => image.image !== action.payload) 
      }
      case 'clear_food_images':
        return {
          ...state,
          images: [],
        };
  }
}

const AddFood = ({ navigation, route }) => {

  const { food_state, food_dispatch } = useContext(myContext);

  const [foodInfoState, foodInfo_dispatch] = useReducer(foodInfoReducer, foodInitialInfoState);
  const [isgoingToUpdate, setisgoingToUpdate] = useState(false)

  useEffect(() => {
    const { food_id_params = null, food_name_params = '', food_price_params = '', food_image_params = null } = route.params || {};
    if (food_name_params && food_price_params) {
      setisgoingToUpdate(true);
    }
    foodInfo_dispatch({type: 'id', payload: food_id_params})
    foodInfo_dispatch({type: 'add_food_name', payload: food_name_params})
    foodInfo_dispatch({type: 'add_food_price', payload: food_price_params.toString() || ''})

    if (food_image_params) {
      const newImages = food_image_params.map((item) => ({id:item.id, image: item.image }));
      newImages.forEach((image) => {
        foodInfo_dispatch({type: 'add_food_image', payload: image})
      })
    } else {
      foodInfo_dispatch({ type: 'clear_food_images' });
    }
  }, [route.params]);

  useFocusEffect(
    React.useCallback(() => {
      return () => {
        foodInfo_dispatch({type: 'id', payload: null})
        foodInfo_dispatch({type: 'add_food_name', payload: ''})
        foodInfo_dispatch({type: 'add_food_price', payload: ''})
        foodInfo_dispatch({ type: 'clear_food_images' });
        setisgoingToUpdate(false);
      };
    }, [])
  );

  const pickImage = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();

    if (status !== 'granted') {
      alert('Sorry, we need camera roll permissions to upload images!');
      return;
    }


    if (foodInfoState.images.length >= 3) {
      alert('You can only upload up to 3 images');
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [3, 4],
      quality: 1,
    });

    if (!result.canceled) {
      foodInfo_dispatch({type: 'add_food_image', payload: { image: result.assets[0].uri}})
    }
  };



  const handleUpload = async () => {
    if (!foodInfoState.food_name || !foodInfoState.food_price ) {
      alert('Please fill all the fields');
      return;
    }

    if (!(foodInfoState.images.length === 3)) {
      alert('Please upload 3 images');
      return
    }
    const foodObj = {
      food_name: foodInfoState.food_name,
      food_price: foodInfoState.food_price,
      id: foodInfoState.id,
    }
    console.log('imageUris:-->', foodInfoState.images);
    if (!isgoingToUpdate) {
      console.log('Going to POST');
      const response = await post_data_with_img('add_food', foodObj, foodInfoState.images, 'POST');
      if (response.success) {
        food_dispatch({ type: "ADD_FOOD", payload: response.data });
        navigation.navigate('Menu');
        response.data.images.forEach((img, index) => {
          console.log(`Image ${index + 1}:`, img);
          console.log('Image URL:', img.image);
          console.log('Image ID:', img.id);
        });
      }
    } else if (isgoingToUpdate) {
      console.log('Going to PUT');
      const response = await post_data_with_img('edit_food',foodObj, foodInfoState.images , 'PUT');
      if (response.success) {
        food_dispatch({ type: 'UPDATE_FOOD', payload: response.data });
        navigation.navigate('Menu');
        console.log('Food updated successfully');
      }
    }

  };

  const handleDeleteLastImage = () => {

    if (foodInfoState.images.length > 0) {
      foodInfo_dispatch({type: 'remove_image', payload: foodInfoState.images[foodInfoState.images.length - 1].image}) 
    }
  };

  const handleDeleteFood = async () => {
    const response = await delete_data_with_id('delete_food', { id: foodInfoState.id });
    if (response.success) {
      food_dispatch({ type: 'REMOVE_FOOD', payload: foodInfoState.id });
      navigation.navigate('Menu');
      console.log('Food deleted successfully');
    }
  }

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: "#F0F4F8" }}>
      <StatusBar hidden={false} backgroundColor="#F0F4F8" style="dark" />
      <TopBar navigation={navigation} top_title='Add/Edit' withSettingIcons={undefined} handleSettingIcon={undefined} />
      <View style={{ padding: 10 }}>
        <PreviewFoodCard
          food_name={foodInfoState.food_name}
          price={Number( foodInfoState.food_price)}
          images={ foodInfoState.images}
        />

        <View style={localStyles.inputContainer}>
          <Text style={localStyles.label}>Food Name</Text>
          <TextInput
            style={localStyles.input}
            value={foodInfoState.food_name}
            onChangeText={(text) => foodInfo_dispatch({type: 'add_food_name', payload: text})}
            placeholder="Enter food name"
          />

          <Text style={localStyles.label}>Price</Text>
          <TextInput
            style={localStyles.input}
            value={foodInfoState.food_price}
            onChangeText={(text) => foodInfo_dispatch({type: 'add_food_price', payload: text})}
            placeholder="Enter price"
            keyboardType="numeric"
          />
          <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>
            <Text style={localStyles.label}>Images ({foodInfoState.images.length}/3)</Text>
            <TouchableOpacity onPress={handleDeleteLastImage}>
              <FontAwesome6 name="delete-left" size={20} color='red'></FontAwesome6>
            </TouchableOpacity>
          </View>
          <TouchableOpacity
            style={localStyles.imagePickerButton}
            onPress={pickImage}
          >
            <Text style={localStyles.imagePickerButtonText}> Pick an Image </Text>
          </TouchableOpacity>

          <View style={{ gap: 10, marginTop: 80 }}>
            <TouchableOpacity
              style={localStyles.uploadButton}
              onPress={handleUpload}
            >
              <Text style={localStyles.uploadButtonText}>{isgoingToUpdate ? 'Update' : 'Upload'} Food Item</Text>
            </TouchableOpacity>
            {
              isgoingToUpdate && (

                <TouchableOpacity style={[localStyles.uploadButton, { backgroundColor: 'red' }]} onPress={handleDeleteFood}>
                  <Text style={localStyles.uploadButtonText}> Delete Item</Text>
                </TouchableOpacity>
              )
            }
          </View>


        </View>
      </View>
    </SafeAreaView>
  );
};

const localStyles = StyleSheet.create({
  inputContainer: {
    padding: 16,
    backgroundColor: 'white',
    borderRadius: 12,
    marginTop: 16,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
    color: '#333',
    fontFamily: 'montserrat_semibold',
  },
  input: {
    borderWidth: 1,
    borderColor: '#E1E1E1',
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
    fontSize: 16,
  },
  imagePickerButton: {
    backgroundColor: '#E1E1E1',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 16,
  },
  imagePickerButtonText: {
    fontSize: 16,
    color: '#333',
    fontWeight: '500',
  },
  uploadButton: {
    backgroundColor: '#4CAF50',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  uploadButtonText: {
    fontSize: 16,
    color: 'white',
    fontWeight: '600',
  },
});

export default AddFood;

================================================
File: sellerScreen/Menu.tsx
================================================
"use client"

import { StyleSheet, Linking, Platform,ScrollView } from "react-native"
import { useCallback, useContext, useLayoutEffect } from "react"
import { SafeAreaView } from "react-native-safe-area-context"
import { createMaterialTopTabNavigator } from "@react-navigation/material-top-tabs"
import ProfileHeader from "../components/restaurant_profile/ProfileHeader"
import { MenuItemsScreen } from "../components/restaurant_profile/MenuSection"
import { DrinksScreen } from "../components/restaurant_profile/DrinkSection"
import { LooksScreen } from "../components/restaurant_profile/Looks"
import { myContext } from "../context/AppProvider"
import { useFocusEffect } from "@react-navigation/native"
import { StatusBar } from "react-native"

const Tab = createMaterialTopTabNavigator()

const Menu = ({ navigation }) => {
  const { seller_state } = useContext(myContext)


  // Wrapper components to pass props
  const MenuItemsWrapper = () => {
    const { food_state } = useContext(myContext)
    return <MenuItemsScreen foodItems={food_state} navigation={navigation} handlePressonList={undefined} />
  }

  const openMaps = () => {
    const latitude = "26.8217"
    const longitude = "87.2863"
    const label = "Delicious Restaurant"

    const scheme = Platform.select({ ios: "maps:0,0?q=", android: "geo:0,0?q=" })
    const latLng = `${latitude},${longitude}`
    const url = Platform.select({
      ios: `${scheme}${label}@${latLng}`,
      android: `${scheme}${latLng}(${label})`,
    })

    Linking.openURL(url)
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar hidden={false} backgroundColor="#333333" barStyle="light-content" />
      <ProfileHeader
        handleGoBack={undefined}
        openMaps={openMaps}
        restaurantName={seller_state.name}
        openingHour={seller_state.opening_hour}
        rating={seller_state.rating}
        cityName={seller_state.city}
        streetAddress={seller_state.street_address}
        activeStatus={seller_state.is_active}
        businessType={seller_state.business_type}
        logo={seller_state.logo}
        navigation={navigation}
      />

      <Tab.Navigator
        style={styles.tabNavigator}
        screenOptions={{
          tabBarStyle: styles.tabBar,
          tabBarIndicatorStyle: styles.tabIndicator,
          tabBarLabelStyle: styles.tabLabel,
          tabBarActiveTintColor: "#333333",
          tabBarInactiveTintColor: "#666",
        }}
      >
        <Tab.Screen name="Menu Items" component={MenuItemsWrapper} />
        <Tab.Screen name="Drinks" component={DrinksScreen} />
        <Tab.Screen name="Looks" component={LooksScreen} />
      </Tab.Navigator>
      {/* </ScrollView> */}
    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F8F9FA",
  },
  tabNavigator: {
    flex: 1,
  },
  tabBar: {
    backgroundColor: "#F0F4F8",
    elevation: 0,
    shadowOpacity: 0,
    borderBottomWidth: 1,
    borderBottomColor: "#F0F0F0",
  },
  tabIndicator: {
    backgroundColor: "#333333",
    height: 3,
  },
  tabLabel: {
    fontFamily: "poppins_semibold",
    textTransform: "none",
  },
})

export default Menu



================================================
File: sellerScreen/Notifications.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'

const Notifications = () => {
  return (
    <View>
      <Text>Notifications</Text>
    </View>
  )
}

export default Notifications

const styles = StyleSheet.create({})

================================================
File: sellerScreen/RegistrationScreen.tsx
================================================
import React, { useContext, useReducer } from 'react';
import { 
  StyleSheet, 
  View, 
  ScrollView, 
  Text, 
  Keyboard, 
  Alert,
  KeyboardAvoidingView,
  Dimensions,
  Platform 
} from 'react-native';
import TextEditFields from '../components/profile/TextEditFields';
import TopBar from '../components/viewScreens/TopBar';
import LoadingScreen from '../components/viewScreens/LoadingScreen';
import SnackBar from '../screens/viewScreens/SnackBar';
import { scaleHeight, scaleWidth } from '../Scaling';
import { Picker } from '@react-native-picker/picker';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaView } from 'react-native-safe-area-context';
import { styles } from '../style/style';
import Button from '../components/auth/Button';
import { get_data, post_data, update_data } from '../service';
import { myContext } from '../context/AppProvider';
import { useFocusEffect } from '@react-navigation/native';

const { width, height } = Dimensions.get('window');


const RestaurantRegistration = ({ navigation }) => {
  const { isLoading, setisLoading, snackBar, setsnackBar, dispatch,state,seller_state,seller_dispatch } = useContext(myContext);

  const handleRegister = async () => {
    Keyboard.dismiss();
    setisLoading(true);
    console.log(seller_state)
    
    const response = await post_data('register_restaurant', seller_state);
    
    if (response.success) {
      setisLoading(false);
      setsnackBar(true);
      dispatch({ type: 'snackmessage', payload: response.data });
      setTimeout(() => setsnackBar(false), 3000);
    } else {
      setisLoading(false);
      Alert.alert('Error', response.data);
    }
  };

  return (
    <SafeAreaView style={ownstyles.safeArea}>
      {isLoading && <LoadingScreen />}
      <StatusBar hidden={false} backgroundColor='#F0F4F8' style='dark' />
      <TopBar navigation={navigation} top_title='Restaurant Registration' withSettingIcons={undefined} handleSettingIcon={undefined} />
      
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={ownstyles.keyboardView}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 64 : 0}
      >
        <ScrollView
          contentContainerStyle={ownstyles.scrollContent}
          showsVerticalScrollIndicator={false}
          keyboardShouldPersistTaps="handled"
        >
          <View style={ownstyles.formContainer}>
            <SectionTitle title="Basic Information" />
            <TextEditFields
              label_name={'Restaurant Name'}
              inputmode={'text'}
              key_type={'default'}
              given_value={seller_state.name}
              handleInputChange={(text) => seller_dispatch({ type: 'name', payload: text })}
            />

            <SectionTitle title="Address & Location" />
            <TextEditFields
              label_name={'Street Address'}
              inputmode={'text'}
              key_type={'default'}
              given_value={seller_state.street_address}
              handleInputChange={(text) => seller_dispatch({ type: 'street_address', payload: text })}
            />
            <TextEditFields
              label_name={'City'}
              inputmode={'text'}
              key_type={'default'}
              given_value={seller_state.city}
              handleInputChange={(text) => seller_dispatch({ type: 'city', payload: text })}
            />

            <SectionTitle title="Business Details" />
            <View style={ownstyles.pickerContainer}>
              <Text style={ownstyles.pickerLabel}>Business Type : </Text>
              <View style={ownstyles.picker}>
                <Picker
                  style={{ width: scaleWidth(150) }}
                  selectedValue={seller_state.business_type}
                  onValueChange={(itemValue) => seller_dispatch({ type: 'business_type', payload: itemValue })}
                >
                  <Picker.Item label="Cafe" value="cafe" />
                  <Picker.Item label="Restaurant" value="restaurant" />
                  <Picker.Item label="Bakery" value="bakery" />
                </Picker>
              </View>
            </View>

            <TextEditFields
              label_name={'Opening Hours'}
              inputmode={'text'}
              key_type={'default'}
              given_value={seller_state.opening_hour}
              handleInputChange={(text) => seller_dispatch({ type: 'opening_hour', payload: text })}
            />

            <SectionTitle title="KYC" />
            <TextEditFields
              label_name={'Citizenship Number'}
              inputmode={'text'}
              key_type={'default'}
              given_value={seller_state.citizenship_number}
              handleInputChange={(text) => seller_dispatch({ type: 'citizenship_number', payload: text })}
            />
            <TextEditFields
              label_name={'PAN Number'}
              inputmode={'text'}
              key_type={'default'}
              given_value={seller_state.pan_number}
              handleInputChange={(text) => seller_dispatch({ type: 'pan_number', payload: text })}
            />

            <View style={ownstyles.buttonContainer}>
              <Button
                style={styles.loginButton}
                btnText={state.role==='customer'?'Register':'Update'}
                handleAuthBtn={handleRegister}
              />
            </View>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const SectionTitle = ({ title }) => (
  <View style={ownstyles.sectionTitleContainer}>
    <Text style={ownstyles.sectionTitle}>{title}</Text>
  </View>
);

const ownstyles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#F0F4F8',
  },
  keyboardView: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
    paddingBottom: 40,
  },
  formContainer: {
    paddingHorizontal: scaleWidth(40),
    paddingBottom: scaleWidth(20),
  },
  pickerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
  },
  pickerLabel: {
    fontFamily: 'poppins_regular',
    fontSize: scaleWidth(15),
  },
  picker: {
    borderWidth: 1,
    borderColor: 'black',
    borderRadius: 12,
  },
  buttonContainer: {
    width:'100%',
    alignItems: 'center',
    marginTop: 20,
    marginBottom: Platform.OS === 'ios' ? 40 : 20,
  },
  sectionTitleContainer: {
    marginTop: scaleWidth(20),
    marginBottom: scaleWidth(10),
    width: '100%',
  },
  sectionTitle: {
    fontSize: scaleWidth(18),
    fontWeight: 'bold',
    color: '#333',
  }
});

export default RestaurantRegistration;

================================================
File: sellerScreen/RestaurantNotification.tsx
================================================
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import TopBar from '../components/viewScreens/TopBar';

const RestaurantNotification = ({navigation}) => {
  const notifications = [
    {
      id: 1,
      title: 'New Promotion',
      message: 'Get 20% off your next order!',
      date: 'Nov 10, 2023',
    },
    {
      id: 2,
      title: 'Order Delivered',
      message: 'Your order #123 has been delivered.',
      date: 'Nov 8, 2023',
    },
    {
      id: 3,
      title: 'Flash Sale',
      message: 'Don\'t miss our limited-time flash sale!',
      date: 'Nov 5, 2023',
    },
    {
      id: 4,
      title: 'New Menu Item',
      message: 'Check out our new vegetarian option!',
      date: 'Nov 2, 2023',
    },
  ];

  // const handleSettingIcon = () => {
  //   navigation.navigate('SellerSetting');
  // }

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: "#F0F4F8" }}>
    <StatusBar hidden={false} backgroundColor="#F0F4F8" style="dark" />
    <TopBar navigation={navigation} top_title='Notifications' withSettingIcons={false} handleSettingIcon={undefined}/>
    <View style={styles.container}>

      {notifications.map((notification) => (
        <View key={notification.id} style={styles.notificationItem}>
          <View style={styles.notificationIcon}>
            <Text style={styles.notificationIconText}>🔔</Text>
          </View>
          <View style={styles.notificationContent}>
            <Text style={styles.notificationTitle}>{notification.title}</Text>
            <Text style={styles.notificationMessage}>{notification.message}</Text>
            <Text style={styles.notificationDate}>{notification.date}</Text>
          </View>
        </View>
      ))}
    </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.23,
    shadowRadius: 2.62,
    elevation: 4,
  },
  headerText: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  headerActions: {
    padding: 8,
    borderRadius: 4,
    backgroundColor: '#f0f0f0',
  },
  headerActionText: {
    fontSize: 14,
    color: '#666',
  },
  notificationItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  notificationIcon: {
    marginRight: 12,
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#2196F3',
    justifyContent: 'center',
    alignItems: 'center',
  },
  notificationIconText: {
    color: '#fff',
    fontSize: 16,
  },
  notificationContent: {
    flex: 1,
  },
  notificationTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  notificationMessage: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  notificationDate: {
    fontSize: 12,
    color: '#999',
  },
});

export default RestaurantNotification; 

================================================
File: sellerScreen/SellerProfile.tsx
================================================
import React, { useContext, useState } from 'react';
import {
  StyleSheet,
  Text,
  View,
  Switch,
  Alert,
  ScrollView,
  TouchableOpacity,
  Image
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import TopBar from '../components/viewScreens/TopBar';

import SettingMenu from '../components/profile/SettingMenu';
import TextEditFields from '../components/profile/TextEditFields';

import { scaleHeight, scaleWidth } from '../Scaling';
import { myContext } from '../context/AppProvider';
import * as ImagePicker from 'expo-image-picker';
import { post_data_with_img, update_data } from '../service';
import LoadingScreen from '../components/viewScreens/LoadingScreen';
import SnackBar from '../screens/viewScreens/SnackBar';
import { Ionicons, MaterialIcons, FontAwesome } from '@expo/vector-icons';
import { CommonActions } from '@react-navigation/native'
import ProfileSection from '../components/seller_profile/ProfileSection';
import { handleLogout } from '../context/ProvideFunction/Logout';

const SellerProfile = ({ navigation }) => {
  //  const {  state, dispatch,  clearAllData,isLoading,setisLoading , isLogged} = useContext(myContext);
  const { state, seller_state, seller_dispatch, dispatch, isLoading, setisLoading, snackBar, setsnackBar, clearAllData } = useContext(myContext);
  const [isEditMode, setIsEditMode] = useState(false);


  const handleSaveChanges = async () => {
    try {
      setisLoading(true);
      const restaurantData = {
        name: seller_state.name,
        street_address: seller_state.street_address,
        city: seller_state.city,
        business_type: seller_state.business_type,
        opening_hour: seller_state.opening_hour
      };

      const response = await update_data('edit_restaurant', restaurantData);
      if (response.success) {
        setIsEditMode(false);
        dispatch({ type: 'snackmessage', payload: 'Profile updated successfully' });
        setsnackBar(true);
        setTimeout(() => setsnackBar(false), 3000);
      } else {
        Alert.alert('Error', response.data || 'Failed to update profile');
      }
    } catch (error) {
      Alert.alert('Error', 'An unexpected error occurred');
    } finally {
      setisLoading(false);
    }
  };

  const handleEditProfileAccount = (screen_name) => {
    navigation.navigate(screen_name);
  };



  return (
    <>
      {isLoading && <LoadingScreen />}
      <SafeAreaView style={{ flex: 1, backgroundColor: '#F0F4F8' }}>
        <StatusBar hidden={false} backgroundColor='#F0F4F8' style='dark' />
        <TopBar
          navigation={navigation}
          top_title='Restaurant Profile'
          withSettingIcons={false}
          handleSettingIcon={undefined}
        />

        <ScrollView
          style={localStyles.scrollView}
          showsVerticalScrollIndicator={false}
        >
          <ProfileSection />
          
          {isEditMode ? (
            <View style={localStyles.editContainer}>
              <TextEditFields
                label_name={'Restaurant Name'}
                inputmode={'text'}
                key_type={'default'}
                given_value={seller_state.name}
                handleInputChange={(text) => seller_dispatch({ type: 'SET_DATA', key: 'name', payload: text })}
              />
              <TextEditFields
                label_name={'Street Address'}
                inputmode={'text'}
                key_type={'default'}
                given_value={seller_state.street_address}
                handleInputChange={(text) => seller_dispatch({ type: 'SET_DATA', key: 'street_address', payload: text })}
              />
              <TextEditFields
                label_name={'City'}
                inputmode={'text'}
                key_type={'default'}
                given_value={seller_state.city}
                handleInputChange={(text) => seller_dispatch({ type: 'SET_DATA', key: 'city', payload: text })}
              />
              <TextEditFields
                label_name={'Opening Hours'}
                inputmode={'text'}
                key_type={'default'}
                given_value={seller_state.opening_hour}
                handleInputChange={(text) => seller_dispatch({ type: 'SET_DATA', key: 'opening_hour', payload: text })}
              />

              <View style={localStyles.buttonRow}>
                <TouchableOpacity
                  style={[localStyles.button, localStyles.cancelButton]}
                  onPress={() => setIsEditMode(false)}
                >
                  <Text style={[localStyles.buttonText, { color: 'black' }]}>Cancel</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={[localStyles.button, localStyles.saveButton]}
                  onPress={handleSaveChanges}
                >
                  <Text style={localStyles.buttonText}>Save Changes</Text>
                </TouchableOpacity>
              </View>
            </View>
          ) : (
            <>
              <View style={localStyles.infoSection}>
                <Text style={localStyles.sectionTitle}>Restaurant Information</Text>

                <View style={localStyles.infoRow}>
                  <Ionicons name="location" size={scaleWidth(20)} color="#333333" />
                  <View style={localStyles.infoTextContainer}>
                    <Text style={localStyles.infoLabel}>Address</Text>
                    <Text style={localStyles.infoValue}>
                      {seller_state.street_address}, {seller_state.city}
                    </Text>
                  </View>
                </View>

                <View style={localStyles.infoRow}>
                  <Ionicons name="time" size={scaleWidth(20)} color="#333333" />
                  <View style={localStyles.infoTextContainer}>
                    <Text style={localStyles.infoLabel}>Opening Hours</Text>
                    <Text style={localStyles.infoValue}>{seller_state.opening_hour}</Text>
                  </View>
                </View>

                <View style={localStyles.infoRow}>
                  <Ionicons name="star" size={scaleWidth(20)} color="#333333" />
                  <View style={localStyles.infoTextContainer}>
                    <Text style={localStyles.infoLabel}>Rating</Text>
                    <Text style={localStyles.infoValue}>{seller_state.rating} / 5</Text>
                  </View>
                </View>

                <TouchableOpacity
                  style={localStyles.editProfileButton}
                  onPress={() => setIsEditMode(true)}
                >
                  <Text style={localStyles.editProfileButtonText}>Edit Profile</Text>
                </TouchableOpacity>
              </View>

              <View style={localStyles.menuSection}>
                <Text style={localStyles.sectionTitle}>Account Settings</Text>

                <SettingMenu
                  menuName={'Menu Management'}
                  iconName={'restaurant-outline'}
                  handleSettingPage={() => navigation.navigate('Menu')}
                />

                <SettingMenu
                  menuName={'Business Information'}
                  iconName={'business-outline'}
                  handleSettingPage={() => handleEditProfileAccount('RegistrationScreen')}
                />

                <SettingMenu
                  menuName={'Payment Settings'}
                  iconName={'card-outline'}
                  handleSettingPage={() => handleEditProfileAccount('MethodSelection')}
                />

                <SettingMenu
                  menuName={'Notifications'}
                  iconName={'notifications-outline'}
                  handleSettingPage={() => navigation.navigate('Notifications')}
                />

                <SettingMenu
                  menuName={'Privacy and Security'}
                  iconName={'shield-outline'}
                  handleSettingPage={() => handleEditProfileAccount('PrivacyAndSecurity')}
                />

                <SettingMenu
                  menuName={'Logout'}
                  iconName={'log-out-outline'}
                  handleSettingPage={()=>{handleLogout(setisLoading,clearAllData,navigation,true)}}
                />
              </View>
            </>
          )}
        </ScrollView>
        <SnackBar message={state.snackmessage} visible={snackBar} />
      </SafeAreaView>
    </>
  );
};

const localStyles = StyleSheet.create({
  scrollView: {
    flex: 1,
  },
 
  infoSection: {   
    backgroundColor: '#FFFFFF',
    padding: scaleWidth(16),
    borderRadius: scaleWidth(10),
    margin: scaleWidth(10),
    marginTop: 0,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  sectionTitle: {
    fontFamily: 'poppins_semibold',
    fontSize: scaleWidth(18),
    color: '#333333',
    marginBottom: scaleHeight(15),
  },
  infoRow: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: scaleHeight(15),
  },
  infoTextContainer: {
    marginLeft: scaleWidth(10),
    flex: 1,
  },
  infoLabel: {
    fontFamily: 'poppins_regular',
    fontSize: scaleWidth(14),
    color: '#757575',
  },
  infoValue: {
    fontFamily: 'poppins_semibold',
    fontSize: scaleWidth(16),
    color: '#333333',
    marginTop: scaleHeight(2),
  },
  editProfileButton: {
    backgroundColor: '#333333',
    padding: scaleWidth(12),
    borderRadius: scaleWidth(8),
    alignItems: 'center',
    marginTop: scaleHeight(10),
  },
  editProfileButtonText: {
    fontFamily: 'poppins_semibold',
    fontSize: scaleWidth(16),
    color: '#FFFFFF',
  },
  menuSection: {
    backgroundColor: '#FFFFFF',
    padding: scaleWidth(16),
    borderRadius: scaleWidth(10),
    margin: scaleWidth(10),
    marginTop: 0,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
    paddingBottom: scaleHeight(20),
  },
  editContainer: {
    backgroundColor: '#FFFFFF',
    padding: scaleWidth(16),
    borderRadius: scaleWidth(10),
    margin: scaleWidth(10),
    marginTop: 0,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
    alignItems: 'center',
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
    marginTop: scaleHeight(20),
  },
  button: {
    padding: scaleWidth(12),
    borderRadius: scaleWidth(8),
    alignItems: 'center',
    width: '48%',
  },
  cancelButton: {
    backgroundColor: '#E0E0E0',
  },
  saveButton: {
    backgroundColor: '#4CAF50',
  },
  buttonText: {
    fontFamily: 'poppins_semibold',
    fontSize: scaleWidth(16),
    color: '#FFFFFF',
  },
});

export default SellerProfile;


================================================
File: sellerScreen/SellerSetting.tsx
================================================
import { StyleSheet, Text, View,Alert } from 'react-native'
import React, { useContext } from 'react'
import SettingMenu from '../components/profile/SettingMenu'
import UserInfo from '../components/profile/UserInfo'
import Name_Phone from '../components/profile/Name_Phone'
import TopBar from '../components/viewScreens/TopBar'
import { SafeAreaView } from 'react-native-safe-area-context'
import { StatusBar } from 'expo-status-bar'
import { styles } from '../style/style'
import { myContext } from '../context/AppProvider'
import { CommonActions } from '@react-navigation/native'

const SellerSetting = ({ navigation }) => {
    const {  state, dispatch,  clearAllData,isLoading,setisLoading , isLogged} = useContext(myContext);

    const handleEditProfileAccount = (screen_name) => {
        navigation.navigate(screen_name)
    }
    const handleLogout = async() => {
        Alert.alert("", "Are you want to logout?",
            [
                {
                    text: "Cancel",
                    onPress: () => console.log("Cancel Pressed"),
                    style: "cancel",
                },
                {
                    text: "Logout",
                    onPress: async() => {
                        setisLoading(true)
                        await clearAllData()
                        setisLoading(false)
                        navigation.dispatch(
                            CommonActions.reset({
                                index: 0,
                                routes: [{ name: 'LoginScreens' }],
                            })
                        );
                    },
                },
            ],
            { cancelable: false }
        );
    }
    return (
        <SafeAreaView >
            <StatusBar hidden={false} backgroundColor='#F0F4F8' style='dark' />
            <TopBar navigation={navigation} top_title='Settings' withSettingIcons={undefined} handleSettingIcon={undefined} />
            <View style={styles.home_screen}>




                <SettingMenu
                    menuName={'Account'}
                    iconName={'person-outline'}
                    handleSettingPage={() => handleEditProfileAccount('AccountSwitch')}
                />
                <SettingMenu
                    menuName={'Privacy and Security'}
                    iconName={'shield-outline'}
                    handleSettingPage={() => handleEditProfileAccount('PrivacyAndSecurity')}

                />
                <SettingMenu
                    menuName={'Help and Support'}
                    iconName={'help-circle-outline'}
                    handleSettingPage={() => handleEditProfileAccount('ProfileUpdation')}
                />




                <SettingMenu
                    menuName={'About'}
                    iconName={'information-circle-outline'}
                    handleSettingPage={() => handleEditProfileAccount('AboutScreen')}
                />


                <SettingMenu
                    menuName={'Logout'}
                    iconName={'log-out-outline'}
                    handleSettingPage={handleLogout}
                />


            </View>
        </SafeAreaView>
    )
}

export default SellerSetting

================================================
File: style/style.js
================================================
import { StyleSheet, Platform, Dimensions } from "react-native";
import { scaleWidth, scaleHeight } from "../Scaling";
const { width, height } = Dimensions.get('window');


export const styles = StyleSheet.create({
  mainViewStyle: {
    backgroundColor: '#F5F5F5',
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    flexDirection: 'column',

  },
  inputField: {
    width: '100%',
    height: height * 0.052,
    color: '#212121',
    fontSize: scaleWidth(16),
    fontFamily:'montserrat_regular',
  },

  loginButton: {
    width: '80%',
    height: height * 0.0624,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#333333',
    borderRadius: 10,
    marginTop: scaleHeight(20)
  },
  authBox: {
    height: height * 0.0936,
    width: '80%',
    borderWidth: 1,
    borderColor: '#BDBDBD',
    flexDirection: 'column',
    justifyContent: 'center',
    paddingLeft: scaleWidth(20)
  },
  BigText_for_login: {
    flexDirection: 'column',
    width: '80%',
    justifyContent: 'center',
    alignItems: 'flex-start',

  },
  verifyBoxContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 20,
    width: '90%',
  },
  verifyInputBox: {
    borderWidth: 2,
    borderColor: '#BDBDBD',
    padding: 10,
    textAlign: 'center',
    fontSize: 18,
    width: 50,
    height: 50,
    fontWeight: 'bold',
    fontSize: 25,
  },
  textStyle: {
    color: '#ffffff',
    fontWeight: 'bold',
    fontSize: 18,
    marginLeft: 15,
    marginBottom: 15,
    padding: 5,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    borderRadius: 10
  },
  home_screen: {
    flexDirection: 'column',
    height: height,
    width: width,
    backgroundColor: '#F0F4F8'
  },

  homeHeading: {
    height: '45%',
    width: '100%',
    borderBottomRightRadius: 20,
    borderBottomLeftRadius: 20,
    padding: 10,
    width: '100%',
    // marginTop: 0,
  },
  homeMap: {
    height: scaleHeight(150),
    width: '100%',
    paddingHorizontal: 8,
    borderRadius: scaleWidth(20),
    width: '100%',
    flexDirection: 'column',
    justifyContent: 'space-between',
  },
  map_box: {
    borderWidth: scaleWidth(5),
    borderColor: '#FFFFFF',
    // height: '78%',
    borderRadius: scaleWidth(25),
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  home_categories_options: {
    height: 70,
    // height:160,
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
    borderBottomRightRadius: 20,
    borderBottomLeftRadius: 20,
    position: 'relative',   
    zIndex: 10,
    backgroundColor: '#dc2f02',
    marginBottom: 4
  },
  category_container: {
    flexDirection: 'row',
    height: 'auto',
    width: '100%',
    justifyContent: 'space-around',
    alignItems: 'center'

  },
  category_boxes: {
    width: 130,
    height: 50,
    backgroundColor: '#FFB74D', // Nice plumping background color
    borderRadius: 6,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000', // Shadow color
    shadowOffset: { width: 0, height: 4 }, // Shadow offset
    shadowOpacity: 0.3, // Shadow opacity
    shadowRadius: 4.65, // Shadow radius
    elevation: 8, // Elevation for Android
  }
  ,
  category_text: {
    textAlign: 'center',
    color: '#ffffff',
    fontFamily: 'jakarta_bold',
    fontSize: 15
  },
  homeHeadingText: {
    // fontSize: 18,
    fontSize: width * 0.04,
    color: '#eaf4f4',
    fontFamily: 'montserrat_bold'

  },
  foodItems_container: {
    flexDirection: 'row',
    width: '100%',
    backgroundColor: '#F0F4F8'
    ,paddingBottom:scaleHeight(60) , 
    justifyContent:'center',
    alignItems:'flex-start',
    gap:scaleWidth(5)
  },

  price: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  foodItemBox: {
    height: 380,
    width: '47%',
    backgroundColor: '#ffffff',
    borderRadius: 15,
    padding: 5
  },
  foodImage: {
    height: '82%',
    backgroundColor: 'grey',
    borderTopRightRadius: 15,
    borderTopLeftRadius: 15,
  },
  location: {
    flexDirection: 'row',
    alignItems: 'center',

  },

  time: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 5,
    backgroundColor: 'lightgrey',
    borderRadius: 10,
  },
  price_and_time: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  searchBar: {
    flexDirection: 'row',
    alignItems: 'center',
    borderLeftWidth: scaleWidth(2),
    borderTopWidth: scaleWidth(2),
    borderBottomWidth: scaleWidth(2),
    borderColor: '#333333',
    height: scaleHeight(45),
    width: '70%',
    borderTopLeftRadius: scaleWidth(20),
    borderBottomLeftRadius: scaleWidth(20),
    backgroundColor: '#F5F5F5',
    paddingHorizontal: scaleWidth(1),
    paddingLeft: scaleWidth(10),
    paddingRight: scaleWidth(2),

  },
  searchView: {
    height: scaleHeight(45),
    borderColor: '#333333',
    width: '15%',
    borderWidth: scaleWidth(2),
    borderLeftWidth: 0,
    borderTopRightRadius: scaleWidth(20),
    borderBottomRightRadius: scaleWidth(20),
    borderBottomLeftRadius: scaleWidth(40),
    alignItems: 'center',
    justifyContent: 'center'
  },








//List component Styles

  food_container: {
    backgroundColor: "#FFFFFF",
    borderTopRightRadius: scaleWidth(10),
    width: "95%",
    alignSelf: "center",
    marginVertical: scaleHeight(10),
    padding: scaleWidth(10),
    flexDirection: "column",
    alignItems: "center",
  },
  foodImage: {
    width: "30%",
    height: scaleHeight(150),
    backgroundColor: "#EAEAEA",
  },
  infoSection: {
    width: "100%",
    marginTop: scaleHeight(10),
  },
  namePriceRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingBottom: scaleHeight(5),
  },
  foodName: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(20),
    color: "#333333",
  },
  restaurantRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginTop: scaleHeight(5),
  },
  restaurantInfo: {
    flexDirection: "row",
    alignItems: "center",
  },
  restaurantLogo: {
    backgroundColor: "#FFA726",
    height: scaleHeight(30),
    width: scaleWidth(30),
    borderRadius: scaleWidth(15),
    marginRight: scaleWidth(8),
  },
  restaurantName: {
    fontSize: scaleWidth(14),
    color: "#555555",
    fontFamily: "poppins_regular",
  },
  addToList: {
    fontSize: scaleWidth(14),
    color: "#0066CC",
    fontFamily: "poppins_semibold",
  },
  buttonText: {
    color: "#fff",
    fontWeight: "600",
  },
  addToListButton: {
    backgroundColor: "#333333",
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 25,
  },
})

