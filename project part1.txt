Directory structure:
└── itznishantthapa-fadefood/
    ├── App.js
    ├── For LLM of This Project.txt
    ├── Scaling.js
    ├── StockFile.txt
    ├── app.json
    ├── babel.config.js
    ├── declaration.d.ts
    ├── metro.config.js
    ├── package.json
    ├── service.js
    ├── tsconfig.json
    ├── apis/
    │   ├── getAllFoods.js
    │   ├── getRestaurantFood.js
    │   ├── getRestaurantInformation.js
    │   └── getUserInformation.js
    ├── assets/
    │   ├── Video/
    │   ├── fonts/
    │   │   ├── Inter_28pt-SemiBold.ttf
    │   │   ├── LeckerliOne-Regular.ttf
    │   │   ├── Montserrat-ExtraBold.ttf
    │   │   ├── Montserrat-Regular.ttf
    │   │   ├── Montserrat-SemiBold.ttf
    │   │   ├── NotoSans_Condensed-Regular.ttf
    │   │   ├── Pacifico-Regular.ttf
    │   │   ├── PlusJakartaSans-ExtraBold.ttf
    │   │   ├── PlusJakartaSans-Regular.ttf
    │   │   ├── Poppins-Bold.ttf
    │   │   ├── Poppins-Regular.ttf
    │   │   ├── Poppins-SemiBold.ttf
    │   │   └── Roboto_Condensed-SemiBold.ttf
    │   └── images/
    │       └── profile.webp
    ├── components/
    │   ├── auth/
    │   │   ├── Button.tsx
    │   │   ├── IntroText.tsx
    │   │   └── UserInput.tsx
    │   ├── chat/
    │   │   ├── MsgBox.tsx
    │   │   └── RestaurantMsg.tsx
    │   ├── home/
    │   │   ├── Carousel.tsx
    │   │   ├── CategoriesRestaurant.tsx
    │   │   ├── FoodCard.tsx
    │   │   ├── FoodItemsCard.tsx
    │   │   ├── Greeting.tsx
    │   │   ├── Map.tsx
    │   │   ├── NavBar.tsx
    │   │   ├── NearDishCard.tsx
    │   │   ├── Reviews.tsx
    │   │   ├── SlickCarousel.tsx
    │   │   └── SloganBox.tsx
    │   ├── profile/
    │   │   ├── EditProfileButton.tsx
    │   │   ├── Name_Phone.tsx
    │   │   ├── SettingMenu.tsx
    │   │   ├── TextEditFields.tsx
    │   │   └── UserInfo.tsx
    │   ├── restaurant_profile/
    │   │   ├── DrinkSection.tsx
    │   │   ├── Looks.tsx
    │   │   ├── MenuSection.tsx
    │   │   ├── ProfileHeader.tsx
    │   │   └── WavePulse.tsx
    │   ├── scanner/
    │   │   └── TopText.tsx
    │   ├── seller_profile/
    │   │   ├── InformationSection.tsx
    │   │   └── ProfileSection.tsx
    │   └── viewScreens/
    │       ├── BigImage.tsx
    │       ├── Edit.tsx
    │       ├── FoodDescription.tsx
    │       ├── Icons.tsx
    │       ├── Increment_Decrement.tsx
    │       ├── ItemName.tsx
    │       ├── List.tsx
    │       ├── LoadingScreen.tsx
    │       ├── Love.tsx
    │       ├── Price.tsx
    │       ├── RecentSearchBar.tsx
    │       ├── ReviewSection.tsx
    │       ├── Time_FeedBack.tsx
    │       └── TopBar.tsx
    ├── context/
    │   ├── AppProvider.js
    │   ├── useReducerRestaurant.js
    │   ├── useReducerUser.js
    │   ├── userReducerFood.js
    │   └── ProvideFunction/
    │       └── Logout.js
    ├── drawernavigator/
    │   └── DrawerNavigator.tsx
    ├── screens/
    │   ├── auth/
    │   │   ├── ForgetPassword.tsx
    │   │   ├── LoginScreens.tsx
    │   │   ├── SignupScreen.tsx
    │   │   └── VerificationScreen.tsx
    │   ├── payment/
    │   │   └── MethodSelection.tsx
    │   ├── tabScreens/
    │   │   ├── Chat.tsx
    │   │   ├── ChatContent.tsx
    │   │   ├── CustomerProfile.tsx
    │   │   ├── Favourite.tsx
    │   │   ├── FavouriteContent.tsx
    │   │   ├── Home.tsx
    │   │   ├── Profile.tsx
    │   │   ├── ProfileContent.tsx
    │   │   ├── Scanner.tsx
    │   │   └── TabBars.tsx
    │   └── viewScreens/
    │       ├── AboutScreen.tsx
    │       ├── AccountSwitch.tsx
    │       ├── AuthPrompt.tsx
    │       ├── CustomSnackbar.tsx
    │       ├── FoodList.tsx
    │       ├── Inbox.tsx
    │       ├── PirvacyAndSecurity.tsx
    │       ├── ProfileUpdation.tsx
    │       ├── RestaurantProfile.tsx
    │       ├── SearchScreen.tsx
    │       ├── SkeletonPaper.tsx
    │       ├── SnackBar.tsx
    │       └── ViewFood.tsx
    ├── sellerScreen/
    │   ├── AddFood.tsx
    │   ├── CreateSellerAccount.tsx
    │   ├── Menu.tsx
    │   ├── Notifications.tsx
    │   ├── RegistrationScreen.tsx
    │   ├── RestaurantNotification.tsx
    │   ├── SellerProfile.tsx
    │   └── SellerSetting.tsx
    └── style/
        └── style.js

================================================
File: App.js
================================================
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import LoginScreens from './screens/auth/LoginScreens';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import SignupScreen from './screens/auth/SignupScreen';
import ForgetPassword from './screens/auth/ForgetPassword';
import VerificationScreen from './screens/auth/VerificationScreen';
import TabBars from './screens/tabScreens/TabBars';
import { AppProvider } from './context/AppProvider';
import { useFonts } from 'expo-font';
import * as SplashScreen from 'expo-splash-screen';
import { useEffect } from 'react'
import ViewFood from './screens/viewScreens/ViewFood';
import FoodList from './screens/viewScreens/FoodList';
import Inbox from './screens/viewScreens/Inbox';
import SearchScreen from './screens/viewScreens/SearchScreen';
import ProfileUpdation from './screens/viewScreens/ProfileUpdation';
import PrivacyAndSecurity from './screens/viewScreens/PirvacyAndSecurity';
import AboutScreen from './screens/viewScreens/AboutScreen';
import RestaurantProfile from './screens/viewScreens/RestaurantProfile';
import RegistrationScreen from './sellerScreen/RegistrationScreen';
import AccountSwitch from './screens/viewScreens/AccountSwitch';
import SellerSetting from './sellerScreen/SellerSetting';
import Home from './screens/tabScreens/Home';
import MethodSelection from './screens/payment/MethodSelection';
import { StatusBar } from 'expo-status-bar';





SplashScreen.preventAutoHideAsync();
const Stack = createStackNavigator();

export default function App() {
  const [loaded, error] = useFonts({
    'jakarta_bold': require('./assets/fonts/PlusJakartaSans-ExtraBold.ttf'),
    'jakarta_regular': require('./assets/fonts/PlusJakartaSans-Regular.ttf'),
    'inter_semibold': require('./assets/fonts/Inter_28pt-SemiBold.ttf'),
    'noto_regular': require('./assets/fonts/NotoSans_Condensed-Regular.ttf'),
    'montserrat_bold': require('./assets/fonts/Montserrat-ExtraBold.ttf'),
    'montserrat_regular': require('./assets/fonts/Montserrat-Regular.ttf'),
    'montserrat_semibold': require('./assets/fonts/Montserrat-SemiBold.ttf'),
    'pacifico': require('./assets/fonts/Pacifico-Regular.ttf'),
    'poppins_regular': require('./assets/fonts/Poppins-Regular.ttf'),
    'poppins_bold': require('./assets/fonts/Poppins-Bold.ttf'),
    'poppins_semibold': require('./assets/fonts/Poppins-SemiBold.ttf'),
    'LeckerliOne_regular': require('./assets/fonts/LeckerliOne-Regular.ttf'),
  });
  useEffect(() => {
    if (loaded || error) {
      SplashScreen.hideAsync();
    }
  }, [loaded, error]);

  if (!loaded && !error) {
    return null;
  }
  return (
    <AppProvider > 
      <SafeAreaProvider >
             <StatusBar hidden={false} backgroundColor='#ffffff' style='dark' />
        <NavigationContainer>
          <Stack.Navigator initialRouteName='TabBars' >
            <Stack.Screen name="LoginScreens" component={LoginScreens} options={{ headerShown: false }} />
            <Stack.Screen name="SignupScreen" component={SignupScreen} options={{ headerShown: false }} />
            <Stack.Screen name="ForgetPassword" component={ForgetPassword} options={{ headerShown: false }} />
            <Stack.Screen name="VerificationScreen" component={VerificationScreen} options={{ headerShown: false }} />
            <Stack.Screen name="TabBars" component={TabBars} options={{ headerShown: false }} />
            <Stack.Screen name="ViewFood" component={ViewFood} options={{ headerShown: false }} />
            <Stack.Screen name="FoodList" component={FoodList} options={{ headerShown: false }} />
            <Stack.Screen name="Inbox" component={Inbox} options={{ headerShown: false }} />
            <Stack.Screen name="SearchScreen" component={SearchScreen} options={{ headerShown: false }} />
            <Stack.Screen name="ProfileUpdation" component={ProfileUpdation} options={{ headerShown: false }} />
            <Stack.Screen name="PrivacyAndSecurity" component={PrivacyAndSecurity} options={{ headerShown: false }} />
            <Stack.Screen name="AboutScreen" component={AboutScreen} options={{ headerShown: false }} />
            <Stack.Screen name="RestaurantProfile" component={RestaurantProfile} options={{ headerShown: false }} />
            <Stack.Screen name="AccountSwitch" component={AccountSwitch} options={{ headerShown: false }} />
            <Stack.Screen name="RegistrationScreen" component={RegistrationScreen} options={{ headerShown: false }} />
            <Stack.Screen name="SellerSetting" component={SellerSetting} options={{ headerShown: false }} />
            <Stack.Screen name="Home" component={Home} options={{ headerShown: false }} />
            <Stack.Screen name="MethodSelection" component={MethodSelection} options={{ headerShown: false }} />
          </Stack.Navigator>
        </NavigationContainer>
      </SafeAreaProvider>
    </AppProvider>
  );
}


================================================
File: Scaling.js
================================================
// utils/scaling.js
import { Dimensions } from 'react-native';

const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');

// Base dimensions (from your design's screen size)
const BASE_WIDTH = 450;
const BASE_HEIGHT = 961;

// Scaling functions
export const scaleWidth = (size) => (SCREEN_WIDTH / BASE_WIDTH) * size;
export const scaleHeight = (size) => (SCREEN_HEIGHT / BASE_HEIGHT) * size;


================================================
File: StockFile.txt
================================================
import { Alert } from "react-native";
export const handleLogout = async (setisLoading, clearAllData, navigation) => {
  Alert.alert(
    "",
    "Are you want to logout?",
    [
      {
        text: "Cancel",
        onPress: () => console.log("Cancel Pressed"),
        style: "cancel",
      },
      {
        text: "Logout",
        onPress: async () => {
          setisLoading(true);
          await clearAllData();
          setisLoading(false);
          // navigation.dispatch(
          //     CommonActions.reset({
          //         index: 0,
          //         routes: [{ name: 'LoginScreens' }],
          //     })
          // );
          navigation.navigate("TabBars", { screen: "Home" });
        },
      },
    ],
    { cancelable: false }
  );
};


================================================
File: app.json
================================================
{
  "expo": {
    "name": "FadeFood",
    "slug": "FadeFood",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon_final.png",
    "userInterfaceStyle": "light",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      }
    },
    "web": {
      "favicon": "./assets/favicon.png"
    },
    "plugins": [
      "expo-font",
      [
        "expo-camera",
        {
          "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera",
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone",
          "recordAudioAndroid": true
        }
      ]
    ]
  }
}


================================================
File: babel.config.js
================================================
module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};


================================================
File: declaration.d.ts
================================================
declare module '*.jpg' {
    const value: any;
    export default value;
  }
  
  declare module '*.jpeg' {
    const value: any;
    export default value;
  }
  
  declare module '*.png' {
    const value: any;
    export default value;
  }

================================================
File: package.json
================================================
{
  "name": "fadefood",
  "version": "1.0.0",
  "main": "expo/AppEntry.js",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@expo-google-fonts/inter": "^0.2.3",
    "@expo-google-fonts/quicksand": "^0.2.3",
    "@expo/metro-runtime": "~3.2.3",
    "@react-native-picker/picker": "^2.9.0",
    "@react-navigation/bottom-tabs": "^6.6.1",
    "@react-navigation/drawer": "^7.1.1",
    "@react-navigation/material-top-tabs": "^6.6.14",
    "@react-navigation/native": "^6.1.18",
    "@react-navigation/stack": "^6.4.1",
    "@rneui/base": "^4.0.0-rc.8",
    "@rneui/themed": "^4.0.0-rc.8",
    "@types/react": "~18.2.79",
    "axios": "^1.7.7",
    "expo": "~51.0.28",
    "expo-app-loading": "^2.1.1",
    "expo-av": "^14.0.7",
    "expo-camera": "~15.0.16",
    "expo-font": "~12.0.10",
    "expo-image-picker": "^15.0.7",
    "expo-linear-gradient": "~13.0.2",
    "expo-secure-store": "^13.0.2",
    "expo-splash-screen": "~0.27.6",
    "expo-status-bar": "~1.12.1",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-native": "0.74.5",
    "react-native-gesture-handler": "~2.16.1",
    "react-native-pager-view": "6.3.0",
    "react-native-reanimated": "~3.10.1",
    "react-native-safe-area-context": "4.10.5",
    "react-native-tab-view": "^3.5.2",
    "react-native-vector-icons": "^10.2.0",
    "react-native-web": "~0.19.10",
    "typescript": "~5.3.3"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@types/react-native-vector-icons": "^6.4.18"
  },
  "private": true
}


================================================
File: service.js
================================================
import axios from "axios";
import * as SecureStore from "expo-secure-store";
import { Alert } from "react-native";

export const baseURL = "http://192.168.1.65:5555/";
// export const baseURL = "http://192.168.67.215:5555/";

// Store both access and refresh tokens
const storeTokens = async (accessToken, refreshToken) => {
  try {
    await SecureStore.setItemAsync("access_token", accessToken);
    await SecureStore.setItemAsync("refresh_token", refreshToken);
  } catch (error) {
    console.error("Error storing the tokens", error);
  }
};

// Retrieve access token
const getAccessToken = async () => {
  try {
    return await SecureStore.getItemAsync("access_token");
  } catch (error) {
    console.error("Error retrieving the access token", error);
    return null;
  }
};

// Retrieve refresh token
const getRefreshToken = async () => {
  try {
    return await SecureStore.getItemAsync("refresh_token");
  } catch (error) {
    console.error("Error retrieving the refresh token", error);
    return null;
  }
};

// Clear tokens from secure storage
export const clearTokens = async () => {
  try {
    await SecureStore.deleteItemAsync("access_token");
    await SecureStore.deleteItemAsync("refresh_token");
    console.log("Tokens cleared");
  } catch (error) {
    console.error("Error clearing tokens", error);
  }
};

// clearTokens();



// Set up base URL for your Django API
const api = axios.create({
  baseURL: "http://192.168.1.65:5555/",
  // // baseURL: "http://192.168.55.215:5555/",
  // baseURL: "http://192.168.43.92:5555/",
  // baseURL: "http://192.168.46.163:5555/",
  // http://192.168.67.215:5555/
  
});

// Function for signup
export const signup = async (data) => {
  try {
    const response = await api.post("create_user/", data); 
    if (response.data.access && response.data.refresh) {
      await storeTokens(response.data.access, response.data.refresh);
      console.log("Token stored--------BY SIGNUP");
      return { success: true, message: response.data.ofBackendMessage };
    }
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.ofBackendMessage || "Signup failed",
    };
  }
};

// Function for login
export const login = async (data) => {
  try {
    // const response = await api.post("login/", data);
    const response = await api({
      method: "post",
      url: "login_user/",
      data: data,
    });
    if (response.data.access && response.data.refresh) {
      await storeTokens(response.data.access, response.data.refresh); // Store both tokens
      console.log("Token stored--------BY LOGIN");
      return { success: true, message: response.data.ofBackendMessage };
    }
  } catch (error) {
    return { success: false, message: error.response?.data?.ofBackendMessage };
  }
};

// Refresh access token using the refresh token
 const refreshAccessToken = async () => {
  const refreshToken = await getRefreshToken();
  if (!refreshToken) return null;

  try {
    const response = await api.post("refresh_token/", {
      refresh: refreshToken,
    });
    await storeTokens(response.data.access, refreshToken); // Store new access token
    console.log("Token refreshed----------------------hureyyyyyyyyy");
    return { success: true, data: response.data.access, message: response.data.ofBackendMessage}
  } catch (error) {
    console.error("Error refreshing access token", error);
     //we need to implement login again
    await clearTokens();
    Alert.alert("Session expired", "Please log in again" , [
      // { text: "OK", onPress: () => navigation.navigate("Login") },
    ]);


    return null;
  }
};

// Handle POST requests, automatically handling token refresh on failure
export const post_data = async (endpoint, data) => {
  let token = await getAccessToken();
  if (!token) {
    return { success: false, data: "No token found. Please log in again." };
  }

  try {

    const response = await api.post(`${endpoint}/`, data, {
      headers: { 
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}` 
    
    },
      
    });
    if (response.data.access) {
      await storeTokens(response.data.access, response.data.refresh); // Store both tokens
    }
    return {
      success: true,
      data: response.data.ofBackendData,
      images: response.data.ofFoodImages,
      ofBackendMessage: response.data.ofBackendMessage,
    };
  } catch (error) {
    // If token is expired, try refreshing it
    if (error.response?.status === 401) {
      const newToken = await refreshAccessToken();
      if (newToken) {
        return post_data(endpoint, data); // Retry the request with the new token
      }
    }
    return {
      success: false,
      data: error.response?.data?.ofBackendMessage || "Something went wrong",
    };
  }
};

// Handle GET requests, checking token validity and refreshing if needed
export const get_data = async (endpoint) => {
  let token = await getAccessToken();
  if (!token) {
    return { success: false, data: "No token found. Please log in again." };
  }

  try {
    const response = await api.get(`${endpoint}/`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    return { success: true, data: response.data.ofBackendData };
  } catch (error) {
    if (error.response?.status === 401) {
      console.log("get data calling refresh token");
      const newToken = await refreshAccessToken();
      if (newToken) {
        return get_data(endpoint); // Retry the GET request with the new token
      }
    }
    return {
      success: false,
      data: error.response?.data?.ofBackendMessage || "Something went wrong by get_data",
    };
  }
};

//get_data_with_id function
export const get_data_with_id = async (endpoint, data) => {
  let token = await getAccessToken();
  if (!token) {
    return { success: false, data: "No token found. Please log in again." };
  }

  try {
    const response = await api.get(`${endpoint}/`, {
      headers: { Authorization: `Bearer ${token}` },
      params: data,
    });
    return { success: true, data: response.data.ofBackendData };
  } catch (error) {
    if (error.response?.status === 401) {
      console.log("get_data_with_id calling refresh token");
      const newToken = await refreshAccessToken();
      if (newToken) {
        return get_data_with_id(endpoint, data); // Retry the GET request with the new token
      }
    }
    return {
      success: false,
      data: error.response?.data?.ofBackendMessage || "Something went wrong",
    };
  }
}

//export post function for profile picture
export const post_data_with_img = async (hitpoint, text_data, food_image, method) => {
  const token = await getAccessToken();
  if (!token) {
    return { success: false, data: "No token found. Please log in again." };
  }

  const formData = new FormData();

  // Append text data
  Object.keys(text_data).forEach((key) => {
    formData.append(key, text_data[key]);
  });

  console.log("Here");


  // Append images
  if (food_image) {
    // console.log(food_image)
    // console.log('appending multiple images')
    // console.log("Here2");
    // Add images to FormData
    //
    // if (food_image && Array.isArray(food_image)) {
    //   const filteredImages = food_image.filter( image => !image.startsWith('/media'));
    //   console.log('filteredImages-->',filteredImages)
    //   console.log("Here3");
      
    //   filteredImages.forEach((imageUri, index) => {
    //     formData.append("images", {
          
    //       uri: imageUri,
    //       type: "image/jpeg",
    //       name: `food_image_${index}.jpg`,
    //     });
    //     console.log("Here4");
    //   });
    // } 

    if(food_image && Array.isArray(food_image)){
       //filtred the images from this array [{id:1, image: 'image1'}, {id:2, image: 'image2'}]  to ['image1', 'image2'] and only filtred those image startsWith '/media'
      const filteredImages = food_image.map( image => image.image).filter( image => !image.startsWith('/media'));

      console.log('filteredImages-->',filteredImages)
      filteredImages.forEach((img, index) => {
        formData.append("images", {
          uri: img,
          type: "image/jpeg" || "image/png", // Adjust type as needed
          name: `food_image_${index}.jpg` || `food_image_${index}.png`,
        });
      })
    }
    else {
      console.log('appending single image')
      // Handle a single image
      formData.append("image", {
        uri: images,
        type: "image/jpeg", // Adjust type as needed
        name: `food_image_${index}.jpg`,
      });
    }
  }

  try {
    console.log('here5')
    const response = await api({
      method: method,
      url: `${hitpoint}/`,
      data: formData,
      headers: {
        "Content-Type": "multipart/form-data",
        Authorization: `Bearer ${token}`,
      },
    });
    console.log('here6')
    return { success: true, data: response.data.ofBackendData , ofBackendMessage: response.data.ofBackendMessage };
  } catch ( error) {       
    console.log(error)
    if (error.response?.status === 401) {
      console.log("post_data_with_img calling refresh token");
      const newToken = await refreshAccessToken();
      if (newToken) {
        return post_data_with_img(hitpoint, text_data, food_image, method); // Retry the request with new token
      }
    }
    return {
      success: false,
      data: error.response?.data?.ofBackendMessage || "Something went wrong",
    };
  }
};

//Function to delete the data
export const delete_data = async (endpoint) => {
  const token = await getAccessToken();
  if (!token) {
    return { success: false, data: "No token found. Please log in again." };
  }

  try {
    const response = await api.delete(`${endpoint}/`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    return { success: true, data: response.data.ofBackendMessage };
  } catch (error) {
    if (error.response?.status === 401) {
      console.log("delete_data calling refresh token");
      const newToken = await refreshAccessToken();
      if (newToken) {
        return delete_data(endpoint); 
      }
    }
    return {
      success: false,
      data: error.response?.data?.ofBackendMessage || "Something went wrong",
    };
  }
};

//function to update data
export const update_data = async (endpoint, data) => {
  const token = await getAccessToken();
  if (!token) {
    return { success: false, data: "No token found. Please log in again." };
  }

  try {
    const response = await api.put(`${endpoint}/`, data, {
      headers: { Authorization: `Bearer ${token}` },
    });
    return {
      success: true,
      data: response.data.ofBackendData,
      ofBackendMessage: response.data.ofBackendMessage,
    };
  } catch (error) {
    if (error.response?.status === 401) {
      console.log("update_data calling refresh token");
      const newToken = await refreshAccessToken();
      if (newToken) {
        return update_data(endpoint, data); // Retry the GET request with the new token
      }
    }
    return {
      success: false,
      data: error.response?.data?.ofBackendMessage || "Something went wrong",
    };
  }
};

//delete function with id
export const delete_data_with_id = async (endpoint, data) => {
  const token = await getAccessToken();
  if (!token) {
    return { success: false, data: "No token found. Please log in again." };
  }

  try {
    const response = await api.delete(`${endpoint}/`, {
      headers: { Authorization: `Bearer ${token}` },
      data,
    });
    return { success: true, data: response.data.ofBackendMessage };
  } catch (error) {
    console.log("here");
    if (error.response?.status === 401) {
      console.log("here2");
      console.log("delete_data_with_id calling refresh token");
      const newToken = await refreshAccessToken();
      if (newToken) {
        return delete_data_with_id(endpoint, data); // Retry the GET request with the new token
      }
    }
    return {
      success: false,
      data: error.response?.data?.ofBackendMessage || "Something went wrong",
    };
  }
};


================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {},
  "extends": "expo/tsconfig.base"
}


================================================
File: apis/getAllFoods.js
================================================
import { get_data } from "../service";
export const getAllFood = async (food_dispatch) => {
  const responsebyfood = await get_data("get_all_food");
  if (responsebyfood.success) {
    console.log("################get all food#####################------------>", responsebyfood.data );
    food_dispatch({ type: "SET_FOOD_LIST", payload: responsebyfood.data });
    console.log("food state is settt");
  } else {
    console.log("Error", responsebyfood.data);
  }
};


================================================
File: apis/getRestaurantFood.js
================================================

import { get_data } from "../service";
export const getAllFood = async (food_dispatch) => {
  const responsebyfood = await get_data("get_food");
  if (responsebyfood.success) {
    console.log("################get all food#####################------------>", responsebyfood.data );
    food_dispatch({ type: "SET_FOOD_LIST", payload: responsebyfood.data });
    console.log("food state is settt");
  } else {
    console.log("Error", responsebyfood.data);
  }
};


================================================
File: apis/getRestaurantInformation.js
================================================
    import { get_data, get_data_with_id } from "../service";
    export const getRestaurantInformation = async (seller_dispatch,id,initialseller_state) => {

        const response = id? await get_data_with_id("get_specific_restaurant", { restaurant_name: id }): await get_data("get_restaurant");
        if (response.success) {
          console.log(response.data);
    
          Object.entries(response.data).forEach(([key, value]) => {
            if (initialseller_state.hasOwnProperty(key)) {
              seller_dispatch({ type: "SET_DATA", key, payload: value });
            }
          });
          
        } else {
          console.log("Error", response.data);
        }
    }
    

================================================
File: apis/getUserInformation.js
================================================
import { get_data } from "../service";
export const getUserInformation = async (dispatch, setisLogged) => {
  const response = await get_data("get_user_details");
  if (response.success) {
    console.log(response.data);
    setisLogged(true);
    dispatch({ type: "name", payload: response.data.name });
    dispatch({ type: "phone", payload: response.data.phone });
    dispatch({ type: "email", payload: response.data.email });
    dispatch({ type: "role", payload: response.data.role });
    dispatch({
      type: "profile_picture",
      payload: response.data.profile_picture.startsWith("http")
        ? response.data.profile_picture
        : `http://192.168.1.64:5555${response.data.profile_picture}`,
    });
  } else {
    console.log(response.data);
  }
};


================================================
File: components/auth/Button.tsx
================================================
import { Text,TouchableOpacity } from 'react-native'
import React from 'react'
import { scaleWidth } from '../../Scaling'

const Button = ({style,btnText,handleAuthBtn}) => {
    return (
        <>
            <TouchableOpacity style={style} onPress={handleAuthBtn}>
                <Text style={{ fontFamily:'poppins_semibold', fontSize: scaleWidth(18),color:'#FFFFFF' }}>{btnText}</Text>
            </TouchableOpacity>
        </>
    )
}

export default Button


================================================
File: components/auth/IntroText.tsx
================================================
import { Text, View, Dimensions } from 'react-native'
import React from 'react'
import { scaleWidth } from '../../Scaling'

const { width } = Dimensions.get('window')

const IntroText = ({ headingText, line1, line2, style }) => {
    return (
        <>
            <View style={style}>
                <Text style={{ fontSize: scaleWidth(30), color: '#000000', fontFamily: 'poppins_bold' }}>
                    {headingText}{"\n"}{line1}{"\n"}{line2}
                </Text>
            </View>
        </>
    )
}

export default IntroText



================================================
File: components/auth/UserInput.tsx
================================================
import { StyleSheet, TextInput, View, Text, TouchableOpacity } from 'react-native'
import React from 'react'
import IconIon from 'react-native-vector-icons/Ionicons'
import { scaleWidth } from '../../Scaling'

const UserInput = ({ value, onChangeText, inputBoxStyle, inputTopic, authBox, isEyeNeeded, passwordVisible, togglePasswordVisibility }) => {

  return (
    <>
      <View style={authBox}>
        <Text style={{ color: '#757575', fontFamily:'poppins_semibold',fontSize:scaleWidth(12) }}>{inputTopic}</Text>
        <View style={{ flexDirection: 'row', justifyContent: 'flex-start', alignItems: 'center' }}>
          <TextInput
            value={value}
            onChangeText={onChangeText}
            selectionColor="#BDBDBD"
            style={[inputBoxStyle, { width: isEyeNeeded ? '80%' : '100%' }]}
            placeholderTextColor='#adb5bd'
            secureTextEntry={isEyeNeeded ? passwordVisible : false}
          />
          {
            isEyeNeeded ? (
              <TouchableOpacity onPress={togglePasswordVisibility}>
                <IconIon style={{ marginLeft:scaleWidth(10) }} name={passwordVisible ? 'eye-off-outline' : 'eye-outline'} size={scaleWidth(40)} />
              </TouchableOpacity>
            ) : null
          }
        </View>
      </View>

    </>
  )
}

export default UserInput



================================================
File: components/chat/MsgBox.tsx
================================================
import { StyleSheet, Text, View,Dimensions } from 'react-native'
import React from 'react'
import { scaleWidth } from '../../Scaling'


const { width } = Dimensions.get('window')
const MsgBox = ({item}) => {
  return (
    <View style={[item.sender ? styles.senderMsg : styles.receiverMsg]}>
      <Text style={{ color: 'black',fontSize:scaleWidth(16)}}>{item.text}</Text>
    </View>
  )
}

const styles = StyleSheet.create({
  senderMsg: {
      alignSelf: 'flex-end', 
      backgroundColor: '#80ed99', 
      borderTopLeftRadius: scaleWidth(10),
      borderTopRightRadius: scaleWidth(10),
      borderBottomLeftRadius: scaleWidth(10),
      padding: width * 0.022, 
      marginBottom: width * 0.022, 
      maxWidth: '70%',
      // transform: [{ rotate: '-70deg' }],
      
  },
  receiverMsg: {
      alignSelf: 'flex-start', 
      backgroundColor: '#ffffff', 
      borderTopLeftRadius: scaleWidth(10),
      borderTopRightRadius: scaleWidth(10),
      borderBottomRightRadius: scaleWidth(10),
      padding: width * 0.022, 
      marginBottom: width * 0.022,
      maxWidth: '70%', 
  }})

export default MsgBox



================================================
File: components/chat/RestaurantMsg.tsx
================================================
import { StyleSheet, Text, View, Dimensions, Image } from 'react-native';
import React from 'react';
import { TouchableWithoutFeedback } from 'react-native-gesture-handler';
import grey from '../../assets/grey.png';
import { scaleHeight, scaleWidth } from '../../Scaling';

const { width, height } = Dimensions.get('window');

const RestaurantMsg = ({ navigation }) => {
    return (
        <TouchableWithoutFeedback
            style={styles.container}
            onPress={() => navigation.navigate('Inbox')}
        >
            <View style={styles.imageContainer}>
                <Image resizeMode='contain' style={styles.image} source={grey} />
            </View>
            <View style={styles.textContainer}>
                <Text style={styles.restaurantName}>Delicious Restaurant</Text>
                <Text style={styles.message}>Your food is ready, sir</Text>
            </View>
        </TouchableWithoutFeedback>
    );
};

export default RestaurantMsg;

const styles = StyleSheet.create({
    container: {
        height: height * 0.08,
        width: width,
        backgroundColor: '#F0F4F8',
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: scaleWidth(15),
    },
    imageContainer: {
        backgroundColor: 'black',
        height: scaleHeight(60),
        width: scaleWidth(60),
        borderRadius: scaleWidth(30),
        justifyContent: 'center',
        alignItems: 'center',
    },
    image: {
        height: '100%',
        width: '100%',
    },
    textContainer: {
        flexDirection: 'column',
        justifyContent: 'center',
        marginLeft: scaleWidth(10),
    },
    restaurantName: {
        fontFamily: 'jakarta_bold',
        color: 'grey',
        fontSize: scaleWidth(18),
    },
    message: {
        // fontFamily: 'inter_semibold',
        color: 'grey',
        fontSize: scaleWidth(14),
    },
});


================================================
File: components/home/Carousel.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Dimensions,
  Animated,
} from 'react-native';
import PagerView from 'react-native-pager-view';

const { width } = Dimensions.get('window');
const CARD_WIDTH = width * 0.7;
const CARD_HEIGHT = CARD_WIDTH * 1.4;

const CardsCarousel = () => {
  const [currentPage, setCurrentPage] = useState(0);

  const cards = [
    { id: 1, title: 'Card 1', color: '#FF6B6B' },
    { id: 2, title: 'Card 2', color: '#4ECDC4' },
    { id: 3, title: 'Card 3', color: '#45B7D1' },
    { id: 4, title: 'Card 4', color: '#96CEB4' },
    { id: 5, title: 'Card 5', color: '#FFBE0B' },
  ];

  const renderCard = (item, index) => {
    const isCenter = index === currentPage;
    
    return (
      <View
        style={[
          styles.cardContainer,
          {
            transform: [{ scale: isCenter ? 1 : 0.8 }],
          },
        ]}
      >
        <View
          style={[
            styles.card,
            {
              backgroundColor: item.color,
            },
          ]}
        >
          <Text style={styles.cardTitle}>{item.title}</Text>
          <Text style={styles.cardSubtitle}>Swipe to see more</Text>
        </View>
      </View>
    );
  };

  return (
    <View style={styles.container}>
      <PagerView
        style={styles.pagerView}
        initialPage={0}
        onPageSelected={(e) => setCurrentPage(e.nativeEvent.position)}
        pageMargin={-40} // Adjust this value to control card overlap
        orientation="horizontal"
      >
        {cards.map((card, index) => (
          <View key={card.id} style={styles.pageContainer}>
            {renderCard(card, index)}
          </View>
        ))}
      </PagerView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
    // zIndex: 1,
  },
  pagerView: {
    flex: 1,
  },
  pageContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  cardContainer: {
    width: CARD_WIDTH,
    height: CARD_HEIGHT,
    justifyContent: 'center',
    alignItems: 'center',
  },
  card: {
    width: '100%',
    height: '100%',
    borderRadius: 20,
    padding: 20,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  cardTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 10,
  },
  cardSubtitle: {
    fontSize: 16,
    color: 'rgba(255, 255, 255, 0.8)',
  },
});

export default CardsCarousel;

================================================
File: components/home/CategoriesRestaurant.tsx
================================================
import { StyleSheet, Text, View,Image } from 'react-native'
import React from 'react'
import { scaleHeight, scaleWidth } from '../../Scaling'
import { TouchableOpacity } from 'react-native-gesture-handler'


const CategoriesRestaurant = ({dishImage,dishName}) => {
  return (
    <TouchableOpacity style={{ backgroundColor: '#ffffff', height: scaleHeight(90), width: scaleWidth(70), justifyContent: 'center', alignItems: 'center', padding: 4, borderRadius: 6 }}>
    <View style={{ height: '80%', width: '100%' }}>
      <Image style={{ height: '100%', width: '100%' }} resizeMode='contain' source={dishImage}>

      </Image>
    </View>
    <View style={{height:'20%',width:'100%'}}>
     <Text style={{fontSize:scaleWidth(12),fontFamily:'poppins_regular'}}>{dishName}</Text>
    </View>

  </TouchableOpacity>
  )
}

export default CategoriesRestaurant



================================================
File: components/home/FoodCard.tsx
================================================
import { View, Text, Image, StyleSheet, TouchableOpacity } from "react-native"
import { AntDesign, Ionicons } from "@expo/vector-icons"
import { scaleWidth, scaleHeight } from "../../Scaling"
import { baseURL } from "../../service"

const FoodCard = ({ item, handleToFoodViewPage, onAddToCart }) => {
  return (
    <TouchableOpacity style={styles.card} onPress={handleToFoodViewPage}>
      <Image source={{  uri: `${baseURL}${item.images[0].image}` }} style={styles.image} resizeMode="cover" />
      <View style={styles.infoContainer}>
        <View style={styles.titleContainer}>
          <Text style={styles.title} numberOfLines={1}>
           {item.food_name}
          </Text>
          {true && (
            <View style={styles.vegIndicator}>
              <Ionicons name="leaf" size={12} color="#4CAF50" />
            </View>
          )}
        </View>

        {/* // food_picture={item.images.length > 0 ? item.images[0].image : null}
                  // price={item.food_price}
                  // restaurant_name={item.food_restaurant || 'KFC'}
                  // discount={item.discount || 12}
                  // foodName={item.food_name}
                  // no_fragments={null}
                  // eatsNumber={item.totol_eats || 120}
                  // rating={item.rating || 3.5}
                  // location={item.food_location || 'Kathmandu, Thamel'} */}
        <Text style={styles.restaurant} numberOfLines={1}>
         {item.food_restaurant}
        </Text>
        <View style={styles.detailsContainer}>
          <View style={styles.ratingContainer}>
            <AntDesign name="star" size={14} color="#FFD700" />
            <Text style={styles.rating}>{item.rating}</Text>
          </View>
          <Text style={styles.price}>₹ {item.food_price}</Text>
        </View>
      </View>
      <TouchableOpacity style={styles.addButton} onPress={onAddToCart}>
        <AntDesign name="plus" size={20} color="#FFFFFF" />
      </TouchableOpacity>
    </TouchableOpacity>
  )
}

const styles = StyleSheet.create({
  card: {
    backgroundColor: "#FFFFFF",
    borderRadius: scaleWidth(12),
    marginBottom: scaleHeight(16),
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    // elevation: 3,
    flexDirection: "row",
    overflow: "hidden",
  },
  image: {
    width: scaleWidth(100),
    height: scaleHeight(120),
  },
  infoContainer: {
    flex: 1,
    padding: scaleWidth(8),
  },
  titleContainer: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: scaleHeight(4),
  },
  title: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(16),
    color: "#333333",
    flex: 1,
  },
  vegIndicator: {
    marginLeft: scaleWidth(8),
    padding: scaleWidth(2),
    borderRadius: scaleWidth(4),
    backgroundColor: "#E8F5E9",
  },
  restaurant: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(12),
    color: "#757575",
    marginBottom: scaleHeight(4),
  },
  detailsContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "flex-start",
    gap:scaleWidth(3),
  },
  ratingContainer: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#FFF9C4",
    paddingHorizontal: scaleWidth(6),
    paddingVertical: scaleHeight(2),
    borderRadius: scaleWidth(4),
  },
  rating: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(12),
    color: "#333333",
    marginLeft: scaleWidth(4),
  },
  time: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(12),
    color: "#757575",
  },
  price: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(14),
    color: "#4CAF50",
  },
  addButton: {
    position: "absolute",
    bottom: scaleHeight(2),
    right: scaleWidth(2),
    backgroundColor: "#4CAF50",
    borderRadius: scaleWidth(20),
    width: scaleWidth(32),
    height: scaleWidth(32),
    justifyContent: "center",
    alignItems: "center",
  },
})

export default FoodCard



================================================
File: components/home/FoodItemsCard.tsx
================================================
import { StyleSheet, Text, View, Image, TouchableWithoutFeedback } from 'react-native';
import React, { useState, useContext } from 'react';
import MaterialCommunity from 'react-native-vector-icons/MaterialCommunityIcons';
import Ionicon from 'react-native-vector-icons/Ionicons';
import { TouchableOpacity } from 'react-native-gesture-handler';
import { styles } from '../../style/style';
// import { MyContext } from '../../context/AppProvider';

const FoodItems = ({ FoodImage, FoodPrice, TimeToCook, handleNavigation }) => {


    return (
        <TouchableWithoutFeedback onPress={handleNavigation}>
            <View style={styles.foodItemBox} >
                <View style={styles.foodImage}>
                    <Image style={{ height: '100%', width: '100%', borderTopRightRadius: 15, borderTopLeftRadius: 15 }} source={FoodImage}></Image>
                </View>
                <View style={{ paddingHorizontal: 6 }}>
                    <Text style={{ color: '#333333', fontFamily: 'montserrat_semibold' }}>Mo:Mo</Text>
                    <View style={styles.price_and_time}>
                        <View style={styles.price}>
                            <Text style={{ fontSize: 15, color: '#ff6b35', fontFamily: 'montserrat_semibold' }}>Rs.</Text>
                            <Text style={{ fontSize: 20, color: '#ff6b35', fontFamily: 'montserrat_semibold' }}>50</Text>
                        </View>
                        <View style={styles.time}>
                            <MaterialCommunity name='clock-time-eight-outline' size={15}></MaterialCommunity>
                            <Text> 20 mins</Text>
                        </View>
                    </View>
                    <View style={styles.location}>
                        <Ionicon name='location-sharp' style={{ color: 'grey' }} />
                        <Text style={{ fontSize: 12, color: 'grey', fontFamily: 'montserrat_semibold' }}>Dharan, Bhanuchowk</Text>
                    </View>

                </View>
            </View>
        </TouchableWithoutFeedback>

    );
}

export default FoodItems;




================================================
File: components/home/Greeting.tsx
================================================
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { scaleHeight, scaleWidth } from '../../Scaling';

const Greeting = ({name}) => {
  return (
    <View style={styles.container}>
      <View style={styles.greet_name}>
      <Text style={styles.greeting}>Good Afternoon, </Text>
      <Text style={styles.name}>{name || 'Foodie'}</Text>

      </View>
      <Text style={styles.subText}>What would you like to have today?</Text>
    </View>
  );
};

const styles = StyleSheet.create({
    container: {
        padding: scaleWidth(10),
        width:'100%',
        justifyContent: 'center',
      },
      greeting: {
        fontSize: scaleWidth(20),
        fontFamily: 'poppins_semibold',
        color: '#FF7F50',
        textShadowColor: 'rgba(0, 0, 0, 0.05)',
        textShadowOffset: { width: 0, height: scaleHeight(1) },
        textShadowRadius: scaleWidth(2),
      },
      name:{
        fontFamily:'poppins_semibold',
        fontSize:scaleWidth(16)
      },
      subText: {
        fontSize: scaleWidth(14),
        color: '#666',
        fontFamily: 'poppins_semibold',
        letterSpacing:scaleWidth(0.3),
        marginTop:scaleHeight(-5)
      },
      greet_name: {
        flexDirection: 'row',
        alignItems: 'center',
      },
    
});

export default Greeting;

================================================
File: components/home/Map.tsx
================================================
import { StyleSheet, Text, View,Image,Dimensions  } from 'react-native'
import React from 'react'
import { styles } from '../../style/style'
import { scaleWidth } from '../../Scaling';

const { width, height } = Dimensions.get('window');

const Map = () => {
  return (
    <View style={[styles.homeMap,{width:width}]}>
      {/* <View style={{borderColor:'#000000',width:width*0.60,height:'auto',borderBottomWidth:2}}>
        <Text style={{  fontSize:width*0.07, fontFamily:'pacifico',color:'#000000' }}>Explore your nearby</Text>
      </View> */}
    <View style={styles.map_box}>
        <Image style={{height:'100%' ,width:'100%',borderRadius:scaleWidth(20)}} resizeMode='cover' source={require('../../assets/map.jpg')}></Image>
    </View>
  </View>
  )
}

export default Map;

================================================
File: components/home/NavBar.tsx
================================================
import { StyleSheet, Text, View, Image, TouchableOpacity, Animated, Keyboard } from 'react-native'
import { TouchableWithoutFeedback } from 'react-native-gesture-handler';
import React, { useState, useEffect, useRef, forwardRef, useMemo } from 'react'
import { Feather } from '@expo/vector-icons';
import { Ionicons } from '@expo/vector-icons';
import { TextInput } from 'react-native-gesture-handler';
// import { styles } from '../../style/style'
import { Entypo } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { AntDesign } from '@expo/vector-icons';
import { scaleWidth,scaleHeight } from '../../Scaling';



const NabBar = ({ handleSearchScreen, isTextInput, isBack,navigation }) => {
  const [searchText, setSearchText] = useState('');

  const placeholders= useMemo(()=>
    [
      'Go for your favorite restaurant',
      'Mo:mo',
      'Keema Noodles',
      'Find delicious meals'
    ]
    ,[]);

  // State to keep track of current placeholder index
  const [currentPlaceholderIndex, setCurrentPlaceholderIndex] = useState(0);
  // State for fade animation
  const [fadeAnim] = useState(new Animated.Value(1));

  // Function to handle text clearing
  const handleClear = () => {
    setSearchText('');
  };

  // Store interval ID in a ref so we can clear it
  const intervalRef = useRef(null);

  useEffect(() => {
    // If there's text in the search box, clear the animation interval
    if (searchText.length > 0) {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      return;
    }

    // Only start animations if search box is empty
    const fadeOut = () => {
      Animated.timing(fadeAnim, {
        toValue: 0,
        duration: 500,
        useNativeDriver: true,
      }).start(() => {
        setCurrentPlaceholderIndex(
          (prevIndex) => (prevIndex + 1) % placeholders.length
        );
        fadeIn();
      });
    };

    const fadeIn = () => {
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 500,
        useNativeDriver: true,
      }).start();
    };

    // Start the interval only if search box is empty
    intervalRef.current = setInterval(() => {
      fadeOut();
    }, 5000);

    // Cleanup
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [searchText]); // Now depends on searchText to restart animation when text is cleared

  const handleBackButton = () => {
    Keyboard.dismiss();
    navigation.goBack();
}

  return (
    <View style={styles.navBar}>

      {isBack ? (
        <TouchableOpacity onPress={handleBackButton}>
          <AntDesign
            name='arrowleft'
            size={scaleWidth(30)}
            style={{ color: '#333333' }}
          />
        </TouchableOpacity>
      ) : (
        <View style={styles.logoContainer}>
          <Image
            source={require('../../assets/fadefood_logo.png')}
            style={styles.nav_logo}
          />
        </View>
      )
      }


      {/* <View style={{ flexDirection: 'row', width: '100%', alignItems: 'flex-start', justifyContent: 'flex-start' }}> */}
        <View style={styles.searchBar} >
          <Animated.View style={{ opacity: fadeAnim, width: '70%' }}>
            {
              isTextInput ? (
                <TextInput
                  autoFocus={true}
                  selectionColor="#BDBDBD"
                  cursorColor={'grey'}
                  style={styles.searchInput}
                  placeholder={placeholders[currentPlaceholderIndex]}
                  value={searchText}
                  onChangeText={text => setSearchText(text)}
                  returnKeyType="search"
                />
              ) : (
                <TouchableWithoutFeedback onPress={handleSearchScreen} style={{ justifyContent: 'center', height: '100%' }} >
                  <TextInput
                    selectionColor="#BDBDBD"
                    style={styles.searchInput}
                    placeholder={placeholders[currentPlaceholderIndex]}
                    value={searchText}
                    onChangeText={text => setSearchText(text)}
                    returnKeyType="search"
                    editable={false}
                  />
                </TouchableWithoutFeedback>

              )
            }

          </Animated.View>


          {searchText.length > 0 && (
            <TouchableOpacity onPress={handleClear}>
              <Entypo
                name='circle-with-cross'
                size={scaleWidth(18)}
                style={{ color: '#adb5bd' }}
              />
            </TouchableOpacity>
          )}



        <TouchableOpacity style={{height:'95%',width:'20%',backgroundColor:'#FE7240',marginLeft:'auto',borderTopRightRadius:scaleWidth(17),borderBottomRightRadius:scaleWidth(17),justifyContent:'center',alignItems:'center'}}>
          <Text  style={{ color: '#ffffff',fontSize:scaleWidth(15),fontFamily:'poppins_semibold' }}>Search</Text>
        </TouchableOpacity>
        </View>
    </View>
  )
}

export default NabBar

const styles = StyleSheet.create({
  navBar: {
    width: '100%',
    height: scaleHeight(60),
    flexDirection: 'row',
    justifyContent: 'space-evenly',
    alignItems: 'center',
    backgroundColor: '#ffffff',
    zIndex: 10,
    top: 0,
    gap: 5,
    paddingHorizontal: scaleWidth(8),
    
  },
  searchBar: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: scaleWidth(1.5),
    borderColor: '#FF885B',
    height: scaleHeight(45),
    width: '88%',
    borderRadius: scaleWidth(20),
    paddingHorizontal: scaleWidth(1),
    paddingLeft: scaleWidth(10),
  },

  searchInput: {
    height: '80%',
    color: '#666666',
    fontSize: scaleWidth(16),
    fontFamily: 'poppins_regular',
    textAlignVertical: 'bottom',
  },
  nav_logo: {
    height: scaleHeight(30),
    width: scaleWidth(30),
    resizeMode: 'cover',
  },
  logoContainer: {
    backgroundColor: 'red',
    padding: scaleWidth(8),
    borderRadius: scaleWidth(10),
  },
});


================================================
File: components/home/NearDishCard.tsx
================================================
import { StyleSheet, Text, View, Image, TouchableOpacity, TouchableWithoutFeedback } from 'react-native' // Add TouchableOpacity
import React, { useState } from 'react' // Add useState
import Price from '../viewScreens/Price'
import FontAwesome from 'react-native-vector-icons/FontAwesome'
import MaterialIcon from 'react-native-vector-icons/MaterialIcons'
import Reviews from './Reviews'
import { scaleHeight, scaleWidth } from '../../Scaling'

const NearDishCard = ({ image, price, name, reiwesNumber, rating }) => {
    // Add state for tracking favorite status
    const [isFavorite, setIsFavorite] = useState(false);

    // Toggle favorite function
    const toggleFavorite = () => {
        setIsFavorite(!isFavorite);
    };

    return (
        <TouchableOpacity style={{ height: scaleHeight(165), width: scaleWidth(150), backgroundColor: '#FFFFFF', borderRadius: scaleWidth(15), padding: 5 }}>
            <View style={{ height: '60%', flexDirection: 'row', justifyContent: 'center', alignItems: 'flex-start' }}>
                <View style={{  position: 'absolute', top:scaleHeight(-25), left: scaleWidth(-25) }}>
                    <Image resizeMode='stretch' style={{ height: scaleHeight(120), width: scaleWidth(120), }} source={image}></Image>
                </View>
                
                {/* Wrap the favorite icon in TouchableOpacity */}
                <TouchableOpacity 
                    onPress={toggleFavorite}
                    style={{ 
                        height: scaleHeight(30), 
                        width: scaleWidth(40), 
                        backgroundColor: isFavorite ? '#FF6347' : '#FFFFFF', // Change background based on state
                        borderTopRightRadius: 12, 
                        borderBottomLeftRadius: 12, 
                        marginLeft: 'auto', 
                        alignItems: 'center', 
                        justifyContent: 'center',
                    }}
                >
                    <MaterialIcon 
                        name={isFavorite ? 'favorite' : 'favorite-border'} // Change icon based on state
                        size={scaleWidth(25)} 
                        style={{ 
                            color: isFavorite ? '#8B0000' : '#8D6E63' // Change color based on state
                        }}
                    />
                </TouchableOpacity>
            </View>
            <View style={{ height: '40%', paddingHorizontal: scaleWidth(10) }}>
                <Price price={price} priceFontSize={15} />
                <Text style={{ fontFamily: 'poppins_semibold', fontSize:scaleWidth(14)  }}>{name}</Text>
                <Reviews reviewsName={'Reviews'} reviewsNumber={320} rating={4.5} />
            </View>
        </TouchableOpacity>
    )
}

export default NearDishCard

================================================
File: components/home/Reviews.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import { FontAwesome } from '@expo/vector-icons';
import { scaleHeight, scaleWidth } from '../../Scaling';

const Reviews = ({reviewsNumber,rating,reviewsName}) => {
  return (
    <View style={{ flexDirection: 'row', justifyContent: 'flex-start', alignItems: 'center', height: scaleHeight(20), gap: scaleWidth(8), marginTop: scaleHeight(-5) }}>
    <Text style={{ fontFamily: 'poppins_semibold', fontSize: scaleWidth(12), color: 'grey' }}>{reviewsNumber} {reviewsName}</Text>

    <View style={{ flexDirection: 'row', justifyContent: 'center', alignItems: 'center', gap: scaleWidth(2) }}>
        <FontAwesome name='star' size={15} color="#FFD700" />
        <Text style={{ fontFamily: 'poppins_semibold', fontSize: scaleWidth(12), color: 'grey' }}>{rating}</Text>
    </View>

</View>

  )
}

export default Reviews

const styles = StyleSheet.create({})

================================================
File: components/home/SlickCarousel.tsx
================================================
import React, { useEffect, useRef, useState } from 'react';
import { View, Image, TouchableOpacity, StyleSheet, Dimensions, Animated } from 'react-native';
import PagerView from 'react-native-pager-view';
import chicken from '../../assets/images/chicken.png';
import dishes from '../../assets/images/dishes.png';
import { scaleHeight, scaleWidth } from '../../Scaling';

const { width } = Dimensions.get('window');
const ASPECT_RATIO = 16 / 7;
const IMAGE_HEIGHT = width / ASPECT_RATIO;

const images = [dishes, chicken, dishes, dishes, dishes, dishes, dishes];

const SlickCarousel = () => {
  const [activeIndex, setActiveIndex] = useState(0);
  const pagerRef = useRef(null);
  const animatedScale = useRef(images.map(() => new Animated.Value(1))).current;
  const extendedImages = [images[images.length - 1], ...images, images[0]];

  useEffect(() => {
    const interval = setInterval(() => {
      let nextIndex = activeIndex + 1;
      if (nextIndex >= images.length) {
        pagerRef.current?.setPageWithoutAnimation(1);
        nextIndex = 0;
      } else {
        pagerRef.current?.setPage(nextIndex + 1);
      }
      setActiveIndex(nextIndex);
    }, 3000);
    return () => clearInterval(interval);
  }, [activeIndex]);

  const handlePageChange = (position) => {
    let newIndex = position - 1;
    if (position === 0) {
      pagerRef.current?.setPageWithoutAnimation(images.length);
      newIndex = images.length - 1;
    } else if (position === extendedImages.length - 1) {
      pagerRef.current?.setPageWithoutAnimation(1);
      newIndex = 0;
    }
    setActiveIndex(newIndex);
    animateDots(newIndex);
  };

  const animateDots = (newIndex) => {
    animatedScale.forEach((anim, index) => {
      Animated.timing(anim, {
        toValue: index === newIndex ? 1.3 : 1,
        duration: 300,
        useNativeDriver: false,
      }).start();
    });
  };

  return (
    <View style={styles.container}>
      <PagerView
        ref={pagerRef}
        style={{ width, height: scaleHeight(155), backgroundColor: '#ffffff' }}
        initialPage={1}
        onPageSelected={(e) => handlePageChange(e.nativeEvent.position)}
      >
        {extendedImages.map((image, index) => (
          <TouchableOpacity key={index} style={{ paddingHorizontal: scaleWidth(8) }} activeOpacity={0.9}>
            <View style={styles.imageContainer}>
              <Image resizeMode="cover" style={styles.image} source={image} />
            </View>
          </TouchableOpacity>
        ))}
      </PagerView>
      
      <View style={styles.dotsContainer}>
        {images.map((_, index) => (
          <Animated.View
            key={index}
            style={[
              styles.dot,
              {
                transform: [{ scale: animatedScale[index] }],
                backgroundColor: activeIndex === index ? '#FF7F50' : '#dadada',
                height: activeIndex === index ?  scaleWidth(10): scaleWidth(7),
                width: activeIndex === index ?  scaleWidth(10): scaleWidth(7),
              },
            ]}
          />
        ))}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    borderRadius: 20,
    marginHorizontal: 16,
  },
  imageContainer: {
    flex: 1,
    borderRadius: 20,
    overflow: 'hidden',
  },
  image: {
    width: '100%',
    height: '100%',
  },
  dotsContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: scaleHeight(10),
  },
  dot: {
    borderRadius: scaleWidth(5),
    marginHorizontal: scaleWidth(4),
  },
});

export default SlickCarousel;

================================================
File: components/home/SloganBox.tsx
================================================
import { StyleSheet, Text, View, Image, Dimensions } from 'react-native'
import React from 'react'
import { styles } from '../../style/style'
import { LinearGradient } from 'expo-linear-gradient';
const { width, height } = Dimensions.get('window');

const SloganBox = ({ solgan_line1, solgan_line2, solgan_line3 }) => {
    return (

        <LinearGradient
            style={[styles.homeHeading, { flexDirection: 'row', alignItems: 'flex-end', justifyContent: 'space-between' }]}
            colors={['#dc2f02', '#e85d04', '#f48c06']}
            start={{ x: 0, y: 0 }}
            end={{ x: 0, y: 1 }}
        >
            <View style={{ width: width * 0.73 }}>
                <Text style={styles.homeHeadingText}>{solgan_line1}</Text>
                <Text style={styles.homeHeadingText}>{solgan_line2}</Text>
                <Text style={styles.homeHeadingText}>{solgan_line3}</Text>
            </View>
            <View style={{ marginLeft: width * 0.7, position: 'absolute' }}>
                <Image resizeMode='cover' style={{ height: height * 0.17, width: width * 0.27 }} source={require('../../assets/food.png')} />
            </View>


        </LinearGradient>

    )
}

export default SloganBox



================================================
File: components/profile/EditProfileButton.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import { scaleWidth } from '../../Scaling'
import { TouchableOpacity } from 'react-native-gesture-handler'

const EditProfileButton = ({button_name,handleButton}) => {
  return (
    <TouchableOpacity style={{padding:scaleWidth(8),borderWidth:scaleWidth(1),borderColor:'grey',justifyContent:'center',alignItems:'center',borderRadius:scaleWidth(10)}} onPress={handleButton}>
    <Text style={ownstyle.text_style}>{button_name}</Text>
  </TouchableOpacity>
  )
}

export default EditProfileButton

const ownstyle = StyleSheet.create({
    text_style:{
        fontFamily:'poppins_regular',
        fontSize:scaleWidth(14),
    }
})

================================================
File: components/profile/Name_Phone.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import SimpleLineIcon from 'react-native-vector-icons/SimpleLineIcons'
import { scaleHeight, scaleWidth } from '../../Scaling'


const Name_Phone = ({name,phone_number}) => {
    return (

        <View style={{ alignItems: 'center', gap: scaleHeight(4),marginBottom:scaleHeight(20) }}>
            <Text style={ownstyle.nameText}>{name}</Text>
            <View style={{ flexDirection: 'row', justifyContent: 'center', alignItems: 'center', gap: scaleWidth(5) }}>
                <SimpleLineIcon name='phone' size={scaleWidth(20)} />
                <Text>+977 {phone_number}</Text>
            </View>
        </View>
    )
}

export default Name_Phone

const ownstyle = StyleSheet.create({
    nameText: {
        fontFamily: 'poppins_regular'
    },
  
})

================================================
File: components/profile/SettingMenu.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import { TouchableOpacity } from 'react-native-gesture-handler'
import { Ionicons } from '@expo/vector-icons'
import { scaleHeight, scaleWidth } from '../../Scaling'

const SettingMenu = ({menuName,iconName,handleSettingPage}) => {
   
    return (
        <View style={styles1.menuContainer}>
            <TouchableOpacity  style={styles1.menuItem} onPress={handleSettingPage}>
                <Ionicons name={iconName} size={scaleWidth(24)} color="#333333" style={{fontWeight:'bold'}}/>
                <Text style={styles1.menuItemText}>{menuName}</Text>
                <Ionicons name="chevron-forward-outline" size={scaleWidth(24)} color="#ccc" style={{fontWeight:'semibold'}} />
            </TouchableOpacity>
        </View>
    )
}

export default SettingMenu

const styles1 = StyleSheet.create({
    menuContainer: {
        paddingHorizontal: scaleWidth(20),
    },
    menuItem: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingVertical: scaleHeight(15),
        borderBottomWidth: scaleHeight(1),
        borderBottomColor: '#f0f0f0',
    },
    menuItemText: {
        flex: 1,
        marginLeft: scaleWidth(20),
        fontSize: scaleWidth(16),
        fontFamily:'poppins_semibold',
        color:'#333333'
    },
})

================================================
File: components/profile/TextEditFields.tsx
================================================
import { StyleSheet, Text, View, TextInput } from 'react-native'
import React, { useState } from 'react'
import { scaleHeight, scaleWidth } from '../../Scaling'

const TextEditFields = ({ label_name, inputmode, key_type, given_value, handleInputChange }) => {

   return (
      <View style={ownstyle.text_container}>
         <Text style={ownstyle.label_style}>{label_name}</Text>
         <TextInput
            style={ownstyle.text_field}
            cursorColor={'black'}
            selectionColor={'#a9d6e5'}
            keyboardType={key_type}
            inputMode={inputmode}
            value={given_value}
            onChangeText={handleInputChange}
         />
      </View>
   )
}

export default TextEditFields

const ownstyle = StyleSheet.create({
   text_container: {
      marginTop: scaleHeight(20)
   },
   text_field: {
      borderBottomWidth: 1,
      borderColor: 'black',
      width: scaleWidth(300),
      fontSize: scaleWidth(15),
   },
   label_style: {
      fontFamily: 'poppins_regular',
      fontSize: scaleWidth(15),
   }
})

================================================
File: components/profile/UserInfo.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import { Image } from 'react-native'
import { scaleHeight, scaleWidth } from '../../Scaling'
import { baseURL } from '../../service'


const UserInfo = ({ photo }) => {
; 

    return (
        <View style={ownstyle.profileImageContainer}>
            {
                photo ? (
                    <Image
                    source={{ uri: `${baseURL}/${photo}` }}
                        style={ownstyle.profileImage}
                    />
                ) : (
                    <Image source={require('../../assets/images/profile.webp')}
                    style={ownstyle.profileImage}
                    />
                )
            }
        </View>
    )
}
const ownstyle = StyleSheet.create({
    profileImageContainer: {
        alignItems: 'center',
        marginTop: scaleHeight(10),
        marginBottom: scaleHeight(10),
        gap: scaleHeight(10),
    },
    profileImage: {
        width: scaleWidth(100),
        height: scaleHeight(100),
        borderRadius: scaleWidth(75),
        // backgroundColor: 'black',
    },

})


export default UserInfo



================================================
File: components/restaurant_profile/DrinkSection.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import { ScrollView } from 'react-native-gesture-handler'
import { Image, TouchableOpacity } from 'react-native'
import List from '../viewScreens/List';
import chatpate from '../../assets/chatapate.jpeg';
import m1 from '../../assets/images/img1 (1).png';
import m2 from '../../assets/images/img1 (2).png';
import m3 from '../../assets/images/img1 (3).png';

export const DrinksScreen = ({navigation}) => {
    const drinks = [
        {
            price: "$5.00",
            foodName: "Coca Cola",
            restaurantName: "Food Corner",
            image: { image1: m1, image2: m2, image3: m3 },
            isLoveNeeded: true,
          },
          {
            price: "$5.00",
            foodName: "Pepsi",
            restaurantName: "Food Corner",
            image: { image1: m1, image2: m2, image3: m3 },
            isLoveNeeded: true,
          },
          {
            price: "$5.00",
            foodName: "Fanta",
            restaurantName: "Food Corner",
            image: chatpate,
            isLoveNeeded: true,
          },
          {
            price: "$5.00",
            foodName: "Sprite",
            restaurantName: "Food Corner",
            image: chatpate,
            isLoveNeeded: true,
          },

    ];
  
    return (
      <ScrollView style={styles.tabContent} showsVerticalScrollIndicator={false}>
        <View style={styles.cardsContainer}>
          {drinks.map((drink,index) => (
                                    <List
                                    key={index}
                                    price={drink.price}
                                    foodName={drink.foodName}
                                    restaurantName={drink.restaurantName}
                                    images={drink.image}
                                    navigation={navigation}
                                    withRestaurant={false}
                                  />
          ))}
        </View>
      </ScrollView>
    );
  };

const styles = StyleSheet.create({
    tabContent: {
        flex: 1,
        backgroundColor: '#F0F4F8',
      },
      cardsContainer: {
        padding: 16,
      },
      foodCard: {
        backgroundColor: 'white',
        borderRadius: 12,
        marginBottom: 16,
        overflow: 'hidden',
        elevation: 2,
      },
      foodImage: {
        width: '100%',
        height: 200,
      },
      foodDetails: {
        padding: 16,
      },
      foodName: {
        fontSize: 18,
        fontFamily: 'poppins_semibold',
        color: '#333',
      },
      foodPrice: {
        fontSize: 16,
        fontFamily: 'poppins_regular',
        color: '#E23744',
        marginTop: 4,
      },
      addButton: {
        position: 'absolute',
        right: 16,
        bottom: 16,
        backgroundColor: '#E23744',
        paddingHorizontal: 20,
        paddingVertical: 8,
        borderRadius: 20,
      },
      addButtonText: {
        color: 'white',
        fontSize: 14,
        fontFamily: 'poppins_semibold',
      },
})

================================================
File: components/restaurant_profile/Looks.tsx
================================================
import React from 'react';
import { ScrollView, View, Text, Image } from 'react-native';
import {StyleSheet} from 'react-native';

// Restaurant Looks Tab Component
export const LooksScreen = () => {
    const restaurantViews = [
      { 
        id: 1, 
        image: require('../../assets/images/wallpaper.jpeg'),
        description: 'Elegant dining area with modern aesthetics'
      },
      { 
        id: 2, 
        image: require('../../assets/images/wallpaper.jpeg'),
        description: 'Peaceful outdoor seating with garden view'
      },
      { 
        id: 3, 
        image: require('../../assets/images/wallpaper.jpeg'),
        description: 'Premium bar with extensive collection'
      },
      // Add more views as needed
    ];
  
    return (
      <ScrollView style={styles.tabContent} showsVerticalScrollIndicator={false}>
        {restaurantViews.map((view) => (
          <View key={view.id} style={styles.lookCard}>
            <Image source={view.image} style={styles.lookImage} resizeMode="cover" />
            <Text style={styles.lookDescription}>{view.description}</Text>
          </View>
        ))}
      </ScrollView>
    );
  };
  
  const styles = StyleSheet.create({
    lookCard: {
        backgroundColor: 'white',
        borderRadius: 12,
        marginHorizontal: 16,
        marginVertical: 8,
        overflow: 'hidden',
        elevation: 2,
      },
      lookImage: {
        width: '100%',
        height: 250,
      },
      lookDescription: {
        padding: 16,
        fontSize: 16,
        fontFamily: 'poppins_semibold',
        color: '#333',
      },
      tabContent: {
        flex: 1,
        backgroundColor: '#F0F4F8',
      },
  })

================================================
File: components/restaurant_profile/MenuSection.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React, { useContext } from 'react'
import { ScrollView } from 'react-native-gesture-handler'
import { Image, TouchableOpacity } from 'react-native'
import List from '../viewScreens/List';
import chatpate from '../../assets/chatapate.jpeg';
import m1 from '../../assets/images/img1 (1).png';
import m2 from '../../assets/images/img1 (2).png';
import m3 from '../../assets/images/img1 (3).png';
import FoodItems from '../home/FoodItemsCard';
import { myContext } from '../../context/AppProvider';
// import { useRoute } from '@react-navigation/native';


export const MenuItemsScreen = ({navigation,foodItems,handlePressonList}) => {
  // const { seller_state,food_state } = useContext(myContext);

  console.log('--------------------------------->***',foodItems);

  const handleEditPen = (item) => {
    navigation.navigate('AddFood',{food_id_params:item.id,food_name_params:item.food_name,food_price_params:item.food_price,food_image_params:item.images});
    console.log('Edit Pen Clicked');
  }


  
    return (
      <ScrollView style={styles.tabContent} showsVerticalScrollIndicator={false}>
        <View style={styles.cardsContainer}>
          {foodItems.map((item) => (
                         <List
                         key={item.id}
                         price={item.food_price}
                         foodName={item.food_name}
                         restaurantName={undefined}
                         images={item.images}
                         navigation={navigation}
                         withRestaurant={false}
                         handlePressonList={handlePressonList}
                          handleEditPen={()=>handleEditPen(item)}
                       />
          ))}
        </View>
      </ScrollView>
    );
  };


const styles = StyleSheet.create({
    
     tabContent: {
    flex: 1,
    backgroundColor: '#F0F4F8',
  },
  cardsContainer: {
    padding: 16,
  },
  foodCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    marginBottom: 16,
    overflow: 'hidden',
    elevation: 2,
  },
  foodImage: {
    width: '100%',
    height: 200,
  },
  foodDetails: {
    padding: 16,
  },
  foodName: {
    fontSize: 18,
    fontFamily: 'poppins_semibold',
    color: '#333',
  },
  foodPrice: {
    fontSize: 16,
    fontFamily: 'poppins_regular',
    color: '#E23744',
    marginTop: 4,
  },
  addButton: {
    position: 'absolute',
    right: 16,
    bottom: 16,
    backgroundColor: '#E23744',
    paddingHorizontal: 20,
    paddingVertical: 8,
    borderRadius: 20,
  },
  addButtonText: {
    color: 'white',
    fontSize: 14,
    fontFamily: 'poppins_semibold',
  },

})

================================================
File: components/restaurant_profile/ProfileHeader.tsx
================================================
"use client"

import { useContext } from "react"
import { StyleSheet, Text, View, TouchableOpacity, Image, Switch } from "react-native"
import { AntDesign, Ionicons, FontAwesome5, Feather } from "@expo/vector-icons"
import { myContext } from "../../context/AppProvider"
import { SkeletonCircle } from "../../screens/viewScreens/SkeletonPaper"
import { scaleHeight, scaleWidth } from "../../Scaling"
import { baseURL } from "../../service"
import { LinearGradient } from "expo-linear-gradient"

const ProfileHeader = ({
  handleGoBack,
  logo,
  openMaps,
  restaurantName,
  openingHour,
  rating,
  cityName,
  streetAddress,
  activeStatus,
  businessType,
  navigation,
}) => {
  const { state, seller_state, seller_dispatch } = useContext(myContext)

  const handleToggleStatus = async () => {
    // Toggle restaurant active status
    const newStatus = !activeStatus
    seller_dispatch({ type: "SET_DATA", key: "is_active", payload: newStatus })

    // Here you would typically make an API call to update the status
    // For example: await update_data('update_restaurant_status', { is_active: newStatus });
  }

  const handleAddFood = () => {
    navigation.navigate("AddFood")
  }

  const handleViewOrders = () => {
    // Navigate to orders screen
    // navigation.navigate('Orders');
  }

  const handleViewAnalytics = () => {
    // Navigate to analytics screen
    // navigation.navigate('Analytics');
  }

  const handleViewSettings = () => {
    navigation.navigate("SellerSetting")
  }

  // Mock data for dashboard metrics
  const metrics = {
    ordersToday: 12,
    revenue: 3250,
    pendingOrders: 3,
    averageRating: rating || 4.5,
  }

  return (
    <View style={styles.dashboardContainer}>
      {/* Header with logo and status toggle */}
      <LinearGradient
        colors={["#333333", "#4A4A4A"]}
        style={styles.headerGradient}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 0 }}
      >
        <View style={styles.headerContent}>
          <View style={styles.logoAndNameContainer}>
            {logo ? (
              <Image source={{ uri: `${baseURL}${logo}` }} style={styles.restaurantLogo} />
            ) : (
              <SkeletonCircle SkeletonHeight={60} SkeletonWidth={60} style={styles.restaurantLogo} />
            )}

            <View style={styles.nameContainer}>
              {restaurantName ? (
                <Text style={styles.restaurantName}>{restaurantName}</Text>
              ) : (
                <Text style={styles.restaurantName}>Your Restaurant</Text>
              )}

              {businessType ? (
                <Text style={styles.businessType}>{businessType}</Text>
              ) : (
                <Text style={styles.businessType}>Restaurant</Text>
              )}
            </View>
          </View>

          <TouchableOpacity style={styles.settingsButton} onPress={handleViewSettings}>
            <Ionicons name="settings-outline" size={24} color="#FFF" />
          </TouchableOpacity>
        </View>

        <View style={styles.statusToggleContainer}>
          <Text style={styles.statusLabel}>Restaurant Status:</Text>
          <View style={styles.statusToggle}>
            <Text style={[styles.statusText, { color: activeStatus ? "#4CAF50" : "#FF6B6B" }]}>
              {activeStatus ? "Open" : "Closed"}
            </Text>
            <Switch
              trackColor={{ false: "#767577", true: "#A5D6A7" }}
              thumbColor={activeStatus ? "#4CAF50" : "#F4F3F4"}
              ios_backgroundColor="#3e3e3e"
              onValueChange={handleToggleStatus}
              value={activeStatus}
            />
          </View>
        </View>
      </LinearGradient>

      {/* Dashboard metrics */}
      <View style={styles.metricsContainer}>
        <View style={styles.metricCard}>
          <Text style={styles.metricValue}>{metrics.ordersToday}</Text>
          <Text style={styles.metricLabel}>Today's Orders</Text>
        </View>

        <View style={styles.metricDivider} />

        <View style={styles.metricCard}>
          <Text style={styles.metricValue}>₹{metrics.revenue}</Text>
          <Text style={styles.metricLabel}>Today's Revenue</Text>
        </View>

        <View style={styles.metricDivider} />

        <View style={styles.metricCard}>
          <Text style={styles.metricValue}>{metrics.pendingOrders}</Text>
          <Text style={styles.metricLabel}>Pending Orders</Text>
        </View>

        <View style={styles.metricDivider} />

        <View style={styles.metricCard}>
          <View style={styles.ratingContainer}>
            <Text style={styles.metricValue}>{metrics.averageRating}</Text>
            <AntDesign name="star" size={16} color="#FFD700" style={styles.starIcon} />
          </View>
          <Text style={styles.metricLabel}>Rating</Text>
        </View>
      </View>

      {/* Quick actions */}
      <View style={styles.quickActionsContainer}>
        <TouchableOpacity style={styles.actionButton} onPress={handleAddFood}>
          <View style={[styles.actionIconContainer, { backgroundColor: "#4CAF50" }]}>
            <Feather name="plus" size={24} color="#FFF" />
          </View>
          <Text style={styles.actionText}>Add Food</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.actionButton} onPress={handleViewOrders}>
          <View style={[styles.actionIconContainer, { backgroundColor: "#2196F3" }]}>
            <FontAwesome5 name="clipboard-list" size={20} color="#FFF" />
          </View>
          <Text style={styles.actionText}>Orders</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.actionButton} onPress={handleViewAnalytics}>
          <View style={[styles.actionIconContainer, { backgroundColor: "#FF9800" }]}>
            <Ionicons name="analytics-outline" size={22} color="#FFF" />
          </View>
          <Text style={styles.actionText}>Analytics</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.actionButton} onPress={openMaps}>
          <View style={[styles.actionIconContainer, { backgroundColor: "#E91E63" }]}>
            <Ionicons name="location-outline" size={22} color="#FFF" />
          </View>
          <Text style={styles.actionText}>Location</Text>
        </TouchableOpacity>
      </View>

      {/* Address and hours */}
      <View style={styles.infoContainer}>
        <View style={styles.infoRow}>
          <Ionicons name="location" size={20} color="#333333" />
          <Text style={styles.infoText}>{streetAddress ? `${streetAddress}, ${cityName}` : "Set your address"}</Text>
        </View>

        <View style={styles.infoRow}>
          <Ionicons name="time-outline" size={20} color="#333333" />
          <Text style={styles.infoText}>{openingHour || "Set your opening hours"}</Text>
        </View>
      </View>

      {/* Pending orders preview */}
      <View style={styles.pendingOrdersContainer}>
        <View style={styles.sectionHeaderContainer}>
          <Text style={styles.sectionHeader}>Pending Orders</Text>
          <TouchableOpacity onPress={handleViewOrders}>
            <Text style={styles.viewAllText}>View All</Text>
          </TouchableOpacity>
        </View>

        {metrics.pendingOrders > 0 ? (
          <View style={styles.orderPreviewContainer}>
            <View style={styles.orderPreview}>
              <View style={styles.orderInfo}>
                <Text style={styles.orderNumber}>Order #1234</Text>
                <Text style={styles.orderItems}>2× Momo, 1× Chowmein</Text>
              </View>
              <TouchableOpacity style={styles.acceptButton}>
                <Text style={styles.acceptButtonText}>Accept</Text>
              </TouchableOpacity>
            </View>

            {metrics.pendingOrders > 1 && (
              <View style={styles.orderPreview}>
                <View style={styles.orderInfo}>
                  <Text style={styles.orderNumber}>Order #1235</Text>
                  <Text style={styles.orderItems}>1× Burger, 1× Fries</Text>
                </View>
                <TouchableOpacity style={styles.acceptButton}>
                  <Text style={styles.acceptButtonText}>Accept</Text>
                </TouchableOpacity>
              </View>
            )}

            {metrics.pendingOrders > 2 && (
              <TouchableOpacity style={styles.moreOrdersButton} onPress={handleViewOrders}>
                <Text style={styles.moreOrdersText}>+{metrics.pendingOrders - 2} more orders</Text>
              </TouchableOpacity>
            )}
          </View>
        ) : (
          <View style={styles.noOrdersContainer}>
            <Text style={styles.noOrdersText}>No pending orders</Text>
          </View>
        )}
      </View>
    </View>
  )
}

const styles = StyleSheet.create({
  dashboardContainer: {
    backgroundColor: "#F0F4F8",
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  headerGradient: {
    padding: scaleWidth(16),
    borderBottomLeftRadius: scaleWidth(20),
    borderBottomRightRadius: scaleWidth(20),
  },
  headerContent: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  logoAndNameContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  restaurantLogo: {
    width: scaleWidth(60),
    height: scaleWidth(60),
    borderRadius: scaleWidth(30),
    borderWidth: 2,
    borderColor: "#FFFFFF",
  },
  nameContainer: {
    marginLeft: scaleWidth(12),
  },
  restaurantName: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(18),
    color: "#FFFFFF",
  },
  businessType: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(14),
    color: "#E0E0E0",
  },
  settingsButton: {
    width: scaleWidth(40),
    height: scaleWidth(40),
    borderRadius: scaleWidth(20),
    backgroundColor: "rgba(255, 255, 255, 0.2)",
    justifyContent: "center",
    alignItems: "center",
  },
  statusToggleContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginTop: scaleHeight(16),
    backgroundColor: "rgba(255, 255, 255, 0.1)",
    padding: scaleWidth(10),
    borderRadius: scaleWidth(8),
  },
  statusLabel: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(14),
    color: "#FFFFFF",
  },
  statusToggle: {
    flexDirection: "row",
    alignItems: "center",
  },
  statusText: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(14),
    marginRight: scaleWidth(8),
  },
  metricsContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    backgroundColor: "#FFFFFF",
    borderRadius: scaleWidth(10),
    margin: scaleWidth(16),
    marginTop: scaleHeight(-20),
    padding: scaleWidth(16),
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  metricCard: {
    alignItems: "center",
    flex: 1,
  },
  metricValue: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(16),
    color: "#333333",
  },
  metricLabel: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(12),
    color: "#757575",
    textAlign: "center",
  },
  metricDivider: {
    width: 1,
    height: "80%",
    backgroundColor: "#E0E0E0",
    alignSelf: "center",
  },
  ratingContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  starIcon: {
    marginLeft: scaleWidth(2),
  },
  quickActionsContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginHorizontal: scaleWidth(16),
    marginBottom: scaleHeight(16),
  },
  actionButton: {
    alignItems: "center",
    width: "22%",
  },
  actionIconContainer: {
    width: scaleWidth(50),
    height: scaleWidth(50),
    borderRadius: scaleWidth(25),
    justifyContent: "center",
    alignItems: "center",
    marginBottom: scaleHeight(4),
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.2,
    shadowRadius: 2.5,
    elevation: 3,
  },
  actionText: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(12),
    color: "#333333",
    textAlign: "center",
  },
  infoContainer: {
    backgroundColor: "#FFFFFF",
    borderRadius: scaleWidth(10),
    margin: scaleWidth(16),
    marginTop: 0,
    marginBottom: scaleHeight(8),
    padding: scaleWidth(16),
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 2.84,
    elevation: 2,
  },
  infoRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: scaleHeight(8),
  },
  infoText: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(14),
    color: "#333333",
    marginLeft: scaleWidth(8),
    flex: 1,
  },
  pendingOrdersContainer: {
    backgroundColor: "#FFFFFF",
    borderRadius: scaleWidth(10),
    margin: scaleWidth(16),
    marginTop: 0,
    padding: scaleWidth(16),
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 2.84,
    elevation: 2,
  },
  sectionHeaderContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: scaleHeight(12),
  },
  sectionHeader: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(16),
    color: "#333333",
  },
  viewAllText: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(14),
    color: "#4CAF50",
  },
  orderPreviewContainer: {
    gap: scaleHeight(12),
  },
  orderPreview: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    backgroundColor: "#F5F5F5",
    padding: scaleWidth(12),
    borderRadius: scaleWidth(8),
  },
  orderInfo: {
    flex: 1,
  },
  orderNumber: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(14),
    color: "#333333",
  },
  orderItems: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(12),
    color: "#757575",
  },
  acceptButton: {
    backgroundColor: "#4CAF50",
    paddingHorizontal: scaleWidth(16),
    paddingVertical: scaleHeight(6),
    borderRadius: scaleWidth(20),
  },
  acceptButtonText: {
    fontFamily: "poppins_semibold",
    fontSize: scaleWidth(12),
    color: "#FFFFFF",
  },
  moreOrdersButton: {
    alignItems: "center",
    padding: scaleWidth(8),
  },
  moreOrdersText: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(14),
    color: "#2196F3",
  },
  noOrdersContainer: {
    padding: scaleWidth(16),
    alignItems: "center",
  },
  noOrdersText: {
    fontFamily: "poppins_regular",
    fontSize: scaleWidth(14),
    color: "#757575",
    fontStyle: "italic",
  },
})

export default ProfileHeader



================================================
File: components/restaurant_profile/WavePulse.tsx
================================================
import React, { useEffect } from 'react';
import { View, StyleSheet, Animated, Easing } from 'react-native';

const WavePulse = ({ size, isActive , style }) => {
  // Create animated values for multiple waves
  const wave1 = new Animated.Value(0);
  const wave2 = new Animated.Value(0);
  const wave3 = new Animated.Value(0);
  
  // Create pulse animation
  const createWaveAnimation = (waveValue, delay = 0) => {
    return Animated.sequence([
      Animated.delay(delay),
      Animated.loop(
        Animated.sequence([
          Animated.timing(waveValue, {
            toValue: 1,
            duration: 2000,
            easing: Easing.bezier(0.25, 0.46, 0.45, 0.94),
            useNativeDriver: true,
          }),
          Animated.timing(waveValue, {
            toValue: 0,
            duration: 0,
            useNativeDriver: true,
          }),
        ])
      ),
    ]);
  };

  // Start animation when component mounts or isActive changes
  useEffect(() => {
    if (isActive) {
      // Start animations with different delays for a wave effect
      Animated.parallel([
        createWaveAnimation(wave1, 0),
        createWaveAnimation(wave2, 666),
        createWaveAnimation(wave3, 1333),
      ]).start();
    } else {
      // Reset animations when inactive
      wave1.setValue(0);
      wave2.setValue(0);
      wave3.setValue(0);
    }
  }, [isActive]);

  // Interpolate values for scaling and opacity
  const getAnimatedStyle = (waveValue) => ({
    transform: [
      {
        scale: waveValue.interpolate({
          inputRange: [0, 1],
          outputRange: [1, 4],
        }),
      },
    ],
    opacity: waveValue.interpolate({
      inputRange: [0, 1],
      outputRange: [0.6, 0],
    }),
  });

  return (
    <View style={[styles.container, { width: size, height: size }, style]}>
      {/* Base circle */}
      <View
        style={[
          styles.circle,
          {
            width: size,
            height: size,
            backgroundColor: isActive ? '#4CAF50' : '#FF5252',
          },
        ]}
      />
      
      {isActive && (
        <>
          {/* Animated waves */}
          <Animated.View
            style={[
              styles.wave,
              {
                width: size,
                height: size,
                backgroundColor: '#4CAF50',
              },
              getAnimatedStyle(wave1),
            ]}
          />
          <Animated.View
            style={[
              styles.wave,
              {
                width: size,
                height: size,
                backgroundColor: '#4CAF50',
              },
              getAnimatedStyle(wave2),
            ]}
          />
          <Animated.View
            style={[
              styles.wave,
              {
                width: size,
                height: size,
                backgroundColor: '#4CAF50',
              },
              getAnimatedStyle(wave3),
            ]}
          />
        </>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  circle: {
    borderRadius: 100,
    position: 'absolute',
    zIndex: 2,
  },
  wave: {
    borderRadius: 100,
    position: 'absolute',
    zIndex: 1,
  },
});

export default WavePulse;


================================================
File: components/scanner/TopText.tsx
================================================
import { StyleSheet, Text, View,Dimensions } from 'react-native'
import React from 'react'
import { Image } from 'react-native'
const { height } = Dimensions.get('window')

const TopText = () => {
    return (
        <View style={styles.intro} >
            <Image style={{ height: 100, width: 100 }} source={require('../../assets/fadefood_logo.png')}></Image>
            <View>
                <Text style={{ color: 'white', fontSize: 30, fontWeight: 'bold' }}>Scan FadeFood to</Text>
                <Text style={{ color: 'white', fontSize: 30, fontWeight: 'bold' }}>Pre-order & Payment</Text>
                <Text style={{ color: 'white', fontSize: 30, fontWeight: 'bold' }}>from anywhere</Text>
            </View>
        </View>
    )
}

export default TopText

const styles = StyleSheet.create({
    intro: {
        height: height * 0.2,
        backgroundColor: 'transparent',
        flexDirection: 'row',
        justifyContent: 'space-around',
        alignItems: 'center',
        gap: 10
      }
})

================================================
File: components/seller_profile/InformationSection.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'

const InformationSection = () => {
  return (
    <View>
      <Text>InformationSection</Text>
    </View>
  )
}

export default InformationSection

const styles = StyleSheet.create({})

================================================
File: components/seller_profile/ProfileSection.tsx
================================================
import React, { useContext, useState } from 'react';
import { 
  StyleSheet, 
  Text, 
  View, 
  Switch, 
  Alert, 
  ScrollView, 
  TouchableOpacity,
  Image
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import TopBar from '../viewScreens/TopBar';

import SettingMenu from '../profile/SettingMenu';
import TextEditFields from '../profile/TextEditFields';

import { scaleHeight, scaleWidth } from '../../Scaling';
import { myContext } from '../../context/AppProvider';
import * as ImagePicker from 'expo-image-picker';
import { post_data_with_img, update_data } from '../../service';
import LoadingScreen from '../viewScreens/LoadingScreen';
import SnackBar from '../../screens/viewScreens/SnackBar';
import { Ionicons, MaterialIcons, FontAwesome } from '@expo/vector-icons';
import { CommonActions } from '@react-navigation/native'
import UserInfo from '../profile/UserInfo';

const ProfileSection = () => {
      const { state, seller_state, seller_dispatch, dispatch, isLoading, setisLoading, snackBar, setsnackBar,clearAllData } = useContext(myContext);
    
      const [isActive, setIsActive] = useState(seller_state.is_active || false);

        const handleToggleActive = async () => {
          const newActiveState = !isActive;
          setIsActive(newActiveState);
          
          try {
            setisLoading(true);
            const response = await update_data('update_restaurant_status', { is_active: newActiveState });
            if (response.success) {
              seller_dispatch({ type: 'SET_DATA', key: 'is_active', payload: newActiveState });
              dispatch({ type: 'snackmessage', payload: newActiveState ? 'Restaurant is now open' : 'Restaurant is now closed' });
              setsnackBar(true);
              setTimeout(() => setsnackBar(false), 3000);
            } else {
              Alert.alert('Error', response.data || 'Failed to update status');
            }
          } catch (error) {
            Alert.alert('Error', 'An unexpected error occurred');
          } finally {
            setisLoading(false);
          }
        };

          const pickImage = async () => {
            const result = await ImagePicker.launchImageLibraryAsync({
              mediaTypes: ImagePicker.MediaTypeOptions.Images,
              allowsEditing: true,
              aspect: [1, 1],
              quality: 1,
            });
        
            if (!result.canceled) {
              const selectedImage = result.assets[0].uri;
              try {
                setisLoading(true);
                const response = await post_data_with_img('update_restaurant_logo', {}, { image: selectedImage }, 'PUT');
                if (response.success) {
                  seller_dispatch({ type: 'SET_DATA', key: 'logo', payload: response.data.logo });
                  dispatch({ type: 'snackmessage', payload: 'Logo updated successfully' });
                  setsnackBar(true);
                  setTimeout(() => setsnackBar(false), 3000);
                } else {
                  Alert.alert('Error', response.data || 'Failed to update logo');
                }
              } catch (error) {
                Alert.alert('Error', 'An unexpected error occurred');
              } finally {
                setisLoading(false);
              }
            }
          };
  return (
    <View style={localStyles.profileHeader}>
    <View style={localStyles.logoContainer}>
      <  UserInfo photo={seller_state.logo} />
  
      <TouchableOpacity 
        style={localStyles.editLogoButton}
        onPress={pickImage}
      >
        <FontAwesome name="camera" size={scaleWidth(16)} color="#FFF" />
      </TouchableOpacity>
    </View>
    
    <View style={localStyles.nameContainer}>
      <Text style={localStyles.restaurantName}>{seller_state.name}</Text>
      <Text style={localStyles.businessType}>{seller_state.business_type}</Text>
    </View>
    
    <View style={localStyles.statusContainer}>
      <Text style={localStyles.statusLabel}>Restaurant Status</Text>
      <View style={localStyles.statusToggle}>
        <Text style={[
          localStyles.statusText, 
          { color: isActive ? '#4CAF50' : '#757575' }
        ]}>
          {isActive ? 'Open' : 'Closed'}
        </Text>
        <Switch
          trackColor={{ false: '#E0E0E0', true: '#A5D6A7' }}
          thumbColor={isActive ? '#4CAF50' : '#BDBDBD'}
          onValueChange={handleToggleActive}
          value={isActive}
        />
       
      </View>
    </View>
  </View>
  )
}

export default ProfileSection

const localStyles = StyleSheet.create({
     profileHeader: {
        backgroundColor: '#FFFFFF',
        padding: scaleWidth(16),
        borderRadius: scaleWidth(10),
        margin: scaleWidth(10),
        shadowColor: '#000',
        shadowOffset: {
          width: 0,
          height: 2,
        },
        shadowOpacity: 0.1,
        shadowRadius: 3.84,
        elevation: 5,
      },
      logoContainer: {
        alignItems: 'center',
        position: 'relative',
      },
      editLogoButton: {
        position: 'absolute',
        bottom: scaleHeight(10),
        right: scaleWidth(130),
        backgroundColor: '#333333',
        width: scaleWidth(30),
        height: scaleWidth(30),
        borderRadius: scaleWidth(15),
        justifyContent: 'center',
        alignItems: 'center',
      },
      nameContainer: {
        alignItems: 'center',
        marginTop: scaleHeight(5),
      },
      restaurantName: {
        fontFamily: 'poppins_semibold',
        fontSize: scaleWidth(22),
        color: '#333333',
      },
      businessType: {
        fontFamily: 'poppins_regular',
        fontSize: scaleWidth(14),
        color: '#757575',
        marginTop: scaleHeight(2),
      },
      statusContainer: {
        marginTop: scaleHeight(15),
        borderTopWidth: 1,
        borderTopColor: '#F0F0F0',
        paddingTop: scaleHeight(15),
      },
      statusLabel: {
        fontFamily: 'poppins_semibold',
        fontSize: scaleWidth(16),
        color: '#333333',
        marginBottom: scaleHeight(8),
      },
      statusToggle: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
      },
      statusText: {
        fontFamily: 'poppins_semibold',
        fontSize: scaleWidth(16),
      },
})

================================================
File: components/viewScreens/BigImage.tsx
================================================
import { StyleSheet, Text, View, TouchableOpacity, Animated } from 'react-native'
import React, { useState, useRef } from 'react'
import { Image } from 'react-native'
import PagerView from 'react-native-pager-view'
import { scaleHeight, scaleWidth } from '../../Scaling';
import { AntDesign } from '@expo/vector-icons'; // Make sure you have expo vector icons installed
import { scanFromURLAsync } from 'expo-camera';
import { baseURL } from '../../service';



const BigImage = ({scaleAnim,toggleFavorite,isFavorite,images}) => {
  console.log('images',images)
  const [activeIndex, setActiveIndex] = useState(0);


  return (
    <View style={{ height: scaleHeight(500), width: '100%' }}>
      <PagerView
        style={{ flex: 1 }}
        initialPage={0}
        onPageSelected={(e) => setActiveIndex(e.nativeEvent.position)}
      >
        {images.map((img, index) => (
          <View key={index} style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
            <Image resizeMode='cover' style={{ height: '100%', width: '100%' }}  source={{ uri: `${baseURL}${img.image}` }} />
          </View>
        ))}
      </PagerView>
      <TouchableOpacity 
        style={styles1.heartContainer}
        onPress={toggleFavorite}
        activeOpacity={0.7}
      >
        <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>
          <AntDesign 
            name={isFavorite ? "heart" : "hearto"} 
            size={scaleHeight(28)} 
            color={isFavorite ? "red" : "white"}
          />
        </Animated.View>
      </TouchableOpacity>
      <View style={styles1.dotContainer}>
        {images.map((_, index) => (
          <Text key={index} style={index === activeIndex ? styles1.activeDot : styles1.dot}>o</Text>
        ))}
      </View>
    </View>
  )
}

export default BigImage

const styles1 = StyleSheet.create({
  dotContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    position: 'absolute',
    bottom: scaleWidth(10),
    width: '100%',
  },
  dot: {
    fontSize: scaleWidth(15),
    color: '#888',
    margin: scaleWidth(3),
  },
  activeDot: {
    fontSize: scaleWidth(15),
    color: '#fff',
    margin: scaleWidth(3),
  },
  heartContainer: {
    position: 'absolute',
    top: scaleHeight(20),
    right: scaleWidth(20),
    zIndex: 1,
    backgroundColor: 'rgba(0,0,0,0.3)',
    borderRadius: scaleWidth(50),
    padding: scaleWidth(8),
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: scaleHeight(2),
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
})

================================================
File: components/viewScreens/Edit.tsx
================================================
import { StyleSheet, Text, View,TouchableOpacity } from 'react-native'
import React from 'react'
import AntDesign from 'react-native-vector-icons/AntDesign'
import { scaleHeight, scaleWidth } from '../../Scaling'

const Edit = ({handleEditPen}) => {
  return (
    <TouchableOpacity 
    style={{ 
        height: scaleHeight(30), 
        width: scaleWidth(40), 
        backgroundColor:  '#FFFFFF', 
        borderTopRightRadius: 12, 
        borderBottomLeftRadius: 12, 
        marginLeft: 'auto', 
        alignItems: 'center', 
        justifyContent: 'center',
        elevation: 2 
    }}

    onPress={handleEditPen}
>
    <AntDesign
        name={ 'edit'} 
        size={scaleWidth(25)} 
        style={{ 
            color: '#FF6347' 
        }}
    />
</TouchableOpacity>
  )
}

export default Edit

const styles = StyleSheet.create({})

================================================
File: components/viewScreens/FoodDescription.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'

const FoodDescription = () => {
  return (
    <View style={styles1.description}>
    <Text style={{ fontFamily: 'jakarta_bold', fontSize: 20, color: 'black', marginTop: 10 }}>Description</Text>
    <Text style={{ fontFamily: 'montserrat_semibold', fontSize: 15, color: 'grey' }}>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec purus feugiat, molestie ipsum et, eleifend nunc. Nulla facilisi. Donec ut ex nec enim tincidunt ultricies. Ut nec   </Text>
  </View>
  )
}

export default FoodDescription

const styles1 = StyleSheet.create({
    description: {
        width: '100%',
        padding: 10,
        alignItems: 'flex-start',
        borderRadius: 20,
        height: '15%',
        flexDirection: 'column',
        justifyContent: 'center',
        gap: 5,
      },
})

================================================
File: components/viewScreens/Icons.tsx
================================================
import { TouchableOpacity } from 'react-native'
import React from 'react'
import FontAwe from 'react-native-vector-icons/FontAwesome'

const Icons = ({name,navigation}) => {
  return (
    <TouchableOpacity 
      style={{backgroundColor:'#ffffff',height:40,width:40,flexDirection:'row',justifyContent:'center',alignItems:'center',borderRadius:10}} 
      onPress={() => navigation.goBack()}
    >
      <FontAwe name={name} size={25} />
    </TouchableOpacity>
  )
}

export default Icons



================================================
File: components/viewScreens/Increment_Decrement.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import SimpleLineIcons from 'react-native-vector-icons/SimpleLineIcons'


const Increment_Decrement = () => {
    return (
        <View style={styles1.orderNumber}>
            <SimpleLineIcons name='minus' size={40}></SimpleLineIcons>
            <Text style={{ fontSize: 20, fontWeight: 'bold' }}>1</Text>
            <SimpleLineIcons name='plus' size={40}></SimpleLineIcons>
        </View>
    )
}

export default Increment_Decrement

const styles1 = StyleSheet.create({
    orderNumber: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        width: 110,
      },
})

================================================
File: components/viewScreens/ItemName.tsx
================================================
import { StyleSheet, Text, View } from "react-native";
import React from "react";
import { scaleWidth } from "../../Scaling";

const ItemName = ({ foodName,  fontsize }) => {
  return (
    <View style={styles.orderName}>
      <View style={styles.foodNameContainer}>
        <Text style={[styles.foodName, { fontSize: scaleWidth(fontsize) }]}>
          {foodName}
        </Text>
      </View>
    </View>
  );
};

export default ItemName;

const styles = StyleSheet.create({
  orderName: {
    width: "auto",
    height: "auto",
    flexDirection: "column",
    alignItems: "flex-start",
  },
  foodNameContainer: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
  },
  foodName: {
    fontFamily: "jakarta_bold",
  },
  restaurantName: {
    fontFamily: "jakarta_bold",
    color: "grey",
  },
});


================================================
File: components/viewScreens/List.tsx
================================================
import { StyleSheet, Text, View, TouchableWithoutFeedback, Image, TouchableOpacity } from "react-native";
import React, { useContext } from "react";
import Price from "./Price";
import { scaleHeight, scaleWidth } from "../../Scaling";
import Love from "./Love";
import { AntDesign, MaterialIcons } from "@expo/vector-icons";
import Edit from "./Edit";
import { myContext } from "../../context/AppProvider";
import { styles } from "../../style/style";
import { baseURL } from "../../service";
import SkeletonPaper from "../../screens/viewScreens/SkeletonPaper";



const List = ({
  images,
  foodName,
  restaurantName,
  price,
  navigation,
  withRestaurant,
  handlePressonList,
  handleEditPen
}) => {
  const { state } = useContext(myContext);


  const onListPress = (e: { stopPropagation: () => void; }) => {
    e.stopPropagation();
    console.log("Add to List");
  }


  return (
    <TouchableWithoutFeedback onPress={handlePressonList}>

      <View style={styles.food_container}>

        <View style={{ flexDirection: 'row', justifyContent: 'center',alignItems:'flex-start' }}>
          {
          images && Array.isArray(images) && images.length > 0 ? (
            images.map((imageObj) => (
              <Image
                key={imageObj.id}
                source={{ uri: `${baseURL}${imageObj.image}` }}
                resizeMode="cover"
                style={styles.foodImage}
              />
            ))
          ) : (
             <SkeletonPaper 
             SkeletonHeight={scaleHeight(150)}
             SkeletonWidth={'90%'}
             style={undefined}
             />
            )
              }
              </View>

        <View style={{ position: 'absolute', right: 0 }}>
          {
            state.role === 'customer' ? (
              <Love />
            ) : (
              <Edit handleEditPen={handleEditPen} />
            )


          }
        </View>


        <View style={styles.infoSection}>

          <View style={styles.namePriceRow}>
            {
              foodName?(

                <Text style={styles.foodName}>{foodName}</Text>
              ):(
                <SkeletonPaper
                SkeletonHeight={25}
                SkeletonWidth={200}
                style={styles.foodName}
              />
              )
            }
            {
              price?(
                <Price priceFontSize={18} price={price} />
              ):(
                <SkeletonPaper
                SkeletonHeight={25}
                SkeletonWidth={60}
                style={undefined}
              />
              )
            }
          </View>
          {
            state.role === 'customer' && (
              <View style={styles.restaurantRow}>


                {withRestaurant ?

                  (<View style={styles.restaurantInfo}>
                    <View style={styles.restaurantLogo}></View>
                    <Text style={styles.restaurantName}>{restaurantName}</Text>
                  </View>) : (<View></View>)
                }

                <TouchableOpacity style={styles.addToListButton} onPress={onListPress}>
                  <Text style={styles.buttonText}>Add to List</Text>
                </TouchableOpacity>
              </View>
            )
          }


        </View>
      </View>
    </TouchableWithoutFeedback>
  );
};

export default List;



================================================
File: components/viewScreens/LoadingScreen.tsx
================================================
import React from 'react';
import { StyleSheet, View, ActivityIndicator } from 'react-native';
import { StatusBar } from 'expo-status-bar';

const LoadingScreen = () => {
    return (
        <View style={styles.container}>
            <StatusBar backgroundColor="#ffffff" style='dark' />
            <ActivityIndicator 
                size="large"
                color="#333333"
            />
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'rgba(255,255,255,0.8)',  // Semi-transparent white
        zIndex: 1000
    }
});

export default LoadingScreen;

================================================
File: components/viewScreens/Love.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React,{useState} from 'react'
import { TouchableOpacity } from 'react-native-gesture-handler'
import MaterialIcons from 'react-native-vector-icons/MaterialIcons'
import { scaleHeight, scaleWidth } from '../../Scaling'


const Love = () => {
    const [isFavorite, setFavorite] = useState(true);

    const toggleFavorite = () => {
      setFavorite(!isFavorite);
    }
  return (
    <View>
      {
              isFavorite ? (
              
                <TouchableOpacity 
                onPress={toggleFavorite}
                style={{ 
                    height: scaleHeight(30), 
                    width: scaleWidth(40), 
                    backgroundColor: isFavorite ? '#FF6347' : '#FFFFFF', // Change background based on state
                    borderTopRightRadius: 12, 
                    borderBottomLeftRadius: 12, 
                    marginLeft: 'auto', 
                    alignItems: 'center', 
                    justifyContent: 'center',
                    elevation: 2 // Optional: adds shadow on Android
                }}
            >
                <MaterialIcons
                    name={isFavorite ? 'favorite' : 'favorite-border'} // Change icon based on state
                    size={scaleWidth(25)} 
                    style={{ 
                        color: isFavorite ? '#8B0000' : '#FF6347' // Change color based on state
                    }}
                />
            </TouchableOpacity>
            
            
            ) : (
              <TouchableOpacity 
              onPress={toggleFavorite}
              style={{ 
                  height: scaleHeight(30), 
                  width: scaleWidth(40), 
                  backgroundColor: isFavorite ? '#FF6347' : '#FFFFFF', // Change background based on state
                  borderTopRightRadius: 12, 
                  borderBottomLeftRadius: 12, 
                  marginLeft: 'auto', 
                  alignItems: 'center', 
                  justifyContent: 'center',
                  elevation: 2 // Optional: adds shadow on Android
              }}
          >
              <MaterialIcons
                  name={isFavorite ? 'favorite' : 'favorite-border'} // Change icon based on state
                  size={scaleWidth(25)} 
                  style={{ 
                      color: isFavorite ? '#8B0000' : '#FF6347' // Change color based on state
                  }}
              />
          </TouchableOpacity>
          


              )
            }
    </View>
  )
}

export default Love



================================================
File: components/viewScreens/Price.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import { styles } from '../../style/style'
import { scaleWidth } from '../../Scaling'

const Price = ({price,priceFontSize}) => {
  return (
    <View style={styles.price}>
    <Text style={{ fontSize: scaleWidth(15), color: '#8D6E63', fontFamily: 'montserrat_semibold' }}>Rs.</Text>
    <Text style={{ fontSize: scaleWidth(priceFontSize), color: '#8D6E63', fontFamily: 'montserrat_semibold' }}>{price}</Text>
  </View>
)}

export default Price



================================================
File: components/viewScreens/RecentSearchBar.tsx
================================================
import { StyleSheet, Text, View } from 'react-native'
import React from 'react'
import { Feather } from '@expo/vector-icons';
import { styles } from '../../style/style';
import { scaleHeight, scaleWidth } from '../../Scaling';

const RecentSearchBar = ({search_pharse}) => {
  return (
    <View style={{ flexDirection: 'row', alignItems: 'flex-start', justifyContent: 'center' }}>

    <View style={[styles.searchBar, { height: 'auto', width: 'auto' }]}>
        <Text style={{fontFamily:'poppins_regular',fontSize:scaleWidth(14)}}>{search_pharse}</Text>
    </View>

    <View style={[styles.searchView, { height: scaleHeight(30), width: scaleWidth(35) }]}>
        <Feather
            name="search"
            size={scaleWidth(20)}
            style={{ color: '#333333' }}
        />
    </View>

</View>
  )
}

export default RecentSearchBar

// const styles = StyleSheet.create({})

================================================
File: components/viewScreens/ReviewSection.tsx
================================================
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import FontAwesome from 'react-native-vector-icons/FontAwesome';
import { scaleWidth, scaleHeight } from  '../../Scaling';

const RatingStars = ({ rating, size = 16, color = "#FFD700" }) => {
  return (
    <View style={styles.starContainer}>
      {[...Array(5)].map((_, index) => (
        <FontAwesome
          key={index}
          name={index < rating ? 'star' : 'star-o'}
          size={scaleWidth(size)}
          color={color}
        />
      ))}
    </View>
  );
};

const ReviewSection = ({ratingNumber,comment,person_name }) => {

  return (
      <View style={styles.reviewCard}>
        <View style={styles.reviewHeader}>
          <Text style={styles.reviewerName}>{person_name}</Text>
          <RatingStars rating={ratingNumber} />
        </View>
        
        <Text style={styles.reviewText}>
        {comment}
        </Text>
      </View>
   
  );
};

const styles = StyleSheet.create({
  
  reviewCard: {
    backgroundColor: 'white',
    padding: scaleWidth(16),
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 3,
  },
  reviewHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: scaleWidth(8),
    marginBottom: scaleHeight(8),
  },
  reviewerName: {
    fontSize: scaleWidth(14),
    color: '#4A4A4A',
    fontWeight: '500',
  },
  starContainer: {
    flexDirection: 'row',
    gap: scaleWidth(2),
  },
  reviewText: {
    fontSize: scaleWidth(14),
    color: '#2C2C2C',
    lineHeight: scaleHeight(20),
  },
});

export default ReviewSection;

================================================
File: components/viewScreens/Time_FeedBack.tsx
================================================
import { StyleSheet, Text, View,Dimensions } from 'react-native'
import React from 'react'
import MaterialCommunity from 'react-native-vector-icons/MaterialCommunityIcons'
import FontAwesome from 'react-native-vector-icons/FontAwesome'
const { width, height } = Dimensions.get('window');

const Time_FeedBack = () => {
  return (
    <View style={styles1.time_and_feedback}>
    <View style={styles1.time}>
      <Text style={styles1.timeText}>Ready in </Text>
      <Text style={[styles1.timeText, { fontSize: 18 }]}>( 20 mins </Text>
      <MaterialCommunity name='clock-time-eight-outline' style={{ marginTop: 5 }} size={20} color="grey" />
    </View>
    <Text style={styles1.separator}>|</Text>
    <View style={styles1.feedback}>
      <FontAwesome name='star' size={20} style={{ marginTop: 5 }} color="#FFD700" />
      <Text style={styles1.feedbackText}>4.5 ) Feedback</Text>
    </View>
  </View>
  )
}

export default Time_FeedBack

const styles1 = StyleSheet.create({
    time_and_feedback: {
        height: '7%',
        width: width,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        paddingHorizontal:10
      },
      time: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'flex-end',
        width: width*0.54,
        padding: 3,
      },
      timeText: {
        color: 'grey',
        fontFamily: 'jakarta_bold',
        fontSize: 18,
      },
      separator: {
        fontSize: 40,
        color: 'grey',
      },
      feedback: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'flex-start',
        width: '46%',
        gap: 5,
      },
      feedbackText: {
        color: 'grey',
        fontFamily: 'jakarta_bold',
        fontSize: 18,
      },
})

================================================
File: components/viewScreens/TopBar.tsx
================================================
import React from 'react';
import { StyleSheet, Text, View, TouchableOpacity, Dimensions, Platform } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { scaleHeight, scaleWidth } from '../../Scaling';

const { width, height } = Dimensions.get('window');
const TopBar = ({ top_title, navigation, handleSettingIcon, withSettingIcons }) => {
  return (
    <View style={styles.topBarContainer} >

      <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
        <Ionicons name="chevron-back" size={scaleWidth(25)} color="#333333" />
      </TouchableOpacity>

      <View style={styles.titleContainer}>
        <Text style={styles.topBarTitle}>{top_title}</Text>
        <View style={styles.underline} />
      </View>
      {
        withSettingIcons?
        (<TouchableOpacity style={styles.menuButton} onPress={handleSettingIcon}>
          <Ionicons name="settings" size={scaleWidth(25)} color="#333333" />
        </TouchableOpacity>):(
          <View style={{padding:scaleWidth(20)}}></View>
        )
      }

    </View>
  );
};

const styles = StyleSheet.create({
  topBarContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    width: '100%',
    paddingHorizontal: width * 0.04,
    paddingBottom: scaleHeight(6),
    backgroundColor: '#F0F4F8',
    zIndex: 999
  },
  backButton: {
    padding: scaleWidth(5),
    justifyContent: 'center',
    alignItems: 'center',
  },
  titleContainer: {
    alignItems: 'center',
  },
  topBarTitle: {
    fontFamily: 'jakarta_bold',
    fontSize: scaleWidth(18),
    color: '#333333',
    textAlign: 'center',
  },
  underline: {
    width: '80%',
    height: scaleHeight(2),
    backgroundColor: '#333333',
    marginTop: scaleHeight(4),
    borderRadius: 1,
  },
  menuButton: {
    padding: scaleWidth(5),
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default TopBar;

================================================
File: context/AppProvider.js
================================================
import React, { createContext, useEffect, useReducer, useState } from "react";
import { clearTokens, get_data_with_id } from "../service";
import { initialfood_state, food_reducer } from "./userReducerFood";
import { user_reducer, userinitialState } from "./useReducerUser";
import { initialseller_state, seller_reducer } from "./useReducerRestaurant";
import { getUserInformation } from "../apis/getUserInformation";
import { getRestaurantInformation } from "../apis/getRestaurantInformation";
import { getAllFood } from "../apis/getAllFoods";
export const myContext = createContext();

export const AppProvider = ({ children }) => {
  const [state, dispatch] = useReducer(user_reducer, userinitialState);
  const [seller_state, seller_dispatch] = useReducer(
    seller_reducer,
    initialseller_state
  );
  const [food_state, food_dispatch] = useReducer(
    food_reducer,
    initialfood_state
  );
  const [isLoading, setisLoading] = useState(false);
  const [isLogged, setisLogged] = useState(false);
  const [snackBar, setsnackBar] = useState(false);

  const fetchData = async () => {
    state.role === "customer" &&
      (await getUserInformation(dispatch, setisLogged));
    //correct stetup
    await getAllFood(food_dispatch);
    await getRestaurantInformation(
      seller_dispatch,
      (id = null),
      initialseller_state
    );
  };

  useEffect(() => {
    fetchData();
  }, []);

  const clearAllData = async () => {
    await clearTokens();
    dispatch({ type: "RESET" });
    food_dispatch({ type: "CLEAR_FOOD" });
    seller_dispatch({ type: "CLEAR" });
    setsnackBar(false);
    setisLoading(false);
    setisLogged(false);
    console.log("All data cleared");
    console.log(state);
    console.log(userinitialState);
  };

  return (
    <myContext.Provider
      value={{
        state,
        dispatch,
        fetchData,
        clearAllData,
        isLoading,
        setisLoading,
        snackBar,
        setsnackBar,
        seller_state,
        seller_dispatch,
        initialseller_state,
        food_state,
        food_dispatch,
        isLogged,
        setisLogged,
      }}
    >
      {children}
    </myContext.Provider>
  );
};


================================================
File: context/useReducerRestaurant.js
================================================
export const initialseller_state = {
    name: "",
    street_address: "",
    city: "",
    business_type: "",
    opening_hour: "",
    citizenship_number: "",
    pan_number: "",
    logo: null,
    rating: 0,
    is_active: false,
  };
  
  
  
  export const seller_reducer = (seller_state, action) => {
    switch (action.type) {
      case "SET_DATA":
        return {
          ...seller_state,
          [action.key]: action.payload, 
        };
      case "CLEAR":
        return initialseller_state; 
      default:
        return seller_state;
    }
  };
  

================================================
File: context/useReducerUser.js
================================================
export const userinitialState = {
    name: "",
    phone: "",
    email: "",
    profile_picture: null,
    role: "customer",
    snackmessage: "",
  };
  export const user_reducer = (state, action) => {
    switch (action.type) {
      case "name":
        return { ...state, name: action.payload };
      case "phone":
        return { ...state, phone: action.payload };
      case "email":
        return { ...state, email: action.payload };
      case "profile_picture":
        return { ...state, profile_picture: action.payload };
      case "role":
        return { ...state, role: action.payload };
      case "snackmessage":
        return { ...state, snackmessage: action.payload };
      case "RESET":
        return userinitialState;
      default:
        return state;
    }
  };

================================================
File: context/userReducerFood.js
================================================
export const initialfood_state = [];

export const food_reducer = (state, action) => {
  switch (action.type) {
    case "SET_FOOD_LIST":
      return action.payload; 

    case "ADD_FOOD":
      if (state.some((item) => item.id === action.payload.id)) {
        console.warn("Duplicate food ID detected. Use UPDATE_FOOD to edit items.");
        return state;
      }
      return [...state, action.payload]; 
    case "UPDATE_FOOD":
      return state.map((item) =>
        item.id === action.payload.id ? { ...item, ...action.payload } : item
      );

    case "REMOVE_FOOD":
      return state.filter((item) => item.id !== action.payload); 

    case "CLEAR_FOOD":
      return initialfood_state; 

    default:
      throw new Error(`Unhandled action type: ${action.type}`);
  }
};


================================================
File: context/ProvideFunction/Logout.js
================================================
import { CommonActions } from "@react-navigation/native";
import { Alert } from "react-native";
export const handleLogout = async (
  setisLoading,
  clearAllData,
  navigation,
  isSeller
) => {
  Alert.alert(
    "",
    "Are you want to logout?",
    [
      {
        text: "Cancel",
        onPress: () => console.log("Cancel Pressed"),
        style: "cancel",
      },
      {
        text: "Logout",
        onPress: async () => {
          setisLoading(true);
          await clearAllData();
          setisLoading(false);
          if (isSeller) {
            navigation.dispatch(
              CommonActions.reset({
                index: 0,
                routes: [{ name: "LoginScreens" }],
              })
            );
          } else {
            navigation.navigate("TabBars", { screen: "Home" });
          }
        },
      },
    ],
    { cancelable: false }
  );
};


================================================
File: drawernavigator/DrawerNavigator.tsx
================================================
// navigation/DrawerNavigator.js
import React from 'react';
import { createDrawerNavigator } from '@react-navigation/drawer';
import Menu from '../sellerScreen/Menu';
import ProfileScreen from '../screens/tabScreens/Profile';
import SellerSetting from '../sellerScreen/SellerSetting';

const Drawer = createDrawerNavigator();

export default function DrawerNavigator() {
  return (
    <Drawer.Navigator
      screenOptions={{ headerShown: false }}
      drawerContentOptions={{ activeTintColor: '#e91e63' }}
    >
      <Drawer.Screen name="Menu"  />
      <Drawer.Screen name="Profile"  />
      <Drawer.Screen name="Settings"  />
    </Drawer.Navigator>
  );
}


================================================
File: screens/auth/ForgetPassword.tsx
================================================
import { View } from 'react-native'
import React, { useState } from 'react'
import UserInput from '../../components/auth/UserInput'
import { SafeAreaView } from 'react-native-safe-area-context';
import Button from '../../components/auth/Button';
import { styles } from '../../style/style';
import { StatusBar } from 'expo-status-bar';
import IntroText from '../../components/auth/IntroText';

const ForgetPassword = ({ navigation }) => {
    const [email, set_email] = useState(null)
    return (
        <SafeAreaView>
            <StatusBar hidden={false} backgroundColor='#F5F5F5' style='dark' />
            <View style={styles.mainViewStyle}>
                <IntroText
                    headingText='Forget Password ?'
                    line1='Enter your email to reset' 
                    line2='' 
                    style={[styles.BigText_for_login,{marginBottom:0}]}
                />
                <UserInput
                    value={email}
                    onChangeText={set_email}
                    inputBoxStyle={[styles.inputField,{marginBottom:20}]}
                    authBox={[styles.authBox, { borderRadius: 8,height:60 }]}
                    inputTopic={null}
                    isEyeNeeded={false}
                    passwordVisible={null}
                    togglePasswordVisibility={undefined}
                />
                <Button style={styles.loginButton} btnText='Send Code' handleAuthBtn={() => navigation.navigate('VerificationScreen')} />
            </View>
        </SafeAreaView>
    )
}
export default ForgetPassword



================================================
File: screens/auth/LoginScreens.tsx
================================================
import { Text, TouchableWithoutFeedback, View, Alert, ActivityIndicator, KeyboardAvoidingView, Platform, Keyboard } from 'react-native'
import React, { useState, useContext } from 'react'
import UserInput from '../../components/auth/UserInput'
import { SafeAreaView } from 'react-native-safe-area-context';
import Button from '../../components/auth/Button';
import { styles } from '../../style/style';
import { StatusBar } from 'expo-status-bar';
import IntroText from '../../components/auth/IntroText';
import { scaleHeight, scaleWidth } from '../../Scaling';
import { get_data, login, post_data, signup } from '../../service';
import { myContext } from '../../context/AppProvider';
import LoadingScreen from '../../components/viewScreens/LoadingScreen';
import { CommonActions } from '@react-navigation/native';

const LoginScreens = ({ navigation }) => {
    const { fetchData, isLoading, setisLoading,setsnackBar,state,dispatch } = useContext(myContext)
    const [email, set_email] = useState(null)
    const [password, set_password] = useState(null)
    const [passwordVisible, setPasswordVisible] = useState(true);

    const togglePasswordVisibility = () => {
        setPasswordVisible(!passwordVisible);
    };

    const handleLogin = async () => {
        Keyboard.dismiss()
        if (email === null || password === null) {
            Alert.alert('Error', 'Please fill all the fields')
            return
        }
        setisLoading(true)
        const response = await login({ email: email, password: password })
        if (response.success) {
            fetchData()
            setisLoading(false)
            navigation.dispatch(
                CommonActions.reset({
                    index: 0,
                    routes: [{ name: 'TabBars' }],
                })
            );
            
            setsnackBar(true)
            dispatch({type:'snackmessage',payload:response.message})
            setTimeout(() => setsnackBar(false), 3000);
        } else {
            setisLoading(false)
            Alert.alert('Error', response.message)
        }

    }
    return (
        <>
            {
                isLoading && (
                    <LoadingScreen />
                )
            }
            <SafeAreaView style={{ flex: 1 }}>
                <KeyboardAvoidingView style={{ flex: 1 }}
                    behavior={Platform.OS === 'ios' ? 'padding' : undefined}>

                    <StatusBar hidden={false} backgroundColor='#F5F5F5' style='dark' />

                    <View style={[styles.mainViewStyle, { justifyContent: 'center' }]}>
                        <IntroText
                            headingText='Hi Foodie,'
                            line1='Sign in to feast on your'
                            line2='fadefood delights'
                            style={styles.BigText_for_login}
                        />
                        <View style={{ width: '100%', alignItems: 'center' }}>
                            <UserInput
                                value={email}
                                onChangeText={set_email}
                                inputBoxStyle={styles.inputField}
                                authBox={[styles.authBox, { borderTopRightRadius: 8, borderTopLeftRadius: 8 }]}
                                inputTopic='Email Address'
                                isEyeNeeded={false}
                                passwordVisible={passwordVisible}
                                togglePasswordVisibility={togglePasswordVisibility}
                            />

                            <UserInput
                                value={password}
                                onChangeText={set_password}
                                inputBoxStyle={styles.inputField}
                                authBox={[styles.authBox, { borderBottomRightRadius: 8, borderBottomLeftRadius: 8 }]}
                                inputTopic='Password'
                                isEyeNeeded={true}
                                passwordVisible={passwordVisible}
                                togglePasswordVisibility={togglePasswordVisibility}
                            />
                            <TouchableWithoutFeedback onPress={() => navigation.navigate('ForgetPassword')}>
                                <Text style={{ color: '#757575', marginLeft: 'auto', paddingRight: '10%', marginTop: scaleHeight(20), fontFamily: 'poppins_regular', fontSize: scaleWidth(12) }}>Forget Password?</Text>
                            </TouchableWithoutFeedback>

                            <Button style={styles.loginButton} btnText='Login' handleAuthBtn={handleLogin} />
                            <View style={{ flexDirection: 'row', justifyContent: 'center', alignItems: 'center' }}>
                                <Text style={{ color: '#757575', marginTop: scaleHeight(10), fontSize: scaleWidth(15), fontFamily: 'poppins_regular' }}>Don&#39;t have an account ?</Text>
                                <TouchableWithoutFeedback onPress={() => { navigation.navigate('SignupScreen') }}>
                                    <Text style={{ color: '#4CAF50', marginTop: scaleHeight(10), fontSize: scaleWidth(18), fontFamily: 'poppins_regular' }}> SignUp</Text>
                                </TouchableWithoutFeedback>
                            </View>
                        </View>

                    </View>
                </KeyboardAvoidingView>
            </SafeAreaView>
        </>
    )
}
export default LoginScreens



================================================
File: screens/auth/SignupScreen.tsx
================================================
import { Text, TouchableWithoutFeedback, View, Alert, KeyboardAvoidingView, Keyboard, Platform } from 'react-native'
import React, { useContext, useState } from 'react'
import UserInput from '../../components/auth/UserInput'
import { SafeAreaView } from 'react-native-safe-area-context';
import Button from '../../components/auth/Button';
import { styles } from '../../style/style';
import { StatusBar } from 'expo-status-bar';
import IntroText from '../../components/auth/IntroText';
import { scaleWidth } from '../../Scaling';
import { post_data, signup } from '../../service';
import { myContext } from '../../context/AppProvider';
import LoadingScreen from '../../components/viewScreens/LoadingScreen';
import { CommonActions } from '@react-navigation/native';

const SignupScreen = ({ navigation }) => {
    const { fetchData, isLoading, setisLoading,setmessage,setsnackBar,dispatch } = useContext(myContext)
    const [email, set_email] = useState(null)
    const [password, set_password] = useState({ initialPassword: null, confirmPassword: null })
    const [passwordVisible, setPasswordVisible] = useState({ initialPassword: true, confirmPassword: true });

    const togglePasswordVisibility = (field: string) => {
        setPasswordVisible((prevState) => ({
            ...prevState, [field]: !prevState[field]
        }));
    };

    const handleSignUp = async () => {
        Keyboard.dismiss()
        setisLoading(true)
        if (email === null || password.initialPassword === null || password.confirmPassword === null) {
            setisLoading(false)
            Alert.alert('Error', 'Please fill all the fields')
            return
        }
        else if (password.initialPassword !== password.confirmPassword) {
            setisLoading(false)
            Alert.alert('Error', 'Password does not match')
            return
        }
        
        const response = await signup({ email: email, password: password.initialPassword })
        if (response.success) {
           await fetchData()
            setisLoading(false)
            navigation.dispatch(
                CommonActions.reset({
                    index: 0,
                    routes: [{ name: 'TabBars' }],
                })
            );

            dispatch({type:'snackmessage',payload:response.message})
            setsnackBar(true)
            setTimeout(() => setsnackBar(false), 3000);
        } else {
            Alert.alert('Error', response.message)
            setisLoading(false)
        }
    }
    return (
        <>
            {
                isLoading && (
                    <LoadingScreen />
                )
            }

            <SafeAreaView style={{ flex: 1 }}>
                <KeyboardAvoidingView style={{ flex: 1 }}
                    behavior={Platform.OS === 'ios' ? 'padding' : undefined}>
                    <StatusBar hidden={false} backgroundColor='#F5F5F5' style='dark' />
                    <View style={styles.mainViewStyle}>
                        <IntroText
                            headingText='Join Us,'
                            line1='Sign up to connect with'
                            line2='your favorite food'
                            style={styles.BigText_for_login}
                        />
                        <UserInput
                            value={email}
                            onChangeText={set_email}
                            inputBoxStyle={styles.inputField}
                            authBox={[styles.authBox, { borderTopRightRadius: 10, borderTopLeftRadius: 10 }]}
                            inputTopic='Email Address'
                            isEyeNeeded={false}
                            passwordVisible={false}
                            togglePasswordVisibility={undefined}
                        />
                        <UserInput
                            value={password.initialPassword}
                            onChangeText={(text) => set_password({ ...password, initialPassword: text })}
                            inputBoxStyle={styles.inputField}
                            authBox={styles.authBox}
                            inputTopic='Password'
                            isEyeNeeded={true}
                            passwordVisible={passwordVisible.initialPassword}
                            togglePasswordVisibility={() => togglePasswordVisibility('initialPassword')}
                        />
                        <UserInput
                            value={password.confirmPassword}
                            onChangeText={(text) => set_password({ ...password, confirmPassword: text })}
                            inputBoxStyle={styles.inputField}
                            authBox={[styles.authBox, { borderBottomRightRadius: 10, borderBottomLeftRadius: 10 }]}
                            inputTopic='Confirm Password'
                            isEyeNeeded={true}
                            passwordVisible={passwordVisible.confirmPassword}
                            togglePasswordVisibility=
                            {() => togglePasswordVisibility('confirmPassword')}
                        />
                        <Button
                            style={styles.loginButton}
                            btnText='Sign Up'
                            handleAuthBtn={handleSignUp}
                        />
                        <View style={{ flexDirection: 'row', justifyContent: 'center', alignItems: 'center' }}>
                            <Text style={{ color: '#757575', marginTop: 10, fontSize: scaleWidth(15), fontFamily: 'poppins_regular' }}>Already have an account ?</Text>
                            <TouchableWithoutFeedback onPress={() => { navigation.navigate('LoginScreens') }}>
                                <Text style={{ color: '#4CAF50', marginTop: 10, fontSize: scaleWidth(18), fontFamily: 'poppins_regular' }}> Login</Text>
                            </TouchableWithoutFeedback>
                        </View>

                    </View>
                </KeyboardAvoidingView>
            </SafeAreaView>
        </>
    )
}
export default SignupScreen;


================================================
File: screens/auth/VerificationScreen.tsx
================================================
import React, { useState, useRef } from 'react';
import { View, TextInput, TouchableWithoutFeedback, Text } from 'react-native';
import { styles } from '../../style/style';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import IntroText from '../../components/auth/IntroText';
import Button from '../../components/auth/Button';

const VerificationScreen = () => {
    const [pin, setPin] = useState(['', '', '', '']);
    const inputRefs = useRef([]); // Refs to control focus of each TextInput

    const handleChange = (text: string, index: number) => {
        const newPin = [...pin];
        newPin[index] = text;
        setPin(newPin);

        // Move to the next input box if the current one is filled
        if (text && index < inputRefs.current.length - 1) {
            inputRefs.current[index + 1].focus();
        }
    };

    const handleKeyPress = (e: any, index: number) => {
        // Handle backspace functionality
        if (e.nativeEvent.key === 'Backspace' && !pin[index] && index > 0) {
            inputRefs.current[index - 1].focus(); // Move to the previous input
        }
    };

    return (
        <SafeAreaView>
            <StatusBar hidden={false} backgroundColor='#F5F5F5' style='dark' />
            <View style={styles.mainViewStyle}>
                <IntroText
                    headingText='Verification,'
                    line1='Enter the code sent to'
                    line2='your email'
                    style={[styles.BigText_for_login, { marginBottom: 0 }]}
                />

                <View style={styles.verifyBoxContainer}>
                    {pin.map((p, index) => (
                        <TextInput
                            key={index}
                            ref={(el) => (inputRefs.current[index] = el)}
                            style={styles.verifyInputBox}
                            keyboardType="numeric"
                            maxLength={1}
                            value={p}
                            selectionColor="#BDBDBD"
                            onChangeText={(text) => handleChange(text, index)}
                            onKeyPress={(e) => handleKeyPress(e, index)} // Backspace handling
                        />
                    ))}
                </View>

                <Button
                    style={[styles.loginButton,{backgroundColor:'#4CAF50'}]}
                    btnText='Verify'
                    handleAuthBtn={() => console.log('verify btn is pressed')}
                />

                <View style={{ flexDirection: 'row', justifyContent: 'center', alignItems: 'center' }}>
                    <Text style={{ color: '#757575', marginTop: 10, fontSize: 15 }}>Didn&#39;t receive code ?</Text>
                    <TouchableWithoutFeedback onPress={() => console.log('resending code')}>
                        <Text style={{ color: '#4CAF50', marginTop: 10, fontSize: 18 }}> resend</Text>
                    </TouchableWithoutFeedback>
                </View>
            </View>
        </SafeAreaView>
    );
};

export default VerificationScreen;


================================================
File: screens/payment/MethodSelection.tsx
================================================
import { StyleSheet, Text, View , Image} from 'react-native'
import React from 'react'
import { SafeAreaView } from "react-native-safe-area-context";
import { StatusBar } from "expo-status-bar";
import TopBar from '../../components/viewScreens/TopBar';
import { scaleHeight, scaleWidth } from '../../Scaling';
import esewa from '../../assets/esewa.png'



const MethodSelection = ({ navigation }) => {
  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: "#F0F4F8" }}>
      <StatusBar hidden={false} backgroundColor="#F0F4F8" style="dark" />
      <TopBar navigation={navigation} top_title='Payment' withSettingIcons={false} handleSettingIcon={undefined} />
      <View style={styles.container}>
        <View style={styles.paymentBar}>
              <View style={styles.paymentLogo}>
                <Image source={esewa} style={styles.paymentLogoImage} />
              </View>

              <View style={styles.paymentText}>
                <Text style={styles.paymentTextTitle}>Esewa</Text>
              </View>

        
            </View>
      </View>
    </SafeAreaView >
  )
}

export default MethodSelection

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
  },
  paymentBar: {
    backgroundColor: "#fff",
    height: scaleHeight(100),
    width: "90%",
    borderRadius: scaleWidth(10),
    marginTop: scaleHeight(10),
    flexDirection: "row",
    justifyContent: "flex-start",
    alignItems: "center",
    paddingHorizontal: scaleWidth(10),
    gap:scaleWidth(10),
    padding:scaleHeight(10),

  },
  paymentLogo:{
    width:scaleWidth(50),
    height:scaleHeight(50),
    borderRadius:scaleWidth(10),
  },

  paymentLogoImage:{
    width:scaleWidth(50),
    height:scaleHeight(50),
    borderRadius:scaleWidth(10),

  },
  paymentTextTitle:{
    fontSize:scaleWidth(20),
    color:"#000",
    fontFamily:'montserrat_semibold'
  }



})

================================================
File: screens/tabScreens/Chat.tsx
================================================
import React, { useContext, useState } from "react";
import { myContext } from "../../context/AppProvider";
import ChatContent from "./ChatContent";
import AuthPrompt from "../viewScreens/AuthPrompt";

const Chat = ({ navigation }) => {
  const { isLogged } = useContext(myContext)
  return (
    <>
      {isLogged ? (<ChatContent navigation={navigation} />) : (<AuthPrompt navigation={navigation} />)}

    </>
  );
};
export default Chat;

